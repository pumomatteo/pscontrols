{"version":3,"file":"splitButton.js","sources":["../../../../src/ui/controls/splitButton.ts"],"sourcesContent":["import { ControlTypeEnum, ButtonModeEnum, ColorSettings, createButton, IconClassicLight, IconClass, PopupSettings, puma, shadowRoot, createSeparator, OrientationEnum } from \"../vr\";\nimport { VrControlOptions, VrControl } from \"../common\";\nimport { UtilityManager } from \"../../../src/managers/utilityManager\";\nimport { Button } from \"./button\";\n\n//#region Options\nexport class SplitButtonOptions extends VrControlOptions\n{\n    text?: string;\n    icon?: IconClass;\n    imageUrl?: string;\n    colorSettings?: ColorSettings;\n    popupSettings?: PopupSettings;\n    tooltip?: string;\n    items?: SplitButtonItem[];\n    hoverMode?: boolean;\n    modal?: boolean;\n    showDefault?: boolean;\n    separator?: boolean;\n\n    onClick?: (e: SplitButtonMainClickEvent) => void;\n    onSelect?: (e: SplitButtonSelectClickEvent) => void;\n}\n//#endregion\n\n//#region Control\nexport class SplitButton extends VrControl\n{\n    private _popup: HTMLElement;\n    private _btnMain: Button;\n    private _items: SplitButtonItem[];\n    private _itemButtonList: Button[];\n\n    constructor(element: HTMLElement, options?: SplitButtonOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new SplitButtonOptions();\n\n        if (options.text == null) options.text = \"\";\n        if (options.items == null) options.items = [];\n        if (options.hoverMode == null) options.hoverMode = false;\n        if (options.modal == null) options.modal = false;\n        if (options.showDefault == null) options.showDefault = true;\n        if (options.separator == null) options.separator = false;\n        if (options.tabIndex == null) options.tabIndex = -1;\n\n        let width = options.width;\n        options.width = undefined;\n        //#endregion\n\n        super(element, options, ControlTypeEnum.SplitButton);\n        this._itemButtonList = [];\n\n        //#region Main button\n        this._btnMain = createButton(\n            {\n                text: options.text,\n                icon: options.icon,\n                imageUrl: options.imageUrl,\n                colorSettings: options.colorSettings,\n                tooltip: options.tooltip,\n                enable: options.enable,\n                width: width,\n                tabIndex: options.tabIndex,\n                css: \"border-top-right-radius: 0px; border-bottom-right-radius: 0px;\" + ((options.onClick != null) ? \"background-color: #f8f8f8;\" : \"\"),\n                onClick: (e) => \n                {\n                    if (options!.onClick != null)\n                        this.click();\n                    else\n                    {\n                        if (puma(this._popup).is(\":visible\"))\n                            this.close();\n                        else\n                            this.open();\n                    }\n                },\n                onHover: (e) =>\n                {\n                    if (options!.hoverMode)\n                        this.open();\n\n                    puma(divPickerIcon).addClass(\"hoverClass\");\n                },\n                onBlur: (e) =>\n                {\n                    puma(divPickerIcon).removeClass(\"hoverClass\");\n                }\n            }, this.element(), null, element.id + \"btnMain\");\n\n        puma(this.container()).mouseleave((e: any) => \n        {\n            if (options!.hoverMode && e.relatedTarget != this._popup)\n                this.close();\n        });\n        //#endregion\n\n        //#region Default items\n        if (options.onClick != null && options.showDefault)\n        {\n            let defaultItem = new SplitButtonItem();\n            defaultItem.text = options.text;\n            defaultItem.icon = options.icon;\n            defaultItem.imageUrl = options.imageUrl;\n            defaultItem.colorSettings = options.colorSettings;\n            defaultItem.onClick = options.onClick as any;\n            options.items.splice(0, 0, defaultItem);\n        }\n        //#endregion\n\n        //Set items\n        this.items(options.items);\n\n        //#region Picker icon\n        let classPickerIcon = (options.onClick != null) ? \"vrDivPickerIconSplitButton\" : \"vrDivPickerIconSplitButtonFlat\";\n        let pickerIcon = UtilityManager.createIcon(IconClassicLight.CaretDown);\n        let divPickerIcon = puma(\"<div class='\" + classPickerIcon + \"'></div>\").vrAppendToPuma(this.element())[0];\n        puma(divPickerIcon).vrAppendPuma(pickerIcon);\n        puma(divPickerIcon).click(() => \n        {\n            if (puma(this._popup).is(\":visible\"))\n                this.close();\n            else\n                this.open();\n        });\n\n        puma(divPickerIcon).on(\"mouseenter\", (e: JQuery.MouseEnterEvent) => puma(this._btnMain.element()).addClass(\"hoverClass\"))\n        puma(divPickerIcon).on(\"mouseleave\", (e: JQuery.MouseLeaveEvent) => puma(this._btnMain.element()).removeClass(\"hoverClass\"))\n        //#endregion\n\n        window.addEventListener(\"click\", (e: any) =>\n        {\n            if (puma(this._popup).is(\":visible\") && !puma(this.container())[0].contains(e.target))\n                this.close();\n        });\n\n        let baseListener = (shadowRoot() != null) ? shadowRoot() : document;\n        baseListener!.addEventListener(\"scroll\", (e) =>\n        {\n            if (!puma(e.target).hasClass(\"splitButton_divPopup\") && puma(this._popup).is(\":visible\"))\n                this.close();\n        }, true);\n    }\n\n    //#region Methods\n    open(): void\n    {\n        if (!this.enabled())\n            return;\n\n        let options = this.getOptions();\n\n        if (this._popup == null)\n            this._popup = puma(\"<div class='splitButton_divPopup' id='\" + this.element().id + \"_divPopup'></div>\").vrAppendToPuma((shadowRoot() != null) ? shadowRoot() : document.body)[0];\n\n        puma(this._popup).attr(\"tabindex\", \"0\");\n        this._popup.style.cssText += \"min-width: 100px;\";\n\n        puma(this._popup).mouseleave((e: any) => \n        {\n            if (options!.hoverMode)\n                this.close();\n        });\n\n        if (options.modal)\n        {\n            puma(\"#vrWindowBackground_\" + this.element().id).remove();\n            let background = puma(\"<div class='vrWindowBackground' id='vrWindowBackground_\" + this.element().id + \"'></div>\").vrAppendToPuma(document.body)[0];\n            puma(background).show();\n            puma(background).css(\"z-index\", (Number(puma(this._popup).css(\"z-index\")) - 1));\n            puma(background).click(() => this.close());\n        }\n\n        this._itemButtonList = [];\n        this.items(this.items());\n        super.settingPopup(this._popup, options.popupSettings!);\n    }\n\n    close(): void\n    {\n        puma(this._popup).remove();\n        (this._popup as any) = null;\n        puma(\"#vrWindowBackground_\" + this.element().id).remove();\n    }\n\n    items(items?: SplitButtonItem[]): SplitButtonItem[]\n    {\n        if (items != null)\n        {\n            this._items = items;\n            let i = 0;\n            for (let item of items)\n            {\n                if (item.separator === true)\n                {\n                    let divSeparatorContainerValue = (item.value != null) ? \"value='\" + item.value + \"'\" : \"value='separator'\";\n                    let separatorContainer = puma(\"<div \" + divSeparatorContainerValue + \"></div>\").vrAppendToPuma(this._popup);\n                    let separator = createSeparator({\n                        tag: (item.value == null) ? \"separator\" : item.value,\n                        orientation: OrientationEnum.Horizontal,\n                        visible: item.visible,\n                        cssContainer: \"margin-top: -8px !important; margin-bottom: 5px !important;\"\n                    }, separatorContainer);\n\n                    this._itemButtonList.push(separator as any);\n                    continue;\n                }\n\n                this.drawItem(item, i);\n                i++;\n            }\n        }\n        return this._items;\n    }\n\n    private drawItem(item: SplitButtonItem, index?: number)\n    {\n        let options = this.getOptions();\n        if (index == null) index = -1;\n\n        let divItemContainerValue = (item.value != null) ? \"value='\" + item.value + \"'\" : \"\";\n        if (item.text != null && (divItemContainerValue == null || divItemContainerValue == \"\"))\n            divItemContainerValue = \"value='\" + item.text.replace(/[^a-z0-9\\s]/gi, \"\").replace(/[_\\s]/g, \"\") + \"'\";\n\n        let divItemContainer = puma(\"<div class='vrSplitButton_divItemContainer' \" + divItemContainerValue + \"></div>\").vrAppendToPuma(this._popup);\n        let button = createButton(\n            {\n                text: item.text,\n                icon: item.icon,\n                imageUrl: item.imageUrl,\n                mode: item.mode,\n                colorSettings: item.colorSettings,\n                confirmationMessage: item.confirmationMessage,\n                tooltip: item.tooltip,\n                visible: item.visible,\n                enable: item.enable,\n                tag: item.value,\n                width: \"100%\",\n                css: \"width: 100%; text-align: left; border: none;\" + item.css,\n                cssContainer: item.cssContainer + \";\" + ((options.separator) ? \"border-bottom: solid 1px #dedede;\" : \"\"),\n                class: item.class,\n                tabIndex: options.tabIndex,\n                onClick: (e) => \n                {\n                    this.close();\n                    if (item.onClick != null)\n                    {\n                        let clickEvent = new SplitButtonClickEvent();\n                        clickEvent.sender = this;\n                        clickEvent.item = item;\n                        item.onClick(clickEvent);\n                    }\n\n                    if (options.onSelect != null)\n                    {\n                        let clickEvent = new SplitButtonSelectClickEvent();\n                        clickEvent.text = options.text;\n                        clickEvent.value = String(item.value);\n                        clickEvent.mainButton = false;\n                        options.onSelect(clickEvent);\n                    }\n                }\n            }, divItemContainer);\n\n        if (item.value != null)\n            puma(button.element()).attr(\"value\", item.value);\n\n        this._itemButtonList.push(button);\n    }\n\n    addItem(item: SplitButtonItem)\n    {\n        this.drawItem(item);\n        this._items.push(item);\n    }\n\n    removeItem(value: string | number)\n    {\n        puma(this._popup).find(\".vrSplitButton_divItemContainer[value='\" + value + \"']\").remove();\n        this._items.vrDeleteAllBy(k => k.value == value);\n    }\n\n    clearItems()\n    {\n        puma(this._popup).empty();\n        this._items = [];\n        this._itemButtonList = [];\n    }\n\n    enable(): void\n    {\n        super.enable();\n        puma(this.container()).find(\".vrDivPickerIconSplitButton\").removeClass(\"vrDivPickerIconDisable\");\n        puma(this.container()).find(\".vrDivPickerIconSplitButtonFlat\").removeClass(\"vrDivPickerIconDisable\");\n\n        if (this._btnMain != null)\n            this._btnMain.enable();\n    }\n\n    disable(): void\n    {\n        super.disable();\n        puma(this.container()).find(\".vrDivPickerIconSplitButton\").addClass(\"vrDivPickerIconDisable\");\n        puma(this.container()).find(\".vrDivPickerIconSplitButtonFlat\").addClass(\"vrDivPickerIconDisable\");\n\n        if (this._btnMain != null)\n            this._btnMain.disable();\n    }\n\n    //#region Visibility\n    itemVisible(value: string | number, state?: boolean): boolean\n    {\n        let itemButton = this._itemButtonList.filter(k => k.tag() == value)[0];\n        if (state != null)\n        {\n            itemButton.visible(state);\n            let index = this._items.findIndex(k => k.value == value);\n            let item = this._items[index];\n            item.visible = state;\n        }\n        return itemButton.visible();\n    }\n\n    showItem(value: string | number): void\n    {\n        this.itemVisible(value, true);\n    }\n\n    showItems(values: string[] | number[])\n    {\n        for (let value of values)\n            this.showItem(value);\n    }\n\n    showOnlyThisItem(value: string | number)\n    {\n        for (let item of this._itemButtonList)\n            this.itemVisible(item.tag(), item.tag() == value);\n    }\n\n    hideItem(value: string | number): void\n    {\n        this.itemVisible(value, false);\n    }\n\n    hideItems(values: string[] | number[])\n    {\n        for (let value of values)\n            this.hideItem(value);\n    }\n\n    hideOnlyThisItem(value: string | number)\n    {\n        for (let item of this._itemButtonList)\n            this.itemVisible(item.tag(), item.tag() != value);\n    }\n    //#endregion\n\n    //#region Enable\n    itemEnable(value: string | number, state?: boolean): boolean\n    {\n        let itemButton = this._itemButtonList.filter(k => k.tag() == value)[0];\n        if (state != null)\n        {\n            itemButton.enabled(state);\n            let index = this._items.findIndex(k => k.value == value);\n            let item = this._items[index];\n            item.enable = state;\n        }\n\n        return itemButton.enabled();\n    }\n\n    enableAllItems()\n    {\n        this.enableItems(this.items().map(k => String(k.value)));\n    }\n\n    enableItems(values: string[] | number[])\n    {\n        for (let value of values)\n            this.enableItem(value);\n    }\n\n    enableItem(value: string | number): void\n    {\n        this.itemEnable(value, true);\n    }\n\n    disableAllItems()\n    {\n        this.disableItems(this.items().map(k => String(k.value)));\n    }\n\n    disableItems(values: string[] | number[])\n    {\n        for (let value of values)\n            this.disableItem(value);\n    }\n\n    disableItem(value: string | number): void\n    {\n        this.itemEnable(value, false);\n    }\n    //#endregion\n\n    item(value: string | number): Button | null\n    {\n        let itemButton = this._itemButtonList.filter(k => k.tag() == value)[0];\n        return itemButton;\n    }\n\n    mainItem()\n    {\n        return this._btnMain;\n    }\n\n    private getOptions(): SplitButtonOptions\n    {\n        return this.options<SplitButtonOptions>();\n    }\n    //#endregion\n\n    //#region Events\n    click(): void\n    {\n        let options = this.getOptions();\n        if (options.onClick != null)\n        {\n            let clickEvent = new SplitButtonMainClickEvent();\n            clickEvent.sender = this;\n            clickEvent.text = options.text;\n            clickEvent.items = options.items;\n            options.onClick(clickEvent);\n        }\n\n        if (options.onSelect != null)\n        {\n            let clickEvent = new SplitButtonSelectClickEvent();\n            clickEvent.text = options.text;\n            clickEvent.mainButton = true;\n            options.onSelect(clickEvent);\n        }\n    }\n    //#endregion\n}\n//#endregion\n\n//#region Classes\nexport class SplitButtonItem\n{\n    text?: string;\n    value?: string | number;\n    icon?: IconClass;\n    imageUrl?: string;\n    separator?: boolean;\n    mode?: ButtonModeEnum;\n    colorSettings?: ColorSettings;\n    confirmationMessage?: string;\n    visible?: boolean;\n    enable?: boolean;\n    tooltip?: string;\n    css?: string;\n    cssContainer?: string;\n    class?: string;\n\n    onClick?: (e: SplitButtonClickEvent) => void;\n}\n\nclass SplitButtonClickEvent\n{\n    sender: SplitButton;\n    item: SplitButtonItem;\n}\n\nclass SplitButtonMainClickEvent\n{\n    sender: SplitButton;\n    text?: string;\n    value?: string;\n    items?: SplitButtonItem[];\n}\n\nclass SplitButtonSelectClickEvent\n{\n    text?: string;\n    value?: string;\n    mainButton?: boolean;\n}\n//#endregion"],"names":[],"mappings":"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"}