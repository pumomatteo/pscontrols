{"version":3,"file":"checkboxList.js","sources":["../../../../src/ui/controls/checkboxList.ts"],"sourcesContent":["import { UtilityManager } from \"../../../src/managers/utilityManager\";\nimport { VrControlOptions, VrControl, VrControlsEvent } from \"../common\";\nimport { ControlTypeEnum, OrientationEnum, createCheckBox, puma, CheckBoxItem } from \"../vr\";\nimport { CheckBoxCheckEvent, CheckBox } from \"./checkbox\";\n\n//#region Options\nexport class CheckBoxListOptions extends VrControlOptions\n{\n    items?: CheckBoxItem[];\n    orientation?: OrientationEnum;\n    allChecked?: boolean;\n    listName?: string;\n    marginBetween?: number;\n    // Gestione required e validation\n    // Single check or multi\n\n    onBeforeSelect?(e: CheckBoxListSelectEvent): void;\n    onSelect?(e: CheckBoxListSelectEvent): void;\n}\n//#endregion\n\n//#region Control\nexport class CheckBoxList extends VrControl\n{\n    private _checkboxControls: CheckBox[];\n    private _items: CheckBoxItem[];\n\n    constructor(element: HTMLElement, options?: CheckBoxListOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new CheckBoxListOptions();\n\n        if (options.orientation == null) options.orientation = OrientationEnum.Horizontal;\n        if (options.items == null) options.items = [];\n        if (options.listName == null) options.listName = element.id + \"_CheckboxListName\";\n        if (options.marginBetween == null) options.marginBetween = 10;\n        //#endregion\n\n        super(element, options, ControlTypeEnum.CheckBoxList);\n        this._checkboxControls = [];\n\n        this.items(options.items);\n    }\n\n    //#region Methos\n    items(items?: CheckBoxItem[]): CheckBoxItem[]\n    {\n        let options = this.getOptions();\n        if (items != null)\n        {\n            this._items = items;\n            let i = 0;\n            for (let item of items)\n            {\n                let checkBox = createCheckBox(\n                    {\n                        text: item.text,\n                        value: (item.value == null) ? item.text : String(item.value),\n                        name: options.listName,\n                        checked: (options.allChecked) ? true : item.checked,\n                        tag: item.tag,\n                        cssContainer: (options.orientation == OrientationEnum.Horizontal && i > 0) ? \"margin-left: \" + options.marginBetween + \"px;\" : ((options.orientation == OrientationEnum.Vertical) ? \"width: 100%\" : \"\"),\n                        onCheck: (e) => \n                        {\n                            if (options!.onBeforeSelect != null)\n                            {\n                                let selectEvent = new CheckBoxListSelectEvent();\n                                selectEvent.sender = this;\n                                selectEvent.value = String(item.value);\n                                selectEvent.checked = e.checked;\n                                selectEvent.checkedValues = this.value();\n                                options!.onBeforeSelect(selectEvent);\n\n                                if (selectEvent.isDefaultPrevented())\n                                    return;\n                            }\n\n                            if (item.onCheck != null)\n                                item.onCheck(e);\n\n                            if (options!.onSelect != null)\n                            {\n                                let selectEvent = new CheckBoxListSelectEvent();\n                                selectEvent.sender = this;\n                                selectEvent.value = String(item.value);\n                                selectEvent.checked = e.checked;\n                                selectEvent.checkedValues = this.value();\n                                options!.onSelect(selectEvent);\n                            }\n                        }\n                    }, this.element());\n\n                this._checkboxControls.push(checkBox);\n                i++;\n            }\n        }\n        return this._items;\n    }\n\n    checkAll(triggerChange = false): void\n    {\n        for (let checkbox of this._checkboxControls)\n            checkbox.checked(true, triggerChange);\n    }\n\n    unCheckAll(triggerChange = false): void\n    {\n        for (let checkbox of this._checkboxControls)\n            checkbox.checked(false, triggerChange);\n    }\n\n    value(values?: string[], state = true, triggerChange = true): string[]\n    {\n        if (values != null)\n        {\n            for (let value of values)\n            {\n                let checkbox = this._checkboxControls.filter(k => puma(k.element()).attr(\"value\") == value)[0];\n                if (checkbox != null)\n                    checkbox.checked(state, triggerChange);\n            }\n        }\n        return this._checkboxControls.filter(k => k.checked()).map(k => puma(k.element()).attr(\"value\"));\n    }\n\n    valueTag(tagList?: any[], state = true, triggerChange = true)\n    {\n        if (tagList != null)\n        {\n            for (let tag of tagList)\n            {\n                let checkbox = this._checkboxControls.filter(k => UtilityManager.equals(k.tag(), tag))[0];\n                if (checkbox != null)\n                    checkbox.checked(state, triggerChange);\n            }\n        }\n        return this._checkboxControls.filter(k => k.checked()).map(k => k.tag());\n    }\n\n    isChecked(value: string): boolean\n    {\n        let checkBox = this._checkboxControls.filter(k => puma(k.element()).attr(\"value\") == value)[0];\n        if (checkBox != null)\n            return checkBox.checked();\n\n        return false;\n    }\n\n    text(value: string, text?: string): string\n    {\n        let checkBox = this._checkboxControls.filter(k => puma(k.element()).attr(\"value\") == value)[0];\n        if (checkBox != null)\n            return checkBox.text(text);\n\n        return \"\";\n    }\n\n    clear(checkAll = false, triggerChange = false): void\n    {\n        if (checkAll)\n            this.checkAll(triggerChange);\n        else\n            this.unCheckAll(triggerChange);\n    }\n\n    clearItems()\n    {\n        this._checkboxControls = [];\n        puma(this.element()).empty();\n    }\n\n    getOptions(): CheckBoxListOptions\n    {\n        return this.options<CheckBoxListOptions>();\n    }\n\n    enable(): void\n    {\n        super.enable();\n        for (let checkbox of this._checkboxControls)\n            checkbox.enable();\n    }\n\n    disable(): void\n    {\n        super.disable();\n        for (let checkbox of this._checkboxControls)\n            checkbox.disable();\n    }\n    //#endregion\n}\n//#endregion\n\n//#region Classes\nclass CheckBoxListSelectEvent extends VrControlsEvent\n{\n    sender: CheckBoxList;\n    checkedValues?: string[];\n    value?: string;\n    checked?: boolean;\n}\n//#endregion"],"names":[],"mappings":";;;AAMO,MAAM,4BAA4B,iBACzC;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAMJ;AAIO,MAAM,qBAAqB,UAClC;AAAA,EACY;AAAA,EACA;AAAA,EAER,YAAY,SAAsB,SAClC;AAEI,QAAI,WAAW;AACX,gBAAU,IAAI,oBAAA;AAElB,QAAI,QAAQ,eAAe,KAAM,SAAQ,cAAc,gBAAgB;AACvE,QAAI,QAAQ,SAAS,KAAM,SAAQ,QAAQ,CAAA;AAC3C,QAAI,QAAQ,YAAY,KAAM,SAAQ,WAAW,QAAQ,KAAK;AAC9D,QAAI,QAAQ,iBAAiB,KAAM,SAAQ,gBAAgB;AAG3D,UAAM,SAAS,SAAS,gBAAgB,YAAY;AACpD,SAAK,oBAAoB,CAAA;AAEzB,SAAK,MAAM,QAAQ,KAAK;AAAA,EAC5B;AAAA;AAAA,EAGA,MAAM,OACN;AACI,QAAI,UAAU,KAAK,WAAA;AACnB,QAAI,SAAS,MACb;AACI,WAAK,SAAS;AACd,UAAI,IAAI;AACR,eAAS,QAAQ,OACjB;AACI,YAAI,WAAW;AAAA,UACX;AAAA,YACI,MAAM,KAAK;AAAA,YACX,OAAQ,KAAK,SAAS,OAAQ,KAAK,OAAO,OAAO,KAAK,KAAK;AAAA,YAC3D,MAAM,QAAQ;AAAA,YACd,SAAU,QAAQ,aAAc,OAAO,KAAK;AAAA,YAC5C,KAAK,KAAK;AAAA,YACV,cAAe,QAAQ,eAAe,gBAAgB,cAAc,IAAI,IAAK,kBAAkB,QAAQ,gBAAgB,QAAU,QAAQ,eAAe,gBAAgB,WAAY,gBAAgB;AAAA,YACpM,SAAS,CAAC,MACV;AACI,kBAAI,QAAS,kBAAkB,MAC/B;AACI,oBAAI,cAAc,IAAI,wBAAA;AACtB,4BAAY,SAAS;AACrB,4BAAY,QAAQ,OAAO,KAAK,KAAK;AACrC,4BAAY,UAAU,EAAE;AACxB,4BAAY,gBAAgB,KAAK,MAAA;AACjC,wBAAS,eAAe,WAAW;AAEnC,oBAAI,YAAY,mBAAA;AACZ;AAAA,cACR;AAEA,kBAAI,KAAK,WAAW;AAChB,qBAAK,QAAQ,CAAC;AAElB,kBAAI,QAAS,YAAY,MACzB;AACI,oBAAI,cAAc,IAAI,wBAAA;AACtB,4BAAY,SAAS;AACrB,4BAAY,QAAQ,OAAO,KAAK,KAAK;AACrC,4BAAY,UAAU,EAAE;AACxB,4BAAY,gBAAgB,KAAK,MAAA;AACjC,wBAAS,SAAS,WAAW;AAAA,cACjC;AAAA,YACJ;AAAA,UAAA;AAAA,UACD,KAAK,QAAA;AAAA,QAAQ;AAEpB,aAAK,kBAAkB,KAAK,QAAQ;AACpC;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,SAAS,gBAAgB,OACzB;AACI,aAAS,YAAY,KAAK;AACtB,eAAS,QAAQ,MAAM,aAAa;AAAA,EAC5C;AAAA,EAEA,WAAW,gBAAgB,OAC3B;AACI,aAAS,YAAY,KAAK;AACtB,eAAS,QAAQ,OAAO,aAAa;AAAA,EAC7C;AAAA,EAEA,MAAM,QAAmB,QAAQ,MAAM,gBAAgB,MACvD;AACI,QAAI,UAAU,MACd;AACI,eAAS,SAAS,QAClB;AACI,YAAI,WAAW,KAAK,kBAAkB,OAAO,OAAK,KAAK,EAAE,QAAA,CAAS,EAAE,KAAK,OAAO,KAAK,KAAK,EAAE,CAAC;AAC7F,YAAI,YAAY;AACZ,mBAAS,QAAQ,OAAO,aAAa;AAAA,MAC7C;AAAA,IACJ;AACA,WAAO,KAAK,kBAAkB,OAAO,CAAA,MAAK,EAAE,SAAS,EAAE,IAAI,CAAA,MAAK,KAAK,EAAE,QAAA,CAAS,EAAE,KAAK,OAAO,CAAC;AAAA,EACnG;AAAA,EAEA,SAAS,SAAiB,QAAQ,MAAM,gBAAgB,MACxD;AACI,QAAI,WAAW,MACf;AACI,eAAS,OAAO,SAChB;AACI,YAAI,WAAW,KAAK,kBAAkB,OAAO,CAAA,MAAK,eAAe,OAAO,EAAE,IAAA,GAAO,GAAG,CAAC,EAAE,CAAC;AACxF,YAAI,YAAY;AACZ,mBAAS,QAAQ,OAAO,aAAa;AAAA,MAC7C;AAAA,IACJ;AACA,WAAO,KAAK,kBAAkB,OAAO,CAAA,MAAK,EAAE,QAAA,CAAS,EAAE,IAAI,CAAA,MAAK,EAAE,IAAA,CAAK;AAAA,EAC3E;AAAA,EAEA,UAAU,OACV;AACI,QAAI,WAAW,KAAK,kBAAkB,OAAO,OAAK,KAAK,EAAE,QAAA,CAAS,EAAE,KAAK,OAAO,KAAK,KAAK,EAAE,CAAC;AAC7F,QAAI,YAAY;AACZ,aAAO,SAAS,QAAA;AAEpB,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,OAAe,MACpB;AACI,QAAI,WAAW,KAAK,kBAAkB,OAAO,OAAK,KAAK,EAAE,QAAA,CAAS,EAAE,KAAK,OAAO,KAAK,KAAK,EAAE,CAAC;AAC7F,QAAI,YAAY;AACZ,aAAO,SAAS,KAAK,IAAI;AAE7B,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,WAAW,OAAO,gBAAgB,OACxC;AACI,QAAI;AACA,WAAK,SAAS,aAAa;AAAA;AAE3B,WAAK,WAAW,aAAa;AAAA,EACrC;AAAA,EAEA,aACA;AACI,SAAK,oBAAoB,CAAA;AACzB,SAAK,KAAK,QAAA,CAAS,EAAE,MAAA;AAAA,EACzB;AAAA,EAEA,aACA;AACI,WAAO,KAAK,QAAA;AAAA,EAChB;AAAA,EAEA,SACA;AACI,UAAM,OAAA;AACN,aAAS,YAAY,KAAK;AACtB,eAAS,OAAA;AAAA,EACjB;AAAA,EAEA,UACA;AACI,UAAM,QAAA;AACN,aAAS,YAAY,KAAK;AACtB,eAAS,QAAA;AAAA,EACjB;AAAA;AAEJ;AAIA,MAAM,gCAAgC,gBACtC;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;"}