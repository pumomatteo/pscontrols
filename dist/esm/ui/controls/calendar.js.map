{"version":3,"file":"calendar.js","sources":["../../../../src/ui/controls/calendar.ts"],"sourcesContent":["import { VrControlOptions, VrControl, VrControlsEvent } from \"../common\";\nimport { ControlTypeEnum, puma, createLabel, createButton, IconClassicLight, TextAlignEnum, DateDepthEnum } from \"../vr\";\nimport { ActualViewEnum } from \"./datePicker\";\nimport { Label } from \"./label\";\n\n//#region Options\nexport class CalendarOptions extends VrControlOptions\n{\n    value?: Date;\n    selectedColor?: string;\n    todayLabel?: boolean;\n    otherMonthDays?: boolean;\n    disabledDates?: Date[];\n    highlightedDates?: Date[];\n    dateSlotWidth?: number;\n    depth?: DateDepthEnum;\n    availableFrom?: Date;\n    availableTo?: Date;\n\n    onBeforeChange?(e: CalendarChangingEvent): void;\n    onAfterChange?(e: CalendarChangeEvent): void;\n    onDisableDate?(e: CalendarDisableDateEvent): boolean;\n    onDayDraw?(e: CalendarDayDrawEvent): void;\n    onFinishedDraw?(e: CalendarFinishedDrawEvent): void;\n}\n//#endregion\n\n//#region Control\nexport class Calendar extends VrControl\n{\n    private _value: Date | null;\n    private _actualView: ActualViewEnum;\n    private _tempNavigationDate: Date;\n    private _lblNavigation: Label;\n\n    constructor(element: HTMLElement, options?: CalendarOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new CalendarOptions();\n\n        if (options.selectedColor == null) options.selectedColor = \"#51B3E1\";\n        if (!options.selectedColor.startsWith(\"#\")) options.selectedColor = \"#\" + options.selectedColor;\n        if (options.todayLabel == null) options.todayLabel = true;\n        if (options.otherMonthDays == null) options.otherMonthDays = true;\n        if (options.dateSlotWidth == null) options.dateSlotWidth = 40;\n        if (options.depth == null) options.depth = DateDepthEnum.Day;\n        //#endregion\n\n        super(element, options, ControlTypeEnum.Calendar);\n        this.draw();\n\n        //#region Value\n        if (options.value != null)\n            this.value(options.value, false);\n        //#endregion\n    }\n\n    //#region Methods\n    private draw()\n    {\n        let options = this.getOptions();\n\n        //#region Value\n        let value = this.value();\n        if (value == null)\n            value = new Date();\n\n        this._tempNavigationDate = value;\n\n        const months = [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"];\n        let month = this._tempNavigationDate.getMonth();\n        let monthString = months[month];\n        let year = this._tempNavigationDate.getFullYear();\n        //#endregion\n\n        //#region Header\n        let divHeader = puma(\"<div class='vrDivPickerPopup_Header'></div>\").vrAppendToPuma(this.element())[0];\n        this._lblNavigation = createLabel(\n            {\n                text: monthString + \" \" + year,\n                noBr: true,\n                width: \"Calc(100% - 65px)\",\n                align: TextAlignEnum.Left,\n                class: \"vrDatePickerNavigationLabel\",\n                css: \"padding-left: 10px;\",\n                onClick: (e) =>\n                {\n                    switch (this._actualView)\n                    {\n                        case ActualViewEnum.Day: this.drawMonths(); break;\n                        case ActualViewEnum.Month: this.drawYears(); break;\n                        case ActualViewEnum.Year: this.drawDecades(); break;\n                    }\n                }\n            }, divHeader);\n\n        let prevButton = createButton(\n            {\n                icon: IconClassicLight.CaretLeft,\n                css: \"border: none;\",\n                cssContainer: \"top: 2px;\",\n                width: 30,\n                onClick: (e) => \n                {\n                    switch (this._actualView)\n                    {\n                        case ActualViewEnum.Day:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddMonths(-1);\n                                this.drawDays();\n                            }\n                            break;\n                        case ActualViewEnum.Month:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(-1);\n                                this.drawMonths();\n                            }\n                            break;\n                        case ActualViewEnum.Year:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(-10);\n                                this.drawYears();\n                            }\n                            break;\n                        case ActualViewEnum.Decade:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(-100);\n                                this.drawDecades();\n                            }\n                            break;\n                    }\n                }\n            }, divHeader);\n\n        let nextButton = createButton(\n            {\n                icon: IconClassicLight.CaretRight,\n                css: \"border: none;\",\n                cssContainer: \"top: 2px;\",\n                width: 30,\n                onClick: (e) => \n                {\n                    switch (this._actualView)\n                    {\n                        case ActualViewEnum.Day:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddMonths(1);\n                                this.drawDays();\n                            }\n                            break;\n                        case ActualViewEnum.Month:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(1);\n                                this.drawMonths();\n                            }\n                            break;\n                        case ActualViewEnum.Year:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(10);\n                                this.drawYears();\n                            }\n                            break;\n                        case ActualViewEnum.Decade:\n                            {\n                                this._tempNavigationDate = this._tempNavigationDate.vrAddYears(100);\n                                this.drawDecades();\n                            }\n                            break;\n                    }\n                }\n            }, divHeader);\n        //#endregion\n\n        //#region Days\n        puma(\"<table class='vrDatePickerPopup_table'></table>\").vrAppendToPuma(this.element())[0];\n        //#endregion\n\n        //#region Depth\n        switch (options.depth)\n        {\n            case DateDepthEnum.Day: this.drawDays(); break;\n            case DateDepthEnum.Month: this.drawMonths(); break;\n            case DateDepthEnum.Year: this.drawYears(); break;\n            default:\n                this.drawDays(); break;\n        }\n        //#endregion\n\n        //#region Today\n        let weekDaysLong = [\"Domenica\", \"Lunedì\", \"Martedì\", \"Mercoledì\", \"Giovedì\", \"Venerdì\", \"Sabato\"];\n        let today = new Date();\n        let todayDay = today.getDate();\n        let todayWeek = weekDaysLong[today.getDay()];\n        let todayMonth = today.getMonth();\n        let todayYear = today.getFullYear();\n\n        let divToday = puma(\"<div style='padding: 5px; border-top: solid 1px #CCC; margin-top: 5px; text-align: center;'></div>\").vrAppendToPuma(this.element())[0];\n        createLabel(\n            {\n                text: todayWeek + \" \" + todayDay + \" \" + months[todayMonth] + \" \" + todayYear,\n                colorSettings: { textColor: options.selectedColor },\n                css: \"text-decoration: underline;\",\n                visible: (options.todayLabel) ? true : false,\n                onClick: (e) =>\n                {\n                    this.value(new Date());\n                }\n            }, divToday);\n        //#endregion\n    }\n\n    private drawDays(): void\n    {\n        let options = this.getOptions();\n        this._actualView = ActualViewEnum.Day;\n        this._lblNavigation.enable();\n\n        let table = puma(this.element()).find(\".vrDatePickerPopup_table\")[0];\n        puma(table).empty();\n\n        //#region WeekDays\n        let weekDays = [\"LU\", \"MA\", \"ME\", \"GI\", \"VE\", \"SA\", \"DO\"];\n        let trWeekDays = puma(\"<tr class='vrPicker_tableWeekDays'></tr>\").vrAppendToPuma(table)[0];\n\n        let tdWeekdayFragment = document.createDocumentFragment();\n        for (let weekDay of weekDays)\n        {\n            let td = document.createElement(\"td\");\n            td.style.cssText += \"font-size: 14px; text-align: center; color: #7a7a7a;\";\n            td.innerHTML = weekDay;\n            tdWeekdayFragment.appendChild(td);\n        }\n        trWeekDays.appendChild(tdWeekdayFragment);\n        //#endregion\n\n        let year = this._tempNavigationDate.getFullYear();\n        let month = this._tempNavigationDate.getMonth();\n\n        const months = [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"];\n        let monthString = months[month];\n        this._lblNavigation.value(monthString + \" \" + year);\n\n        let firstDayOfTheMonth = new Date(year, month, 1);\n        let lastDayOfTheMonth = new Date(year, month + 1, 0);\n        let offset = firstDayOfTheMonth.getDay();\n        if (offset == 0)\n            offset = 7;\n        offset -= 1;\n\n        //#region Today/Actual value\n        let today = new Date();\n        let todayMonth = today.getMonth();\n        let todayYear = today.getFullYear();\n        let todayDay = (todayMonth == month && todayYear == year) ? today.getDate() : null;\n\n        let actualValueDay = null;\n        let actualValue = this.value();\n\n        if (actualValue != null)\n        {\n            let actualValueMonth = actualValue.getMonth();\n            let actualValueYear = actualValue.getFullYear();\n            actualValueDay = (actualValueMonth == month && actualValueYear == year) ? actualValue.getDate() : null;\n        }\n        //#endregion\n\n        let prevMonthLastDay = Date.vrGetLastDayOfMonthByDate(new Date(year, month - 1, 1)).getDate() + 1 - offset;\n        let dayCount = 1;\n        let reachLimit = false;\n\n        let trRowListFragment = document.createDocumentFragment();\n        for (let i = 0; i < 6; i++)\n        {\n            let tr = document.createElement(\"tr\");\n            tr.classList.add(\"vrDatePickerPopup_rowDays\");\n            tr.setAttribute(\"row\", String(i));\n\n            for (let j = 0; j < 7; j++)\n            {\n                if (offset == 0)\n                {\n                    //#region Day\n                    let css = \"\";\n                    if (actualValueDay != null && actualValueDay == dayCount && !reachLimit)\n                        css += \"background-color: \" + options.selectedColor + \"; color: #FFF; border: none;\";\n                    else if (todayDay != null && todayDay == dayCount && !reachLimit)\n                        css += \"border: solid 1px \" + options.selectedColor + \";\";\n                    else if (reachLimit)\n                    {\n                        css = \"color: #CCC; border: none;\";\n                        if (!options.otherMonthDays)\n                            css += \"display: none;\";\n                    }\n                    else\n                        css = \"box-shadow: 0 0px 2px rgba(0, 0, 0, .3); border: none;\"\n\n                    let td = document.createElement(\"td\");\n                    td.setAttribute(\"day\", String(dayCount));\n                    tr.appendChild(td);\n\n                    this.createTdDay(dayCount, year, month, td, css);\n                    //#endregion\n\n                    if (dayCount >= lastDayOfTheMonth.getDate())\n                    {\n                        month++;\n                        dayCount = 0;\n                        reachLimit = true;\n                    }\n                    dayCount++;\n                }\n                else\n                {\n                    let css = \"color: #CCC; border: none;\";\n                    if (!options.otherMonthDays)\n                        css += \"display: none;\";\n\n                    let td = document.createElement(\"td\");\n                    td.setAttribute(\"day\", String(prevMonthLastDay));\n                    tr.appendChild(td);\n\n                    this.createTdDay(prevMonthLastDay++, year, month - 1, td, css);\n                    offset--;\n                }\n            }\n            trRowListFragment.appendChild(tr);\n        }\n        table.appendChild(trRowListFragment);\n\n        //#region On finished draw\n        if (options.onFinishedDraw != null)\n        {\n            let event = new CalendarFinishedDrawEvent();\n            event.sender = this;\n            options.onFinishedDraw(event);\n        }\n        //#endregion\n    }\n\n    private createTdDay(day: number, year: number, month: number, td: HTMLElement, css: string): void\n    {\n        let options = this.getOptions();\n        let enable = this.checkAvailability(year, month, day);\n\n        let button = createButton(\n            {\n                text: String(day),\n                width: options.dateSlotWidth,\n                css: css,\n                enable: enable,\n                onClick: (e) =>\n                {\n                    let dateToSelect = new Date(year, month, Number(button.text()), 0, 0, 0);\n                    this.value(dateToSelect);\n                }\n            }, td);\n\n        let date = new Date(year, month, day, 0, 0, 0);\n\n        //#region Disable date\n        if (options.onDisableDate != null)\n        {\n            let event = new CalendarDisableDateEvent();\n            event.sender = this;\n            event.day = date;\n\n            let disable = options.onDisableDate(event);\n            button.enabled(disable);\n        }\n        //#endregion\n\n        //#region On day draw\n        if (options.onDayDraw != null)\n        {\n            let event = new CalendarDayDrawEvent();\n            event.sender = this;\n            event.day = date;\n            options.onDayDraw(event);\n        }\n        //#endregion\n\n        //#region Disabled/Highlighted\n        if (options.disabledDates != null)\n        {\n            let millisecondDates = options.disabledDates.map(k => k.getTime());\n            if (millisecondDates.includes(date.getTime()))\n                button.disable();\n        }\n\n        if (options.highlightedDates != null)\n        {\n            let millisecondDates = options.highlightedDates.map(k => k.getTime());\n            if (millisecondDates.includes(date.getTime()))\n                button.element().style.cssText += \"background-color: \" + options.selectedColor + \"; color: #FFF; border: none; border-radius: 15px;\";\n        }\n        //#endregion\n    }\n\n    private checkAvailability(year: number, month?: number, day?: number)\n    {\n        let options = this.getOptions();\n        let enable = true;\n\n        if (options.availableFrom != null)\n        {\n            if (year < options.availableFrom.getFullYear())\n                enable = false;\n            else if (year == options.availableFrom.getFullYear() && month != null)\n            {\n                if (month < options.availableFrom.getMonth())\n                    enable = false;\n                else if (month == options.availableFrom.getMonth() && day != null\n                    && day < options.availableFrom.getDate())\n                    enable = false;\n            }\n        }\n\n        if (options.availableTo != null)\n        {\n            if (year > options.availableTo.getFullYear())\n                enable = false;\n            else if (year == options.availableTo.getFullYear() && month != null)\n            {\n                if (month > options.availableTo.getMonth())\n                    enable = false;\n                else if (month == options.availableTo.getMonth() && day != null\n                    && day > options.availableTo.getDate())\n                    enable = false;\n            }\n        }\n        return enable;\n    }\n\n    disabledDates(dates?: Date[])\n    {\n        let options = this.getOptions();\n        if (dates != null)\n            options.disabledDates = dates;\n\n        return options.disabledDates;\n    }\n\n    highlightedDates(dates?: Date[])\n    {\n        let options = this.getOptions();\n        if (dates != null)\n            options.highlightedDates = dates;\n\n        return options.highlightedDates;\n    }\n\n    private drawMonths()\n    {\n        this._actualView = ActualViewEnum.Month;\n        this._lblNavigation.enable();\n\n        let table = puma(this.element()).find(\".vrDatePickerPopup_table\")[0];\n        puma(table).empty();\n\n        this._lblNavigation.value(this._tempNavigationDate.getFullYear());\n        const months = [\"GEN\", \"FEB\", \"MAR\", \"APR\", \"MAG\", \"GIU\", \"LUG\", \"AGO\", \"SET\", \"OTT\", \"NOV\", \"DIC\"];\n\n        let trRowListFragment = document.createDocumentFragment();\n        for (let i = 0; i < 3; i++)\n        {\n            let tr = document.createElement(\"tr\");\n            tr.classList.add(\"vrDatePickerPopup_rowMonths\");\n            tr.setAttribute(\"row\", String(i));\n\n            for (let j = 0; j < 4; j++)\n            {\n                let monthIndex = (i * 4 + j);\n                let td = document.createElement(\"td\");\n                td.setAttribute(\"month\", String(monthIndex));\n                tr.appendChild(td);\n\n                let monthAttribute = monthIndex;\n                let enable = this.checkAvailability(this._tempNavigationDate.getFullYear(), monthAttribute);\n\n                createButton(\n                    {\n                        text: \"<span style='color: #CCC;'>\" + (monthIndex + 1) + \"</span><br />\" + months[monthIndex],\n                        width: 55,\n                        height: 58,\n                        enable: enable,\n                        css: \"height: 100%; border: none;\" + ((this.value() != null && monthIndex == this.value()!.getMonth()) ? \"background-color: #e3f1fa;\" : \"\"),\n                        onClick: (e) =>\n                        {\n                            let newMonth = monthIndex;\n                            this._tempNavigationDate.setMonth(newMonth);\n\n                            if (this.depth() == DateDepthEnum.Month)\n                            {\n                                let dateToSelect = new Date(this._tempNavigationDate.getFullYear(), newMonth, 1);\n                                this.value(dateToSelect);\n                            }\n                            else\n                                this.drawDays();\n                        }\n                    }, td);\n            }\n            trRowListFragment.appendChild(tr);\n        }\n        table.appendChild(trRowListFragment);\n    }\n\n    private drawYears()\n    {\n        this._actualView = ActualViewEnum.Year;\n        this._lblNavigation.enable();\n\n        let table = puma(this.element()).find(\".vrDatePickerPopup_table\")[0];\n        puma(table).empty();\n\n        let year = this._tempNavigationDate.getFullYear();\n        let year2digitsFirst = Number(year.toString().substring(0, 2));\n        let year2digitsLast = Number(year.toString().substr(-2));\n        let lastYear2Digits = Math.ceil((year2digitsLast + 1) / 10) * 10; // Nearest multiple of 10\n\n        let firstYear = (year2digitsFirst * 100) + lastYear2Digits - 10 - 1;\n        let lastYear = (year2digitsFirst * 100) + lastYear2Digits;\n        this._lblNavigation.value((firstYear + 1) + \"-\" + (lastYear - 1));\n\n        let trRowListFragment = document.createDocumentFragment();\n        let tdYear = firstYear;\n        for (let i = 0; i < 3; i++)\n        {\n            let tr = document.createElement(\"tr\");\n            tr.classList.add(\"vrDatePickerPopup_rowYears\");\n            tr.setAttribute(\"row\", String(i));\n\n            for (let j = 0; j < 4; j++)\n            {\n                let td = document.createElement(\"td\");\n                td.setAttribute(\"year\", String(tdYear));\n                tr.appendChild(td);\n\n                let yearAttribute = Number(puma(td).attr(\"year\"));\n                let enable = this.checkAvailability(yearAttribute);\n\n                createButton(\n                    {\n                        text: String(tdYear),\n                        width: 55,\n                        height: 58,\n                        enable: enable,\n                        css: \"height: 100%; border: none;\" + ((this.value() != null && tdYear == this.value()!.getFullYear()) ? \"background-color: #e3f1fa;\" : \"\") + ((yearAttribute == firstYear || yearAttribute == lastYear) ? \"color: #CCC;\" : \"\"),\n                        onClick: (e) =>\n                        {\n                            let newYear = Number(puma(td).attr(\"year\"));\n                            this._tempNavigationDate.setFullYear(newYear);\n\n                            if (this.depth() == DateDepthEnum.Year)\n                            {\n                                let dateToSelect = new Date(newYear, 0, 1);\n                                this.value(dateToSelect);\n                            }\n                            else\n                                this.drawMonths();\n                        }\n                    }, td);\n                tdYear++;\n            }\n            trRowListFragment.appendChild(tr);\n        }\n        table.appendChild(trRowListFragment);\n    }\n\n    private drawDecades()\n    {\n        this._actualView = ActualViewEnum.Decade;\n        this._lblNavigation.disable();\n\n        let table = puma(this.element()).find(\".vrDatePickerPopup_table\")[0];\n        puma(table).empty();\n\n        let year = this._tempNavigationDate.getFullYear();\n        let year2digitsFirst = Number(year.toString().substring(0, 2));\n        let year2digitsLast = Number(year.toString().substr(-2));\n\n        let firstYear = year2digitsFirst * 100;\n        let lastYear = year2digitsFirst * 100 + 99;\n        let firstYearCycle = year2digitsFirst * 100 - 10;\n        let lastYearCycle = year2digitsFirst * 100 + 109;\n        this._lblNavigation.value(firstYear + \"-\" + lastYear);\n\n        let trRowListFragment = document.createDocumentFragment();\n        let tdDecade = firstYearCycle;\n        for (let i = 0; i < 3; i++)\n        {\n            let tr = document.createElement(\"tr\");\n            tr.classList.add(\"vrDatePickerPopup_rowDecades\");\n            tr.setAttribute(\"row\", String(i));\n\n            for (let j = 0; j < 4; j++)\n            {\n                let td = document.createElement(\"td\");\n                td.setAttribute(\"decade\", String(tdDecade));\n                tr.appendChild(td);\n\n                let yearAttribute = Number(puma(td).attr(\"decade\"));\n                createButton(\n                    {\n                        text: tdDecade + \"<br />\" + (tdDecade + 9),\n                        width: 55,\n                        height: 58,\n                        css: \"height: 100%; border: none;\" + ((this.value() != null && this.value()!.getFullYear() >= tdDecade && this.value()!.getFullYear() <= (tdDecade + 9)) ? \"background-color: #e3f1fa;\" : \"\") + ((yearAttribute == firstYearCycle || yearAttribute == (lastYearCycle - 9)) ? \"color: #CCC;\" : \"\"),\n                        onClick: (e) =>\n                        {\n                            let year = Number(puma(td).attr(\"decade\"));\n                            this._tempNavigationDate.setFullYear(year);\n                            this.drawYears();\n                        }\n                    }, td);\n                tdDecade += 10;\n            }\n            trRowListFragment.appendChild(tr);\n        }\n        table.appendChild(trRowListFragment);\n    }\n\n    getOptions()\n    {\n        return this.options<CalendarOptions>();\n    }\n\n    depth()\n    {\n        return this.getOptions().depth!;\n    }\n\n    value(date?: Date | null, triggerChange: boolean = true): Date | null\n    {\n        let options = this.getOptions();\n        if (date === null)\n        {\n            this.clear();\n            return null;\n        }\n\n        if (date != null)\n        {\n            if (typeof (date) == \"string\")\n                date = Date.vrFixDateString(date);\n\n            if (date == null)\n                throw Error(\"Formato data non valido!\");\n\n            if (triggerChange)\n            {\n                let changingEvent = new CalendarChangingEvent();\n                if (options.onBeforeChange != null)\n                {\n                    changingEvent.sender = this;\n                    changingEvent.value = date;\n                    changingEvent.previousValue = this._value;\n                    options.onBeforeChange(changingEvent);\n                }\n\n                if (!changingEvent.isDefaultPrevented())\n                {\n                    this._value = date;\n                    this.change();\n                }\n            }\n            else\n                this._value = date;\n\n            this._tempNavigationDate = date;\n\n            //#region Set value\n            const months = [\"Gennaio\", \"Febbraio\", \"Marzo\", \"Aprile\", \"Maggio\", \"Giugno\", \"Luglio\", \"Agosto\", \"Settembre\", \"Ottobre\", \"Novembre\", \"Dicembre\"];\n            let year = date.getFullYear();\n            let month = date.getMonth();\n\n            switch (options.depth)\n            {\n                case DateDepthEnum.Day: this.drawDays(); break;\n                case DateDepthEnum.Month: this.drawMonths(); break;\n                case DateDepthEnum.Year: this.drawYears(); break;\n                default:\n                    this.drawDays(); break;\n            }\n\n            let monthString = months[month];\n            this._lblNavigation.value(monthString + \" \" + year);\n            //#endregion\n        }\n        return this._value;\n    }\n\n    clear(triggerChange = false): void\n    {\n        this._value = null;\n\n        if (triggerChange)\n            this.change();\n    }\n    //#endregion\n\n    //#region Events\n    change(): void\n    {\n        let changeCallBack = this.getOptions().onAfterChange;\n        if (changeCallBack != null)\n        {\n            let changeEvent = new CalendarChangeEvent();\n            changeEvent.sender = this;\n            changeEvent.value = this.value();\n            changeCallBack(changeEvent);\n        }\n    }\n    //#endregion\n}\n//#endregion\n\n//#region Classes\nclass CalendarEvent extends VrControlsEvent\n{\n    sender: Calendar;\n    value: Date | null;\n}\n\nclass CalendarChangeEvent extends CalendarEvent\n{\n\n}\n\nclass CalendarChangingEvent extends CalendarEvent\n{\n    previousValue?: Date | null;\n}\n\nclass CalendarDayDrawEvent extends VrControlsEvent\n{\n    sender: Calendar;\n    day: Date;\n    element: HTMLElement;\n}\n\nclass CalendarFinishedDrawEvent extends VrControlsEvent\n{\n    sender: Calendar;\n}\n\nclass CalendarDisableDateEvent extends VrControlsEvent\n{\n    sender: Calendar;\n    day: Date;\n}\n//#endregion"],"names":["year"],"mappings":"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"}