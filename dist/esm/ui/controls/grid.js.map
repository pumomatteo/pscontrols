{"version":3,"file":"grid.js","sources":["../../../../src/ui/controls/grid.ts"],"sourcesContent":["import { ControlTypeEnum, IconClassicLight, IconClass, WindowAutoSizeDirectionEnum, dialog, confirm, alert, ButtonModeEnum, createSplitButton, createComboBox, ComboBoxTypeEnum, prompt, createButton, DateModeEnum, createTextBox, createCheckBox, createWindow, WindowFooterItemTypeEnum, createDatePicker, PositionEnum, TextModeEnum, WindowFooterItemAlignEnum, GridHeightModeEnum, GridCheckboxModeEnum, GridModeEnum, GridColumnTypeEnum, GridAlignEnum, GridAggregateMode, GridLabelUnderlineMode, GridToolbarItemType, GridDateFilterTypeEnum, GridNumberFilterTypeEnum, createGrid, createSwitch, GridColumn, GridToolbarItem, puma, GridButtonSettings, KeyEnum, GridSortDirectionEnum, GridGroupBySettings, GridSortSettings, GridGroupByItem, createButtonGroup, SelectionModeEnum, createLabel, createColorPicker, GridGroupExpandCollapseEvent, GridGroupEditClickEvent, GridGroupDisplayValueEvent, notify, showLoader, hideLoader, IconClassicRegular, IconClassicSolid, notifyError, NumberFormatRoundingSettings, NumberFormatSettings, RoundingModeEnum, GridPageSelectedEvent, notifyWarning, GridScrollEvent, div, ControlPositionEnum, GridStringFilterTypeEnum, CheckboxStateEnum, GridServerBindSettings, GridStickerSettings, TextAlignEnum, GridStickerClickEvent, GridBeforeExcelExportEvent, GridAfterExcelExportEvent, ComboBoxItem, DateTime, GridBeforeGroupCheckEvent, GridAfterGroupCheckEvent, GridCartSettings } from \"../vr\";\nimport { VrControl, VrControlOptions, VrControlsEvent } from \"../common\";\nimport { Window } from \"./window\";\nimport { SplitButton, SplitButtonOptions } from \"./splitButton\";\nimport { ControlManager } from \"../../../src/managers/controlManager\";\nimport { ComboBox, ComboBoxOptions } from \"./comboBox\";\nimport { CheckBox } from \"./checkbox\";\nimport { TextBox, TextBoxOptions } from \"./textbox\";\nimport { DatePicker, DatePickerOptions } from \"./datePicker\";\nimport { Dictionary } from \"../../../src/managers/dictionary\";\nimport { ColorPicker } from \"./colorPicker\";\nimport { Button } from \"./button\";\nimport { UtilityManager } from \"../../../src/managers/utilityManager\";\nimport { Switch } from \"./switch\";\nimport { Label } from \"./label\";\n\n//#region Options\nexport class GridOptions extends VrControlOptions\n{\n    //#region Properties\n    columns?: GridColumn[];\n    toolbar?: GridToolbarItem[];\n    declare height?: string | number | GridHeightModeEnum;\n    dataSource?: any[];\n    rebind?: GridRebindRequest;\n    excel?: GridExcelRequest;\n    tooltip?: boolean;\n    checkboxes?: boolean | GridCheckboxModeEnum;\n    dataSourceFieldId?: string;\n    rowHeight?: number;\n    multilineRows?: boolean;\n    multilineHeader?: boolean;\n    hideEditButton?: boolean;\n    autoWindowSettings?: GridAutoWindowSettings;\n    mode?: GridModeEnum;\n    filterable?: boolean;\n    alternateRowColors?: boolean | string;\n    hoverRowColor?: boolean;\n    rowColorProperty?: string;\n    rowTextColorProperty?: string;\n    pageSize?: number | boolean | GridPageSettings;\n    footer?: boolean | GridFooterSettings;\n    header?: boolean;\n    resizable?: boolean;\n    reorderable?: boolean;\n    lockable?: boolean;\n    groupBy?: string[] | GridGroupBySettings | null;\n    groupable?: boolean;\n    sortable?: boolean;\n    sortBy?: string | GridSortSettings | null;\n    serverBinding?: boolean | GridServerBindSettings;\n    roundingSettings?: NumberFormatRoundingSettings;\n    sticker?: string | GridStickerSettings;\n    fixDatasourceWithDate?: boolean;\n\n    //**********************TODO//**********************\n    layoutSettings?: GridLayoutSettings | boolean;\n    //#endregion\n\n    //#region Events\n    onDataSourceChanged?: () => void;\n    onDataBound?: (e: GridOnDataBoundEvent) => void;\n    onRowDataBound?: (e: GridOnRowDataBoundEvent) => void | string;\n    onSelectRow?: (e: GridSelectRowEvent) => void;\n    onSelectAllRows?: (e: GridSelectAllRowsEvent) => void;\n    onGroupExpandCollapse?: (e: GridGroupExpandCollapseEvent) => void;\n    onGroupEditClick?: (e: GridGroupEditClickEvent) => void;\n    onPageSelected?: (e: GridPageSelectedEvent) => void;\n    onScroll?: (e: GridScrollEvent) => void;\n    onBeforeExcelExport?: (e: GridBeforeExcelExportEvent) => void;\n    onAfterExcelExport?: (e: GridAfterExcelExportEvent) => void;\n    onBeforeGroupCheck?: (e: GridBeforeGroupCheckEvent) => void;\n    onAfterGroupCheck?: (e: GridAfterGroupCheckEvent) => void;\n    //#endregion\n}\n//#endregion\n\n//#region Control\nexport class Grid extends VrControl\n{\n    //#region Variables\n    private _fitSpaceColumnPercentage: number;\n    private _showTotals: boolean;\n    private _isResizing: boolean;\n    private _isDragging: boolean;\n    private _actualSortingInfo: GridSortingInfo | null;\n    private _columnOptions: GridColumnPosition[];\n    private _actualPageSize: number;\n    private _actualPageSelected: number;\n    private _internalOptions: GridOptions;\n    private _tempRebindInfo: TempRebindInfo | null;\n    private _pageSizeUnlimited: boolean;\n    private _rowCheckedIdList: string[];\n    private _timeoutFilterText: number;\n    private _firstDraw: boolean;\n\n    //#region DataSource\n    private _dataSource: any[] | null;\n    private _originalDataSource: any[];\n    private _deletedItems: any[];\n    private _actualEditedItem: any | null;\n    private _lastIndexAdded: number;\n    private _responseForServerBinding: any;\n    private _serverBindingPagination: GridServerBindPagination;\n    //#endregion\n\n    //#region Filtering\n    private _wndFiltering: Window;\n    private _dictionaryDataValues: Map<string, string[]>;\n    private _dictionaryFilterConditions: Map<string, GridFilterSettings>;\n    //#endregion\n\n    //#region Cart\n    private _wndCart: Window;\n    private _grdCart: Grid;\n    //#endregion\n\n    //#region Show/Hide & Group\n    private _wndActions: Window;\n    private _groupByActualValue: any;\n    private _originalHiddenColumnFields: string[];\n    //#endregion\n\n    //#region Auto window\n    private _wndAutoWindow: Window;\n    //#endregion\n\n    //#region Layout\n    private _wndLayout: Window;\n    private _grdLayout: Grid;\n    private _actualLayout: GridLayout | null;\n    private _originalOptionsForLayout: GridLayoutStructure;\n    private _customLayouts: GridLayout[];\n    //#endregion\n\n    //#region Controls\n    private _cellButtons: Map<string, GridControlData>;\n    private _cellIcons: Map<string, GridControlData>;\n    private _cellCustoms: Map<string, GridControlData>;\n    private _cellLabels: Map<string, GridControlData>;\n    private _cellImages: Map<string, GridControlData>;\n    //#endregion\n\n    //#region Structure\n    private _elementId: string;\n    private _elementLocked: HTMLElement;\n    private _lblSticker: Label;\n    private _divToolbar: HTMLElement;\n    private _divHeaderContainer: HTMLElement;\n    private _divHeader: HTMLElement;\n    private _divHeaderLocked: HTMLElement;\n    private _divFilters: HTMLElement;\n    private _divFiltersLocked: HTMLElement;\n    private _divBody: HTMLElement;\n    private _divBodyLocked: HTMLElement;\n    private _divTotals: HTMLElement;\n    private _divTotalsLocked: HTMLElement;\n    private _divFooter: HTMLElement;\n    private _spanFitHeaderSpace: HTMLSpanElement;\n    private _spanFitFilterSpace: HTMLSpanElement;\n    private _spanFitTotalsSpace: HTMLSpanElement;\n    private _vrDateTimeFields: string[];\n    //#endregion\n\n    //#endregion\n\n    constructor(element: HTMLElement, options?: GridOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new GridOptions();\n\n        if (options.addToControlList == null) options.addToControlList = false;\n        if (options.width == null) options.width = \"100%\";\n        if (options.tooltip == null) options.tooltip = true;\n        if (options.dataSourceFieldId == null) options.dataSourceFieldId = \"id\";\n        if (options.multilineRows == null) options.multilineRows = true;\n        if (options.multilineHeader == null) options.multilineHeader = false;\n        if (options.rowHeight == null) options.rowHeight = 27;\n        if (options.columns == null) options.columns = [];\n        if (options.hideEditButton == null) options.hideEditButton = false;\n        if (options.mode == null) options.mode = GridModeEnum.Sync;\n        if (options.pageSize == null || options.pageSize === true) options.pageSize = 50;\n        if (options.filterable == null) options.filterable = true;\n        if (options.alternateRowColors == null) options.alternateRowColors = true;\n        if (options.hoverRowColor == null) options.hoverRowColor = false;\n        if (options.footer == null) options.footer = true;\n        if (options.header == null) options.header = true;\n        if (options.resizable == null) options.resizable = true;\n        if (options.reorderable == null) options.reorderable = true;\n        if (options.enable == null) options.enable = true;\n        if (options.excel == null) options.excel = options.rebind;\n        if (options.lockable == null) options.lockable = false;\n        if (!options.lockable && options.columns!.vrAny(k => k.locked === true))\n            options.lockable = true;\n\n        if (options.checkboxes == null || options.checkboxes === false) options.checkboxes = GridCheckboxModeEnum.None;\n        if (options.checkboxes === true) options.checkboxes = GridCheckboxModeEnum.MultiCheck;\n\n        //#region Server binding\n        if (options.serverBinding == null) options.serverBinding = false;\n        if (options.serverBinding === true)\n            options.serverBinding = new GridServerBindSettings();\n\n        if (options.serverBinding !== false)\n        {\n            if (options.serverBinding.itemCountPropertyName == null) options.serverBinding.itemCountPropertyName = \"itemCount\";\n            if (options.serverBinding.totalsPropertyName == null) options.serverBinding.totalsPropertyName = \"totals\";\n            if (options.serverBinding.excelDownloadUrlPropertyName == null) options.serverBinding.excelDownloadUrlPropertyName = \"excelDownloadUrl\";\n        }\n        //#endregion\n\n        //#region Sticker options\n        if (options.sticker == null) options.sticker = new GridStickerSettings();\n        if (typeof (options.sticker) == \"string\")\n        {\n            let text = options.sticker;\n            options.sticker = new GridStickerSettings();\n            options.sticker.text = text;\n        }\n\n        if (options.sticker.textColor == null) options.sticker.textColor = \"#000\";\n        if (options.sticker.backgroundColor == null) options.sticker.backgroundColor = \"#e3f1fa\";\n        //#endregion\n\n        //#region Layout\n        if (options.layoutSettings == null || options.layoutSettings === true)\n            options.layoutSettings = new GridLayoutSettings();\n\n        if (options.layoutSettings !== false)\n            if (options.layoutSettings.name == null) options.layoutSettings.name = \"\";\n        //#endregion\n\n        //#region Sort\n        if (options.sortable == null) options.sortable = true;\n        if (options.sortBy != null)\n        {\n            let sortByField = options.sortBy;\n            if (typeof (options.sortBy) == \"string\")\n            {\n                options.sortBy = new GridSortSettings();\n                options.sortBy.field = String(sortByField);\n            }\n\n            if ((options.sortBy as GridSortSettings).direction == null) (options.sortBy as GridSortSettings).direction = GridSortDirectionEnum.Asc;\n        }\n        //#endregion\n\n        //#region GroupBy\n        if (options.groupable == null)\n            options.groupable = true;\n\n        if (options.groupBy != null)\n        {\n            if (Array.isArray(options.groupBy))\n            {\n                let groupByFields = options.groupBy;\n                options.groupBy = new GridGroupBySettings();\n                options.groupBy.fields = groupByFields;\n                options.groupBy.sortBy = { field: groupByFields[0], direction: GridSortDirectionEnum.Asc };\n            }\n\n            if (options.groupBy.sortBy == null) options.groupBy.sortBy = new GridSortSettings();\n            if (options.groupBy.sortBy.direction == null) options.groupBy.sortBy.direction = GridSortDirectionEnum.Asc;\n\n            let groupByFields = options.groupBy.fields;\n            options.groupBy.fields = [];\n            if (groupByFields != null)\n            {\n                for (let field of groupByFields)\n                {\n                    if (typeof (field) == \"string\")\n                        options.groupBy.fields.push({ field: field } as any);\n                    else\n                        options.groupBy.fields.push(field as any);\n                }\n            }\n        }\n        //#endregion\n\n        //#region Check columns field\n        for (let column of options.columns)\n        {\n            let fieldList = options.columns.map(k => k.field);\n            let fieldListFiltered = fieldList.filter(k => k == column.field);\n            if (fieldListFiltered.length > 1)\n                throw new Error(\"La proprietà 'field' delle colonne deve essere univoca!!!\");\n        }\n        //#endregion\n\n        //#region Footer default\n        if (options.footer == null || options.footer === true)\n            options.footer = new GridFooterSettings();\n\n        if (options.footer !== false)\n        {\n            if (options.footer.maxVisiblePages == null) options.footer.maxVisiblePages = 10;\n            if (options.footer.showPagination == null) options.footer.showPagination = true;\n            if (options.footer.showPageSize == null) options.footer.showPageSize = true;\n            if (options.footer.showSettings == null) options.footer.showSettings = true;\n            if (options.footer.totalElements == null) options.footer.totalElements = true;\n        }\n        //#endregion\n\n        //#endregion\n\n        super(element, options, ControlTypeEnum.Grid);\n\n        this._originalHiddenColumnFields = [];\n        this._originalDataSource = [];\n        this._dictionaryFilterConditions = new Map<string, GridFilterSettings>();\n        this._rowCheckedIdList = [];\n\n        if (options.pageSize === false)\n            this._pageSizeUnlimited = true;\n\n        this._elementId = element.id;\n        this._actualLayout = null;\n\n        //#region Add columns from groupBy if not included\n        if (options.groupBy != null)\n        {\n            let optionsFields = options.columns.map(k => k.field);\n            for (let groupByItem of options.groupBy.fields as GridGroupByItem[])\n            {\n                if (!optionsFields.includes(groupByItem.field))\n                {\n                    let column = new GridColumn();\n                    column.field = groupByItem.field;\n                    column.title = groupByItem.displayField;\n                    column.hidden = true;\n                    options.columns.push(column);\n                }\n            }\n        }\n        //#endregion\n\n        //#region Original options for layout\n        let layoutList: GridLayout[] = [];\n        if (options.layoutSettings !== false)\n        {\n            let layoutJson = new GridLayoutStructure();\n            layoutJson.filterConditions = null;\n            layoutJson.pageSize = options.pageSize;\n            layoutJson.sortingInfo = null;\n\n            if (options.groupBy != null)\n                layoutJson.groupBy = JSON.parse(JSON.stringify(options.groupBy));\n\n            let index = 0;\n            let layoutColumns: GridLayoutColumn[] = [];\n            for (let column of options.columns!)\n            {\n                let layoutColumn = new GridLayoutColumn();\n                layoutColumn.field = (column.type == GridColumnTypeEnum.EditButton) ? \"editButton\" : column.field;\n                layoutColumn.fitSpace = column.fitSpace;\n                layoutColumn.hidden = column.hidden;\n                layoutColumn.locked = column.locked;\n                layoutColumn.index = index;\n\n                let width = (column.width != null) ? (column.width) : ((column.type == GridColumnTypeEnum.EditButton) ? 32 : 100);\n                layoutColumn.width = width;\n\n                layoutColumns.push(layoutColumn);\n                index++;\n\n                if (column.hidden === true)\n                    this._originalHiddenColumnFields.push(column.field);\n            }\n\n            layoutJson.columns = layoutColumns;\n            this._originalOptionsForLayout = layoutJson;\n\n            let getLayoutListRequest = new GetLayoutListRequest();\n            getLayoutListRequest.gridName = options.layoutSettings.name;\n            getLayoutListRequest.pageName = window.location.href;\n\n            //**********************TODO//**********************\n            this.doWebApiCallLayout(GridLayoutOperationTypeEnum.Get, getLayoutListRequest, (response: any) =>\n            {\n                layoutList = response.tableLayoutList;\n                if (layoutList.length > 0)\n                {\n                    this._customLayouts = layoutList;\n                    let layoutToLoad = layoutList[0];\n                    let layoutClass = JSON.parse(layoutToLoad.layoutJson) as GridLayoutStructure;\n\n                    // //#region Check if saved layout match with current layout\n                    // let columnFieldsToDelete = [];\n                    // for (let layoutColumn of layoutClass.columns)\n                    // {\n                    //     if (layoutColumn.field == \"editButton\" && !options!.hideEditButton)\n                    //         continue;\n\n                    //     if (!options!.columns!.map(k => k.field).includes(layoutColumn.field))\n                    //         columnFieldsToDelete.push(layoutColumn.field);\n                    // }\n\n                    // for (let fieldToDelete of columnFieldsToDelete)\n                    // {\n                    //     let indexToDelete = layoutClass.columns.map(k => k.field).indexOf(fieldToDelete);\n                    //     if (indexToDelete != -1)\n                    //         layoutClass.columns.splice(indexToDelete, 1);\n                    // }\n                    // //#endregion\n\n                    let same = true;\n                    for (let layoutColumn of layoutClass.columns)\n                    {\n                        if (layoutColumn.field == \"editButton\" && !options!.hideEditButton)\n                            continue;\n\n                        if (!options!.columns!.map(k => k.field).includes(layoutColumn.field))\n                        {\n                            same = false;\n                            break;\n                        }\n                    }\n                    //#endregion\n\n                    if (same)\n                    {\n                        this._actualLayout = layoutToLoad;\n                        //this.changeLayout();\n                    }\n\n                    //this._actualLayout = layoutToLoad;\n                }\n            });\n            //**********************TODO//**********************\n        }\n        //#endregion\n\n        //#region Instantiate variables\n        this._lastIndexAdded = -1;\n        this._dictionaryDataValues = new Map<string, string[]>();\n        this._groupByActualValue = {};\n        this._actualPageSize = (options.pageSize === false) ? 50 : ((typeof (options.pageSize) == \"number\") ? options.pageSize : ((options.pageSize.value != null) ? options.pageSize.value : 50));\n        this._actualPageSelected = 1;\n\n        this._serverBindingPagination = new GridServerBindPagination();\n        this._serverBindingPagination.indexFrom = 0 * this._actualPageSize;\n        this._serverBindingPagination.indexTo = this._serverBindingPagination.indexFrom + this._actualPageSize - 1;\n        //#endregion\n\n        //#region Structure\n        let divContainer = document.createElement(\"div\");\n        divContainer.id = element.id + \"_divContainer\";\n        divContainer.classList.add(\"p-grid-container\");\n        element.parentNode!.insertBefore(divContainer, element);\n\n        //#region Sticker\n        this._lblSticker = createLabel({\n            text: options.sticker.text,\n            align: TextAlignEnum.Center,\n            bold: options.sticker.bold,\n            visible: options.sticker.text != null && options.sticker.text.length > 0,\n            colorSettings: { background: options.sticker.backgroundColor, textColor: options.sticker.textColor },\n            cssContainer: \"width: 30px; border: solid 1px #d9d9d9; border-right: none; border-top: solid 2px #25a0da;\" + options.sticker.cssContainer,\n            css: \"transform: rotate(180deg); writing-mode: tb; width: 100%; height: 100%; font-size: 16px;\" + options.sticker.css,\n            onClick: (e) =>\n            {\n                if ((options!.sticker! as GridStickerSettings).onClick != null)\n                {\n                    let clickEvent = new GridStickerClickEvent();\n                    clickEvent.sender = this;\n                    clickEvent.control = e.sender;\n                    clickEvent.value = e.sender.value();\n                    (options!.sticker! as GridStickerSettings).onClick!(clickEvent);\n                }\n            }\n        }, this.container(), ControlPositionEnum.Before)\n        //#endregion\n\n        //#region Header\n        this._divHeaderContainer = document.createElement(\"div\");\n        this._divHeaderContainer.style.cssText += \"height: 35px;\";\n        divContainer.appendChild(this._divHeaderContainer);\n\n        if (options.lockable)\n        {\n            this._divHeaderLocked = document.createElement(\"div\");\n            this._divHeaderLocked.classList.add(\"grid_Header\", \"grid_Header_locked\");\n            this._divHeaderLocked.style.cssText += \"overflow-x: hidden; display: inline-block;\";\n            this._divHeaderContainer.appendChild(this._divHeaderLocked);\n        }\n\n        this._divHeader = document.createElement(\"div\");\n        this._divHeader.id = element.id + \"Header\";\n        this._divHeader.classList.add(\"grid_Header\");\n        this._divHeader.style.cssText += \"overflow-x: hidden; display: inline-block;\";\n        this._divHeaderContainer.appendChild(this._divHeader);\n\n        if (!options.header)\n        {\n            this._divHeaderContainer.style.cssText += \"display: none;\";\n            this._divHeader.style.cssText += \"display: none;\";\n\n            if (this._divHeaderLocked != null)\n                this._divHeaderLocked.style.cssText += \"display: none;\";\n        }\n\n        this._spanFitHeaderSpace = puma(\"<span id='\" + element.id + \"FitHeaderSpace' class='grid_fitHeaderSpace'></span>\").vrAppendToPuma(\"#\" + element.id + \"_divContainer\")[0];\n        //#endregion\n\n        //#region Filters\n        let divFilters = div(\"#\" + element.id + \"_divContainer\", { css: \"height: 31px; display: none;\" })\n        if (options.lockable)\n            this._divFiltersLocked = puma(\"<div id='\" + element.id + \"Filters' class='grid_Filters grid_Filters_locked' style='overflow-x: hidden; display: none;'></div>\").vrAppendToPuma(divFilters)[0] as HTMLDivElement;\n\n        this._divFilters = puma(\"<div id='\" + element.id + \"Filters' class='grid_Filters' style='overflow-x: hidden; display: none;'></div>\").vrAppendToPuma(divFilters)[0] as HTMLDivElement;\n        this._spanFitFilterSpace = puma(\"<span id='\" + element.id + \"FitFilterSpace' class='grid_fitFilterSpace'></span>\").vrAppendToPuma(\"#\" + element.id + \"_divContainer\")[0];\n        //#endregion\n\n        //#region Body\n        let divBodyContainer = div(\"#\" + element.id + \"_divContainer\", { id: element.id + \"_grid_body_container\" })\n        if (options.lockable)\n            this._divBodyLocked = div(divBodyContainer, { class: \"grid_body_locked\", css: \"overflow-y: auto; vertical-align: top; display: inline-block; overflow-x: hidden; border-top: none; border: solid 1px #d9d9d9; border-right: solid 1px #a5a5a5; border-bottom: none;\" })\n\n        this._divBody = puma(\"<div id='\" + element.id + \"Body' class='grid_Body'></div>\").vrAppendToPuma(divBodyContainer)[0] as HTMLDivElement;\n        puma(this._divBody).scroll((e: any) =>\n        {\n            puma(this._divFilters).scrollLeft(puma(this._divBody).scrollLeft());\n            puma(this._divHeader).scrollLeft(puma(this._divBody).scrollLeft());\n            puma(this._divTotals).scrollLeft(puma(this._divBody).scrollLeft());\n            puma(this._divBodyLocked).scrollTop(puma(this._divBody).scrollTop());\n\n            if (options!.onScroll != null)\n            {\n                let scrollEvent = new GridScrollEvent();\n                scrollEvent.sender = this;\n                scrollEvent.target = e.target;\n                scrollEvent.scrollLeft = puma(this._divBody).scrollLeft();\n                scrollEvent.scrollTop = puma(this._divBody).scrollTop();\n                options!.onScroll(scrollEvent);\n            }\n        });\n\n        puma(this._divBodyLocked).scroll((e: any) =>\n        {\n            puma(this._divBody).scrollTop(puma(this._divBodyLocked).scrollTop());\n\n            if (options!.onScroll != null)\n            {\n                let scrollEvent = new GridScrollEvent();\n                scrollEvent.sender = this;\n                scrollEvent.target = e.target;\n                scrollEvent.scrollLeft = puma(this._divBody).scrollLeft();\n                scrollEvent.scrollTop = puma(this._divBody).scrollTop();\n                options!.onScroll(scrollEvent);\n            }\n        });\n        //#endregion\n\n        //#region Totals\n        let divTotals = div(\"#\" + element.id + \"_divContainer\", { css: \"height: 23px; display: none;\" });\n        if (options.lockable)\n            this._divTotalsLocked = puma(\"<div id='\" + element.id + \"Totals' class='grid_Totals grid_Totals_locked' style='overflow-x: hidden; display: none;'></div>\").vrAppendToPuma(divTotals)[0] as HTMLDivElement;\n\n        this._divTotals = puma(\"<div id='\" + element.id + \"Totals' class='grid_Totals' style='overflow-x: hidden; display: none;'></div>\").vrAppendToPuma(divTotals)[0] as HTMLDivElement;\n\n        this._showTotals = options.columns!.vrAny(k => k.aggregate != null && k.aggregate !== false);\n\n        this._spanFitTotalsSpace = puma(\"<span id='\" + element.id + \"FitTotalsSpace' class='grid_fitTotalsSpace'></span>\").vrAppendToPuma(\"#\" + element.id + \"_divContainer\")[0];\n        //#endregion\n\n        //#endregion\n\n        //#region Footer\n        if (options.footer !== false)\n        {\n            this._divFooter = puma(\"<div id='\" + element.id + \"Footer' class='p-grid-footer'></div>\").vrAppendToPuma(\"#\" + element.id + \"_divContainer\")[0] as HTMLDivElement;\n\n            let divPagination = document.createElement(\"div\");\n            divPagination.id = element.id + \"_footerPagination\";\n            this._divFooter.appendChild(divPagination);\n\n            //#region Footer page size\n            if (options.footer.showPageSize && typeof (options.pageSize) != \"boolean\")\n            {\n                //#region PageSize items\n                let pageSizeItems =\n                    [\n                        { text: \"50\", value: \"50\", numberValue: 50 },\n                        { text: \"100\", value: \"100\", numberValue: 100 }\n                    ];\n\n                if (this._actualPageSize > 100)\n                {\n                    pageSizeItems.push({ text: \"200\", value: \"200\", numberValue: 200 });\n                    pageSizeItems.push({ text: \"500\", value: \"500\", numberValue: 500 });\n                }\n\n                if (typeof (options.pageSize) != \"number\")\n                {\n                    let otherValues = options.pageSize.otherValues;\n                    options.pageSize = (options.pageSize.value != null) ? options.pageSize.value : 50;\n                    for (let otherValue of otherValues)\n                        pageSizeItems.push({ text: String(otherValue), value: String(otherValue), numberValue: otherValue });\n                }\n\n                pageSizeItems.push({ text: String(options.pageSize!), value: String(options.pageSize!), numberValue: Number(options.pageSize!) });\n\n                pageSizeItems = pageSizeItems.vrDistinctBy(k => k.numberValue);\n                pageSizeItems.vrSortBy([\"numberValue\"], true);\n                //#endregion\n\n                createComboBox(\n                    {\n                        width: 65,\n                        mode: ComboBoxTypeEnum.DropDown,\n                        cssContainer: \"margin-top: 3px;\",\n                        css: \"border: solid 1px #d9d9d9 !important;\",\n                        items: pageSizeItems,\n                        value: String(options.pageSize!),\n                        onAfterChange: (e) =>\n                        {\n                            if (options!.columns!.length > 10)\n                                showLoader();\n\n                            window.setTimeout(() =>\n                            {\n                                this.pageSize(Number(e.sender.value()), true);\n                                hideLoader();\n                            }, 200);\n                        }\n                    }, this._divFooter, null, element.id + \"_ddlPageSize\");\n            }\n            //#endregion\n\n            //#region Footer settings\n            if (options.footer.showSettings)\n            {\n                //#region Settings split button\n                let spbSettingsControl = createSplitButton(\n                    {\n\n                        icon: IconClassicLight.Gear,\n                        cssContainer: \"top: 2px; margin-left: 5px;\",\n                        items:\n                            [\n                                {\n                                    text: \"Salva layout\", icon: IconClassicLight.Table, onClick: (e) =>\n                                    {\n                                        if (this._actualLayout == null)\n                                            prompt(\"Assegna un nome a questo layout\", { title: \"Salva layout\" }).then((value) => this.saveLayout(value));\n                                        else\n                                        {\n                                            dialog(\"Vuoi sovrascrivere questo layout, o crearne uno nuovo?\",\n                                                {\n                                                    title: \"Salva layout\",\n                                                    footerItems:\n                                                        [\n                                                            { text: \"Annulla\", type: WindowFooterItemTypeEnum.Close },\n                                                            {\n                                                                text: \"Sovrascrivi\", mode: ButtonModeEnum.Primary, onClick: (e) => \n                                                                {\n                                                                    this.saveLayout(this._actualLayout!.layoutName)\n                                                                    e.sender.close();\n                                                                }\n                                                            },\n                                                            {\n                                                                text: \"Crea nuovo\", mode: ButtonModeEnum.Primary, onClick: (e) =>\n                                                                {\n                                                                    prompt(\"Assegna un nome a questo layout\", { title: \"Nome layout\" }).then((value) =>\n                                                                    {\n                                                                        this._actualLayout = null;\n                                                                        this.saveLayout(value);\n                                                                        e.sender.close();\n                                                                    });\n                                                                }\n                                                            }\n                                                        ]\n                                                });\n                                        }\n                                    }\n                                },\n                                {\n                                    text: \"Gestisci layout\", icon: IconClassicLight.Table, value: \"manageLayout\",\n                                    onClick: (e) => this.openWindowLayout()\n                                },\n                                {\n                                    text: \"Ripristina layout di base\", icon: IconClassicLight.Table, value: \"restoreBaseLayout\",\n                                    confirmationMessage: \"Confermi di voler ripristinare il layout di base?\",\n                                    onClick: (e) => \n                                    {\n                                        this._actualLayout = null;\n                                        this.changeLayout(true, this._originalOptionsForLayout);\n                                    }\n                                },\n                                {\n                                    text: \"Mostra/Nascondi\", icon: IconClassicLight.Eye,\n                                    onClick: (e) => this.openWindowActions(GridActionEnum.ShowHide)\n                                },\n                                {\n                                    text: \"Raggruppa per...\", icon: IconClassicLight.Users, visible: options.groupable,\n                                    onClick: (e) => this.openWindowActions(GridActionEnum.GroupBy)\n                                },\n                                {\n                                    text: \"Blocca/Sblocca\", icon: IconClassicLight.Lock, visible: options.lockable!,\n                                    onClick: (e) => this.openWindowActions(GridActionEnum.LockUnlock)\n                                }\n                            ]\n                    }, this._divFooter, null, this._elementId + \"_spbSettings\");\n                //#endregion\n\n                //#region Hide manage layout button\n                if (layoutList.length == 0)\n                    window.setTimeout(() => spbSettingsControl.hideItem(\"manageLayout\"));\n                //#endregion\n            }\n            //#endregion\n\n            //#region Footer Cart\n            if (options.footer.cartSettings != null)\n            {\n                if (!options.footer.cartSettings.fields.vrAny(k => k != \"\" && k != null))\n                    throw Error(\"Cart fields required\");\n\n                let btnCart = createButton({\n                    icon: IconClassicLight.CartShopping,\n                    cssContainer: \"position: absolute; border: none; border-left: solid 1px #CCC; right: 10px; margin-top: 3px;\",\n                    css: \"background: none; border: none;\",\n                    onClick: (e) =>\n                    {\n                        let cartSettings = (options!.footer! as GridFooterSettings).cartSettings!;\n                        if (cartSettings.onClick != null)\n                            cartSettings.onClick!({ sender: this, selectedValues: this.getCheckedValues() });\n                        else\n                        {\n                            let checkedValues = this.getCheckedValues();\n                            if (checkedValues.length > 0)\n                                this.openWindowCart();\n                        }\n                    }\n                }, this._divFooter, null, element.id + \"_btnCart\");\n                btnCart.badge(\"0\");\n            }\n            //#endregion\n        }\n        //#endregion\n\n        //#region CSS\n        if (options.css != null)\n            puma(\"#\" + element.id + \"_divContainer\")[0].style.cssText += options.css;\n\n        puma(element).addClass(\"p-grid\");\n        puma(element).css(\"border-collapse\", \"collapse\");\n\n        if (typeof (options.alternateRowColors) === \"string\")\n            puma(\"<style>#\" + element.id + \" .p-grid tr.p-grid-body:nth-child(odd) { background-color: \" + options.alternateRowColors + \"; }</style>\").vrAppendToPuma(\"head\");\n        else if (options.alternateRowColors === true)\n            puma(element).addClass(\"alternateRowsColor\");\n\n        if (options.hoverRowColor)\n            puma(element).addClass(\"p-grid-hover\");\n        //#endregion\n\n        //#region Height\n        if (options.height == null) options.height = GridHeightModeEnum.FitContent;\n        if (options.height == GridHeightModeEnum.FitContent)\n            options.height = \"auto\";\n\n        puma(this._divBody).height(options.height!);\n        let heightContainer = (typeof (options.height!) == \"number\") ? options.height! + 2 : options.height;\n        puma(\"#\" + this.element().id + \"_grid_body_container\").height(heightContainer);\n        if (options.lockable) puma(this._divBodyLocked).height(options.height!);\n\n        if (this._lblSticker != null)\n        {\n            let headerHeight = (puma(this._divHeader).is(\":visible\")) ? 34 : 0;\n            let filtersHeight = (options.filterable) ? 30 : 0;\n            let totalsheight = (this._showTotals) ? 25 : 0;\n            puma(this._lblSticker.container()).height(puma(\"#\" + this.element().id + \"_grid_body_container\").height() + headerHeight + filtersHeight + totalsheight - 1);\n        }\n        //#endregion\n\n        puma(this._divBody).vrAppendPuma(element);\n\n        if (options.lockable)\n        {\n            this._elementLocked = puma(\"<table class='p-grid p-grid-locked' style='border-collapse: collapse;'></table>\")[0];\n            if (options.alternateRowColors === true) puma(this._elementLocked).addClass(\"alternateRowsColor\");\n            if (options.hoverRowColor) puma(this._elementLocked).addClass(\"p-grid-hover\")\n            puma(this._divBodyLocked).vrAppendPuma(this._elementLocked);\n        }\n\n        //#region Edit button\n        let editButtonColumnsNumber = options.columns.filter(k => k.type == GridColumnTypeEnum.EditButton).length;\n        if (editButtonColumnsNumber > 1)\n            throw Error(\"Non possono coesistere due o più colonne di edit!\");\n\n        if (editButtonColumnsNumber == 1)\n        {\n            let indexEditButtonColumn = options.columns.findIndex(k => k.type == GridColumnTypeEnum.EditButton);\n            options.columns[indexEditButtonColumn].field = \"editButton\";\n            options.columns[indexEditButtonColumn].locked = this.thereAreLockedColumns();\n        }\n\n        if (editButtonColumnsNumber == 0 && !options.hideEditButton)\n            options.columns.unshift({ type: GridColumnTypeEnum.EditButton, field: \"editButton\", locked: this.thereAreLockedColumns() });\n        //#endregion\n\n        //#region Width\n        puma(element).width(options.width);\n        puma(\"#\" + element.id + \"_divContainer\").width(options.width);\n        //#endregion\n\n        //#region Fit space\n        this.recalculateFitSpacePercentage();\n        //#endregion\n\n        //#region Toolbar\n        if (options.toolbar != null)\n        {\n            this._divToolbar = puma(\"<div id='\" + element.id + \"Toolbar' class='grid_divToolbar'></div>\").vrPrependToPuma(\"#\" + element.id + \"_divContainer\")[0] as HTMLDivElement;\n\n            let separatorCount = 0;\n            for (let toolbarItem of options.toolbar)\n            {\n                //#region Value if separator\n                if (toolbarItem.type != null && toolbarItem.type == GridToolbarItemType.Separator\n                    && (toolbarItem.value == \"\" || toolbarItem.value == null))\n                {\n                    toolbarItem.value = \"separator\" + separatorCount;\n                    separatorCount++;\n                }\n                //#endregion\n\n                this.addToolbarItem(toolbarItem);\n            }\n        }\n        //#endregion\n\n        //#region Header columns\n        puma(this._divHeader).vrAppendPuma(\"<table class='p-grid'><thead><tr class='p-grid-headerColumn'></tr></thead></table>\");\n        if (options.lockable)\n            puma(this._divHeaderLocked).vrAppendPuma(\"<table class='p-grid p-grid-locked'><thead><tr class='p-grid-headerColumn'></tr></thead></table>\");\n\n        if (options.groupable! || options.groupBy != null)\n        {\n            let tdHeaderFragment = document.createDocumentFragment();\n            let tdHeaderLockedFragment = document.createDocumentFragment();\n            for (let column of options.columns!)\n            {\n                let display = \"\";\n                if (options.groupBy == null || (!(options.groupBy.fields as GridGroupByItem[]).map(k => k.field).includes(column.field)))\n                    display = \"display: none;\";\n\n                let thHeader = document.createElement(\"th\");\n                thHeader.setAttribute(\"field\", \"groupBy\" + column.field);\n                thHeader.classList.add(\"groupBy\" + column.field, \"groupByHeader\");\n                thHeader.style.cssText += display;\n                tdHeaderFragment.appendChild(thHeader);\n\n                if (options.lockable)\n                {\n                    let thHeaderLocked = document.createElement(\"th\");\n                    thHeaderLocked.setAttribute(\"field\", \"groupBy\" + column.field);\n                    thHeaderLocked.classList.add(\"groupBy\" + column.field, \"groupByHeader\");\n                    thHeaderLocked.style.cssText += display;\n                    tdHeaderLockedFragment.appendChild(thHeaderLocked);\n                }\n            }\n\n            puma(this._divHeader).find(\".p-grid-headerColumn\")[0].appendChild(tdHeaderFragment)\n            if (options.lockable)\n                puma(this._divHeaderLocked).find(\".p-grid-headerColumn\")[0].appendChild(tdHeaderLockedFragment)\n        }\n\n        //#region Checkbox column\n        if (options.checkboxes != GridCheckboxModeEnum.None)\n        {\n            let thCheckbox = document.createElement(\"th\");\n            thCheckbox.style.cssText += \"width: 20px;\";\n            puma(thCheckbox).attr(\"field\", \"vrGridCheckboxColumn\");\n            puma(thCheckbox).css(\"background-color\", \"#51B3E1\");\n            puma(thCheckbox).css(\"color\", \"#FFF\");\n\n            let textHTML = \"<input id='\" + element.id + \"header_CheckboxColumn' class='vrCheckBox' type='checkbox'></input>\"\n                + \"<label class='vrCheckBoxLabel vr-checkboxColumnHeader-label' for='header_CheckboxColumn'></label>\";\n            thCheckbox.innerHTML = textHTML;\n\n            puma(thCheckbox).css(\"text-align\", \"center\");\n\n            if (this.thereAreLockedColumns())\n                puma(this._divHeaderLocked).find(\".p-grid-headerColumn\").vrAppendPuma(thCheckbox);\n            else\n                puma(this._divHeader).find(\".p-grid-headerColumn\").vrAppendPuma(thCheckbox);\n\n            if (options.checkboxes == GridCheckboxModeEnum.SingleCheck)\n                puma(thCheckbox).children().hide();\n            else\n            {\n                puma(thCheckbox).click((e: any) =>\n                {\n                    let isChecked = (e.target as HTMLInputElement).checked;\n                    if (isChecked)\n                        this.checkAllRows();\n                    else\n                        this.unCheckAllRows();\n                });\n            }\n        }\n        //#endregion\n\n        //#region Columns\n        let thColumnHeaderFragment = document.createDocumentFragment();\n        let thColumnHeaderLockedFragment = document.createDocumentFragment();\n        for (let column of options.columns)\n        {\n            let th = document.createElement(\"th\");\n            th.setAttribute(\"field\", column.field);\n\n            let title = (column.title != null) ? column.title : \"\";\n            th.setAttribute(\"title\", title);\n\n            //#region Icon\n            if (column.headerSettings != null && column.headerSettings.icon != null)\n                title = \"<i class='\" + column.headerSettings.icon + \"'></i>\" + title;\n            //#endregion\n\n            //#region Bold\n            if (column.bold === true)\n                th.style.cssText += \"font-weight: 600;\";\n            //#endregion\n\n            //#region Css\n            if (column.headerSettings != null && column.headerSettings!.css != null)\n                th.style.cssText += column.headerSettings!.css;\n            //#endregion\n\n            th.innerHTML = \"<div class='grid_headerTh'><span class='grid_headerThContent'>\" + title + \"</span><i></i></div>\";\n\n            let thWidth = String((column.width != null) ? column.width : ((column.fitSpace == true) ? this._fitSpaceColumnPercentage + \"%\" : (column.type == GridColumnTypeEnum.EditButton) ? 32 : 100));\n            th.style.cssText += \"width: \" + thWidth + \"px;\";\n\n            if (column.fitSpace == true)\n                th.setAttribute(\"fitSpace\", \"true\");\n\n            //#region Color\n            if (column.headerSettings != null)\n            {\n                if (column.headerSettings.backgroundColor != null)\n                    th.style.cssText += \"background-color: \" + column.headerSettings.backgroundColor + \";\";\n\n                if (column.headerSettings.color != null)\n                    th.style.cssText += \"color: \" + column.headerSettings.color + \";\";\n            }\n            //#endregion\n\n            //#region Text align\n            if (column.headerSettings != null && column.headerSettings.textAlign != null)\n                th.style.cssText += \"text-align: \" + column.headerSettings.textAlign + \";\";\n            //#endregion\n\n            //#region Tooltip\n            if (options.tooltip)\n            {\n                let tooltip = \"\";\n                if (column.headerSettings != null)\n                {\n                    if (column.headerSettings.tooltip == true)\n                        tooltip = (column.title == null) ? \"\" : column.title;\n                    else if (typeof (column.headerSettings.tooltip) == \"string\")\n                        tooltip = column.headerSettings.tooltip;\n                }\n\n                if (tooltip.length > 0)\n                    th.setAttribute(\"title\", tooltip);\n            }\n            //#endregion\n\n            //#region Sort\n            let sortGridColumnTypes = [GridColumnTypeEnum.Currency, GridColumnTypeEnum.Date, GridColumnTypeEnum.DateTime,\n            GridColumnTypeEnum.Duration, GridColumnTypeEnum.Label, GridColumnTypeEnum.Number, GridColumnTypeEnum.Percentage,\n            GridColumnTypeEnum.String, GridColumnTypeEnum.Time, GridColumnTypeEnum.LongDate, GridColumnTypeEnum.LongDateTime,\n            GridColumnTypeEnum.LongWeekDate, GridColumnTypeEnum.ShortWeekDate];\n\n            if (sortGridColumnTypes.includes(column.type!))\n            {\n                th.onclick = (() =>\n                {\n                    if (this._isResizing === true || this._isDragging === true)\n                        return;\n\n                    if (puma(th).attr(\"sortMode\") == null)\n                        this.sort(column.field, GridSortDirectionEnum.Asc);\n                    else\n                    {\n                        let sortMode = Number(puma(th).attr(\"sortMode\")) as GridSortDirectionEnum;\n                        if (sortMode == GridSortDirectionEnum.Asc)\n                            this.sort(column.field, GridSortDirectionEnum.Desc);\n                        else\n                            this.removeSort();\n                    }\n                });\n            }\n            else\n                th.style.cssText += \"cursor: grab;\"\n            //#endregion\n\n            // Append th\n            if (options.lockable && column.locked)\n            {\n                th.setAttribute(\"locked\", \"locked\");\n                thColumnHeaderLockedFragment.appendChild(th);\n            }\n            else\n                thColumnHeaderFragment.appendChild(th);\n\n            if (column.hidden == true)\n                th.style.display = \"none\";\n        }\n\n        puma(this._divHeader).find(\".p-grid-headerColumn\")[0].appendChild(thColumnHeaderFragment)\n        if (options.lockable)\n            puma(this._divHeaderLocked).find(\".p-grid-headerColumn\")[0].appendChild(thColumnHeaderLockedFragment)\n\n        if (options.lockable && this.thereAreLockedColumns())\n            puma(this._divHeader).width(\"Calc(100% - \" + (puma(this._divHeaderLocked).width() + 5) + \"px)\")\n        //#endregion\n\n        //#endregion\n\n        //#region Filters\n        if (options.filterable)\n        {\n            puma(divFilters).show();\n            puma(this._divFilters)[0].style.cssText += \"display: inline-block\";\n            puma(this._divFilters).vrAppendPuma(\"<table class='p-grid'><thead><tr class='p-grid-filters'></tr></thead></table>\");\n\n            if (options.lockable)\n            {\n                puma(this._divFiltersLocked)[0].style.cssText += \"display: inline-block\";\n                puma(this._divFiltersLocked).vrAppendPuma(\"<table class='p-grid p-grid-locked'><thead><tr class='p-grid-filters'></tr></thead></table>\");\n            }\n\n            if (options.groupable! || options.groupBy != null)\n            {\n                let tdFilterFragment = document.createDocumentFragment();\n                let tdFilterLockedFragment = document.createDocumentFragment();\n                for (let column of options.columns!)\n                {\n                    let display = \"\";\n                    if (options.groupBy == null || (!(options.groupBy.fields as GridGroupByItem[]).map(k => k.field).includes(column.field)))\n                        display = \"display: none;\";\n\n                    let tdFilter = document.createElement(\"td\");\n                    tdFilter.setAttribute(\"field\", \"groupBy\" + column.field);\n                    tdFilter.classList.add(\"groupBy\" + column.field, \"groupByFilter\");\n                    tdFilter.style.cssText += display;\n                    tdFilterFragment.appendChild(tdFilter);\n\n                    if (options.lockable)\n                    {\n                        let tdFilterLocked = document.createElement(\"td\");\n                        tdFilterLocked.setAttribute(\"field\", \"groupBy\" + column.field);\n                        tdFilterLocked.classList.add(\"groupBy\" + column.field, \"groupByFilter\");\n                        tdFilterLocked.style.cssText += display;\n                        tdFilterLockedFragment.appendChild(tdFilterLocked);\n                    }\n                }\n\n                puma(this._divFilters).find(\".p-grid-filters\")[0].appendChild(tdFilterFragment)\n                if (options.lockable)\n                    puma(this._divFiltersLocked).find(\".p-grid-filters\")[0].appendChild(tdFilterLockedFragment)\n            }\n\n            //#region Checkbox column\n            if (options.checkboxes != GridCheckboxModeEnum.None)\n            {\n                let thCheckbox = document.createElement(\"td\");\n                puma(thCheckbox).attr(\"field\", \"vrGridCheckboxColumn\");\n                thCheckbox.style.cssText += \"width: 20px;\";\n\n                if (this.thereAreLockedColumns())\n                    puma(this._divFiltersLocked).find(\".p-grid-filters\").vrAppendPuma(thCheckbox);\n                else\n                    puma(this._divFilters).find(\".p-grid-filters\").vrAppendPuma(thCheckbox);\n            }\n            //#endregion\n\n            //#region Columns\n            let tdColumnFilterFragment = document.createDocumentFragment();\n            let tdColumnFilterLockedFragment = document.createDocumentFragment();\n            for (let column of options.columns)\n            {\n                //#region Create dictionary\n                if (column.type != GridColumnTypeEnum.EditButton)\n                    this._dictionaryDataValues.set(column.field, []);\n                //#endregion\n\n                let td = document.createElement(\"td\");\n                td.setAttribute(\"field\", column.field);\n\n                let tdWidth = String((column.width != null) ? column.width : ((column.fitSpace == true) ? this._fitSpaceColumnPercentage + \"%\" : (column.type == GridColumnTypeEnum.EditButton) ? 32 : 100));\n                td.style.cssText += \"width: \" + tdWidth + \"px;\";\n\n                if (column.fitSpace == true)\n                    td.setAttribute(\"fitSpace\", \"true\");\n\n                //#region Filter type\n                if ((column.type == GridColumnTypeEnum.Custom && column.filterable == null) || column.type == GridColumnTypeEnum.Color)\n                    column.filterable = false;\n\n                if (column.type != null && column.filterable !== false)\n                {\n                    switch (column.type)\n                    {\n                        case GridColumnTypeEnum.Checkbox:\n                        case GridColumnTypeEnum.Boolean:\n                            {\n                                td.style.cssText += \"text-align: center;\";\n\n                                let checkbox = document.createElement(\"input\");\n                                checkbox.id = element.id + \"_CheckboxFilter_\" + column.field;\n                                checkbox.classList.add(\"vrCheckBox\", \"indeterminateVrCheckbox\");\n                                checkbox.setAttribute(\"type\", \"checkbox\");\n                                td.appendChild(checkbox);\n\n                                let lblCheckbox = document.createElement(\"label\");\n                                lblCheckbox.classList.add(\"vrLabel\", \"vr-checkboxFilter-label\");\n                                lblCheckbox.setAttribute(\"for\", element.id + \"_CheckboxFilter_\" + column.field);\n                                td.appendChild(lblCheckbox);\n\n                                //#region Create filter\n                                checkbox.onclick = ((e: any) =>\n                                {\n                                    if (checkbox.checked && !checkbox.classList.contains(\"indeterminateVrCheckbox\"))\n                                    {\n                                        checkbox.classList.add(\"indeterminateVrCheckbox\");\n                                        this.removeFilter(column.field);\n                                        e.preventDefault();\n                                    }\n                                    else\n                                    {\n                                        checkbox.classList.remove(\"indeterminateVrCheckbox\");\n\n                                        let filterSettings = new GridFilterSettings();\n                                        filterSettings.type = column.type!;\n                                        filterSettings.checkboxFilterSettings = new GridCheckboxFilterSettings();\n                                        filterSettings.checkboxFilterSettings.value = checkbox.checked;\n                                        this.updateFilter(column.field, filterSettings, false);\n                                        this.applyFilters(true);\n                                    }\n                                });\n                                //#endregion\n                            }\n                            break;\n                        case GridColumnTypeEnum.DateTime:\n                        case GridColumnTypeEnum.Time:\n                        case GridColumnTypeEnum.Date:\n                        case GridColumnTypeEnum.LongDate:\n                        case GridColumnTypeEnum.LongDateTime:\n                        case GridColumnTypeEnum.LongWeekDate:\n                        case GridColumnTypeEnum.ShortWeekDate:\n                            {\n                                td.style.cssText += \"text-align: center;\";\n\n                                //#region Create filter\n                                let dateFilter = createButton(\n                                    {\n                                        id: this._elementId + \"_DateFilter_\" + column.field,\n                                        icon: IconClassicLight.Filter,\n                                        tooltip: \"Applica filtro\",\n                                        onClick: (e) =>\n                                        {\n                                            this.openWindowFiltering(column);\n                                        }\n                                    }, td);\n\n                                let dateFilterRemove = createButton(\n                                    {\n                                        id: this._elementId + \"_DateFilterRemove_\" + column.field,\n                                        icon: IconClassicRegular.Xmark,\n                                        tooltip: \"Rimuovi filtro\",\n                                        colorSettings: { background: \"#CCC\" },\n                                        visible: false,\n                                        cssContainer: \"margin-left: 5px;\",\n                                        onClick: (e) =>\n                                        {\n                                            this.removeFilter(column.field);\n\n                                            dateFilter.tooltip(\"\");\n                                            dateFilter.element().style.cssText += \"background-color: #f3f3f3; color: #000;\";\n                                            dateFilterRemove.hide();\n                                            this.recalculateHeight(true);\n                                        }\n                                    }, td);\n                                //#endregion\n                            }\n                            break;\n                        case GridColumnTypeEnum.Number:\n                        case GridColumnTypeEnum.Currency:\n                        case GridColumnTypeEnum.Percentage:\n                        case GridColumnTypeEnum.Duration:\n                            {\n                                td.style.cssText += \"text-align: center;\";\n\n                                //#region Create filter\n                                let numberFilter = createButton(\n                                    {\n                                        id: this._elementId + \"_NumberFilter_\" + column.field,\n                                        icon: IconClassicLight.Filter,\n                                        tooltip: \"Applica filtro\",\n                                        onClick: (e) =>\n                                        {\n                                            this.openWindowFiltering(column);\n                                        }\n                                    }, td);\n\n                                let numberFilterRemove = createButton(\n                                    {\n                                        id: this._elementId + \"_NumberFilterRemove_\" + column.field,\n                                        icon: IconClassicRegular.Xmark,\n                                        tooltip: \"Rimuovi filtro\",\n                                        colorSettings: { background: \"#CCC\" },\n                                        visible: false,\n                                        cssContainer: \"margin-left: 5px;\",\n                                        onClick: (e) =>\n                                        {\n                                            this.removeFilter(column.field);\n\n                                            numberFilter.tooltip(\"\");\n                                            numberFilter.element().style.cssText += \"background-color: #f3f3f3; color: #000;\";\n                                            numberFilterRemove.hide();\n                                            this.recalculateHeight(true);\n                                        }\n                                    }, td);\n                                //#endregion\n                            }\n                            break;\n                        case GridColumnTypeEnum.String:\n                        case GridColumnTypeEnum.Custom:\n                        case GridColumnTypeEnum.Label:\n                            {\n                                //#region Create filter\n                                this._timeoutFilterText = 0;\n                                let txtValue = createTextBox(\n                                    {\n                                        icon: (column.type == GridColumnTypeEnum.Custom) ? IconClassicLight.Search : undefined,\n                                        placeholder: (column.type == GridColumnTypeEnum.Custom) ? \"Cerca...\" : undefined,\n                                        width: (this.isRepeater()) ? \"100%\" : \"Calc(100% - 27px)\",\n                                        attributes: [{ name: \"field\", value: column.field }],\n                                        onPaste: (e) =>\n                                        {\n                                            clearTimeout(this._timeoutFilterText);\n                                            let textToSearch = String(e.value).trim().toLowerCase();\n                                            let field = e.sender.element().getAttribute(\"field\")!;\n\n                                            this.manageFilterTextByColumn(textToSearch, column, field, false);\n                                        },\n                                        onKeyUp: (e) =>\n                                        {\n                                            if (e.tabKey)\n                                                return;\n\n                                            //#region Filter button\n                                            btnStringFilter.tooltip(\"\");\n                                            btnStringFilter.element().style.cssText += \"background-color: #f3f3f3; color: #000;\";\n                                            btnStringFilterRemove.hide();\n\n                                            if (this.isRepeater())\n                                                e.sender.width(\"100%\");\n                                            else\n                                                e.sender.width(\"Calc(100% - 27px)\");\n                                            //#endregion\n\n                                            clearTimeout(this._timeoutFilterText);\n                                            let textToSearch = e.sender.value<string>().toLowerCase();\n                                            let field = e.sender.element().getAttribute(\"field\")!;\n\n                                            //#region Server binding\n                                            if (options!.serverBinding !== false)\n                                            {\n                                                let filterSettings = new GridFilterSettings();\n                                                filterSettings.type = column.type!;\n                                                filterSettings.stringFilterSettings = new GridStringFilterSettings();\n                                                filterSettings.stringFilterSettings.filterTypeEnum = GridStringFilterTypeEnum.IncludesFromSimpleSearch;\n                                                filterSettings.stringFilterSettings.text = textToSearch.toLowerCase();\n\n                                                if (textToSearch.length == 0)\n                                                    this.removeFilter(e.sender.element().getAttribute(\"field\")!, false);\n                                                else\n                                                    this.updateFilter(column.field, filterSettings, false);\n\n                                                if (e.key == KeyEnum.Enter)\n                                                {\n                                                    if (textToSearch.length == 0)\n                                                        this.rebind(null, true);\n                                                    else\n                                                        this.updateFilter(column.field, filterSettings);\n                                                }\n\n                                                return;\n                                            }\n                                            //#endregion\n\n                                            if (textToSearch.length == 0)\n                                            {\n                                                this.removeFilter(e.sender.element().getAttribute(\"field\")!, false);\n                                                window.setTimeout(() =>\n                                                {\n                                                    if (column.filterWebService === true)\n                                                        this.rebind(null, true);\n                                                    else\n                                                        this.applyFilters(true);\n                                                }, 100);\n                                                return;\n                                            }\n\n                                            this.manageFilterTextByColumn(textToSearch, column, field, e.backSpaceKey);\n                                        }\n                                    }, td, null, this._elementId + \"_StringFilter_\" + column.field);\n                                //#endregion\n\n                                //#region Create filter button\n                                let btnStringFilter = createButton(\n                                    {\n                                        icon: IconClassicLight.Filter,\n                                        tooltip: \"Applica filtro\",\n                                        visible: !this.isRepeater(),\n                                        onClick: (e) =>\n                                        {\n                                            this.openWindowFiltering(column);\n                                        }\n                                    }, td, null, this._elementId + \"_StringFilterBtn_\" + column.field);\n\n                                let btnStringFilterRemove = createButton(\n                                    {\n                                        icon: IconClassicRegular.Xmark,\n                                        tooltip: \"Rimuovi filtro\",\n                                        colorSettings: { background: \"#CCC\" },\n                                        visible: false,\n                                        cssContainer: \"margin-left: 5px;\",\n                                        onClick: (e) =>\n                                        {\n                                            this.removeFilter(column.field);\n\n                                            btnStringFilter.tooltip(\"\");\n                                            btnStringFilter.element().style.cssText += \"background-color: #f3f3f3; color: #000;\";\n                                            btnStringFilterRemove.hide();\n                                            this.recalculateHeight(true);\n\n                                            txtValue.width(\"Calc(100% - 27px\");\n                                        }\n                                    }, td, null, this._elementId + \"_StringFilterBtnRemove_\" + column.field);\n                                //#endregion\n                            }\n                            break;\n                        default:\n                            td.innerHTML = \"\";\n                            break;\n                    }\n                }\n                //#endregion\n\n                // Append td\n                if (options.lockable && column.locked)\n                    tdColumnFilterLockedFragment.appendChild(td);\n                else\n                    tdColumnFilterFragment.appendChild(td);\n\n                if (column.hidden === true)\n                    td.style.display = \"none\";\n            }\n\n            puma(this._divFilters).find(\".p-grid-filters\")[0].appendChild(tdColumnFilterFragment)\n            if (options.lockable)\n                puma(this._divFiltersLocked).find(\".p-grid-filters\")[0].appendChild(tdColumnFilterLockedFragment)\n            //#endregion\n\n            if (options.lockable && this.thereAreLockedColumns())\n                puma(this._divFilters).width(\"Calc(100% - \" + (puma(this._divHeaderLocked).width() + 5) + \"px)\")\n        }\n        //#endregion\n\n        //#region Totals\n        if (this._showTotals)\n        {\n            puma(divTotals).show();\n            puma(this._divTotals)[0].style.cssText += \"display: inline-block\";\n            puma(this._divTotals).vrAppendPuma(\"<table class='p-grid'><thead><tr class='p-grid-totals'></tr></thead></table>\");\n\n            if (options.lockable)\n            {\n                puma(this._divTotalsLocked)[0].style.cssText += \"display: inline-block\";\n                puma(this._divTotalsLocked).vrAppendPuma(\"<table class='p-grid p-grid-locked'><thead><tr class='p-grid-totals'></tr></thead></table>\");\n            }\n\n            if (options.groupable! || options.groupBy != null)\n            {\n                let tdTotalsFragment = document.createDocumentFragment();\n                let tdTotalsLockedFragment = document.createDocumentFragment();\n                for (let column of options.columns!)\n                {\n                    let display = \"\";\n                    if (options.groupBy == null || (!(options.groupBy.fields as GridGroupByItem[]).map(k => k.field).includes(column.field)))\n                        display = \"display: none;\";\n\n                    let tdTotals = document.createElement(\"td\");\n                    tdTotals.setAttribute(\"field\", \"groupBy\" + column.field);\n                    tdTotals.classList.add(\"groupBy\" + column.field, \"groupByTotal\");\n                    tdTotals.style.cssText += display;\n                    tdTotalsFragment.appendChild(tdTotals);\n\n                    if (options.lockable)\n                    {\n                        let tdTotalsLocked = document.createElement(\"td\");\n                        tdTotalsLocked.setAttribute(\"field\", \"groupBy\" + column.field);\n                        tdTotalsLocked.classList.add(\"groupBy\" + column.field, \"groupByTotal\");\n                        tdTotalsLocked.style.cssText += display;\n                        tdTotalsLockedFragment.appendChild(tdTotalsLocked);\n                    }\n                }\n\n                puma(this._divTotals).find(\".p-grid-totals\")[0].appendChild(tdTotalsFragment)\n                if (options.lockable)\n                    puma(this._divTotalsLocked).find(\".p-grid-totals\")[0].appendChild(tdTotalsLockedFragment)\n            }\n\n            //#region Checkbox column\n            if (options.checkboxes != GridCheckboxModeEnum.None)\n            {\n                let thCheckbox = document.createElement(\"td\");\n                thCheckbox.setAttribute(\"field\", \"vrGridCheckboxColumn\");\n                thCheckbox.style.cssText += \"width: 20px;\";\n\n                if (this.thereAreLockedColumns())\n                    puma(this._divTotalsLocked).find(\".p-grid-totals\").vrAppendPuma(thCheckbox);\n                else\n                    puma(this._divTotals).find(\".p-grid-totals\").vrAppendPuma(thCheckbox);\n            }\n            //#endregion\n\n            //#region Columns\n            let tdColumnTotalsFragment = document.createDocumentFragment();\n            let tdColumnTotalsLockedFragment = document.createDocumentFragment();\n            for (let column of options.columns!)\n            {\n                let td = document.createElement(\"td\");\n                td.setAttribute(\"field\", column.field);\n\n                let tdWidth = String((column.width != null) ? column.width : ((column.fitSpace == true) ? this._fitSpaceColumnPercentage + \"%\" : (column.type == GridColumnTypeEnum.EditButton) ? 32 : 100));\n                td.style.cssText += \"width: \" + tdWidth + \"px;\";\n\n                if (column.fitSpace == true)\n                    td.setAttribute(\"fitSpace\", \"true\");\n\n                //#region TextAlign\n                let textAlign = GridAlignEnum.Right;\n                switch (column.type)\n                {\n                    case GridColumnTypeEnum.Number:\n                    case GridColumnTypeEnum.Currency:\n                    case GridColumnTypeEnum.Percentage:\n                        textAlign = GridAlignEnum.Right;\n                        break;\n                    case GridColumnTypeEnum.Duration:\n                        textAlign = GridAlignEnum.Center;\n                        break;\n                    case GridColumnTypeEnum.Date:\n                    case GridColumnTypeEnum.DateTime:\n                    case GridColumnTypeEnum.Time:\n                    case GridColumnTypeEnum.LongDate:\n                    case GridColumnTypeEnum.LongDateTime:\n                    case GridColumnTypeEnum.LongWeekDate:\n                    case GridColumnTypeEnum.ShortWeekDate:\n                        textAlign = GridAlignEnum.Center;\n                        break;\n                    case GridColumnTypeEnum.String:\n                        textAlign = GridAlignEnum.Left;\n                        break;\n                }\n\n                if (column.cellSettings != null)\n                    textAlign = (column.cellSettings.textAlign != null) ? column.cellSettings.textAlign : textAlign;\n\n                td.style.cssText += \"text-align: \" + textAlign + \";\";\n                //#endregion\n\n                //#region Format\n                if (column.aggregate != null && column.aggregate !== false)\n                {\n                    if (typeof (column.aggregate) == \"boolean\")\n                    {\n                        switch (column.type)\n                        {\n                            case GridColumnTypeEnum.Number: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Currency: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Duration: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Percentage: column.aggregate = GridAggregateMode.Average; break;\n                        }\n                    }\n\n                    //#region Type\n                    switch (column.type)\n                    {\n                        case GridColumnTypeEnum.Number:\n                            column.decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 0;\n                            break;\n                        case GridColumnTypeEnum.Currency:\n                            column.decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 2;\n                            break;\n                        case GridColumnTypeEnum.Duration:\n                            column.decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 0;\n                            break;\n                        case GridColumnTypeEnum.Percentage:\n                            column.decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 2;\n                            break;\n                    }\n                    //#endregion\n                }\n                //#endregion\n\n                if (column.type == GridColumnTypeEnum.Custom && column.exportable == null)\n                    column.exportable = false;\n\n                //Append th\n                if (options.lockable && column.locked)\n                    tdColumnTotalsLockedFragment.appendChild(td);\n                else\n                    tdColumnTotalsFragment.appendChild(td);\n\n                //Hidden\n                if (column.hidden == true)\n                    td.style.display = \"none\";\n            }\n\n            puma(this._divTotals).find(\".p-grid-totals\")[0].appendChild(tdColumnTotalsFragment)\n            if (options.lockable)\n                puma(this._divTotalsLocked).find(\".p-grid-totals\")[0].appendChild(tdColumnTotalsLockedFragment)\n            //#endregion\n\n            if (this.thereAreLockedColumns())\n                puma(this._divTotals).width(\"Calc(100% - \" + (puma(this._divHeaderLocked).width() + 5) + \"px)\")\n        }\n        else\n            puma(this._divTotals).hide();\n\n        if (options.lockable)\n        {\n            if (!this.thereAreLockedColumns())\n            {\n                if (this._divHeaderLocked != null) this._divHeaderLocked.style.cssText += \"display: none;\";\n                if (this._divFiltersLocked != null) this._divFiltersLocked.style.cssText += \"display: none;\";\n                if (this._divBodyLocked != null) this._divBodyLocked.style.cssText += \"display: none;\";\n                if (this._divTotalsLocked != null) this._divTotalsLocked.style.cssText += \"display: none;\";\n            }\n            else\n            {\n                puma(this._divBody).width(\"Calc(100% - \" + (puma(this._divHeaderLocked).width() + 5) + \"px)\")\n                puma(this._divBodyLocked).width(puma(this._divHeaderLocked).width())\n            }\n        }\n        //#endregion\n\n        this._internalOptions = options;\n\n        if (this._actualLayout != null)\n            this.changeLayout();\n\n        //#region DataSource\n        if (options.dataSource != null)\n            this.dataSource(options.dataSource);\n        else\n            this.recalculateHeight();\n        //#endregion\n\n        //#region Rebind\n        if (options.rebind != null && options.rebind.rebindAtStartup === true)\n            this.doWebApiCall(options.rebind, GridRequestTypeEnum.Rebind);\n        //#endregion\n\n        if (options.enable === false)\n            this.enable(options.enable);\n\n        //#region Column options\n        let thHeaderList = Array.from<HTMLElement>(puma(this._divHeader).find(\"table th\"));\n        if (options.lockable)\n            thHeaderList.vrPushRange(Array.from<HTMLElement>(puma(this._divHeaderLocked).find(\"table th\")));\n\n        this._columnOptions = [];\n        for (let th of thHeaderList)\n        {\n            let columnPosition = new GridColumnPosition();\n            columnPosition.field = th.getAttribute(\"field\")!;\n            columnPosition.left = th.offsetLeft;\n            columnPosition.right = puma(th).offset().left + puma(th).width();\n            columnPosition.index = puma(th).index();\n            columnPosition.th = th;\n            this._columnOptions.push(columnPosition);\n        }\n        //#endregion\n\n        if (options.resizable)\n            this.resizable();\n\n        if (options.reorderable)\n            this.draggableColumns();\n\n        //#region GroupBy\n        if (options.groupBy != null)\n        {\n            for (let groupByProperty of options.groupBy.fields as GridGroupByItem[])\n                this._groupByActualValue[groupByProperty.field] = undefined\n        }\n        //#endregion\n\n        puma(window).on(\"resize\", () => \n        {\n            this.recalculateHeight();\n            this.recalculateWidth();\n        });\n    }\n\n    //#region Methods\n\n    //#region DataSource\n    rebind(parameters?: any | null, filterWithWebService = false, keepInfo = true, loadingElement?: boolean | HTMLElement | JQuery | string): any\n    {\n        let promise = new Promise<void>((callback: Function) =>\n        {\n            //#region Filter with webService\n            if (filterWithWebService)\n            {\n                let tableSearchingInfoList: GridSearchingInfo[] = [];\n                this._dictionaryFilterConditions.forEach((value, key, dic) =>\n                {\n                    if (value.stringFilterSettings != null)\n                    {\n                        let tableSearchingInfo = new GridSearchingInfo();\n                        tableSearchingInfo.field = key;\n                        tableSearchingInfo.text = value.stringFilterSettings.text;\n                        tableSearchingInfoList.push(tableSearchingInfo);\n                    }\n                });\n                parameters = { tableSearchingInfoList: tableSearchingInfoList };\n            }\n            //#endregion\n\n            let options = this.getOptions();\n            if (options.rebind != null)\n            {\n                options.rebind.otherParameters = undefined;\n                if (parameters != null)\n                    options.rebind.otherParameters = parameters;\n\n                //#region Keep info after rebind\n                if (keepInfo)\n                {\n                    this._tempRebindInfo = new TempRebindInfo();\n                    this._tempRebindInfo.checkedValues = this.getCheckedValues();\n                    this._tempRebindInfo.page = this.pageSelected();\n                    this._tempRebindInfo.yPosition = puma(this.container()).find(\".grid_Body\")[0].scrollTop;\n                }\n                else\n                    this._tempRebindInfo = null;\n                //#endregion\n\n                (options.rebind as any).tempLoadingElement = loadingElement;\n\n                this.clearSelection();\n                this.doWebApiCall(options.rebind, GridRequestTypeEnum.Rebind, callback);\n            }\n        });\n        return promise;\n    }\n\n    rebindSpecificRows(itemIdList: number[], update = true, keepInfo = true, loadingElement?: boolean | HTMLElement | JQuery | string)\n    {\n        let options = this.getOptions();\n        if (options.rebind != null)\n        {\n            if (options.rebind.specificItemIdListPropertyName == null)\n                options.rebind.specificItemIdListPropertyName = \"specificItemIdList\";\n\n            options.rebind.otherParameters = {};\n            options.rebind.otherParameters[options.rebind.specificItemIdListPropertyName] = itemIdList;\n            options.rebind.otherParameters[\"update\"] = update;\n            (options.rebind as any).loadingElement = loadingElement;\n\n            if (keepInfo)\n            {\n                //#region Keep info after rebind\n                this._tempRebindInfo = new TempRebindInfo();\n                this._tempRebindInfo.checkedValues = this.getCheckedValues();\n                this._tempRebindInfo.page = this.pageSelected();\n                this._tempRebindInfo.yPosition = puma(this.container()).find(\".grid_Body\")[0].scrollTop;\n                //#endregion\n            }\n\n            this.clearSelection();\n            this.doWebApiCall(options.rebind, GridRequestTypeEnum.RebindSpecificRows);\n        }\n    }\n\n    clear(triggerChange = false, clearFilters = true)\n    {\n        this._vrDateTimeFields = [];\n\n        if (this.dataSource().filter(k => k[\"defaultRow\"] == null || k[\"defaultRow\"] == false).length > 0)\n        {\n            if (clearFilters)\n                this.clearFilters(false);\n\n            this.dataSource([]);\n            this.clearSelection(triggerChange);\n        }\n    }\n\n    private manageDataSourceControls(GridControlData: GridControlData, className: string)\n    {\n        puma(this.element()).add(puma(this._elementLocked)).off(\"click\", \".\" + className);\n        puma(this.element()).add(puma(this._elementLocked)).on(\"click\", \".\" + className, (e: any) =>\n        {\n            e.target.setAttribute(\"disabled\", \"disabled\");\n            let options = this.getOptions();\n            let rowId = e.currentTarget.getAttribute(\"dataItemId\")!;\n            if (rowId == null)\n                rowId = e.target.closest(\".vrButton\").getAttribute(\"dataItemId\")!;\n\n            let dataItem = this.dataSource()!.find(k => k[options.dataSourceFieldId!] == rowId);\n\n            //#region Control settings\n            let controlSettings: GridButtonSettings = new GridButtonSettings();\n            switch (GridControlData.columnType)\n            {\n                case GridColumnTypeEnum.Button:\n                case GridColumnTypeEnum.EditButton:\n                    controlSettings = GridControlData.GridControlsSettings as GridButtonSettings;\n                    break;\n                case GridColumnTypeEnum.Icon:\n                    controlSettings = GridControlData.GridControlsSettings as GridIconSettings;\n                    break;\n                case GridColumnTypeEnum.Custom:\n                    controlSettings = GridControlData.GridControlsSettings as GridCustomSettings;\n                    break;\n                case GridColumnTypeEnum.Label:\n                    controlSettings = GridControlData.GridControlsSettings as GridLabelSettings;\n                    break;\n            }\n            //#endregion\n\n            //#region Control click\n            if (controlSettings != null)\n            {\n                let tableClickEvent = new GridControlsClickEvent();\n                tableClickEvent.dataItem = dataItem;\n\n                if (controlSettings.onClick != null && controlSettings.enabled !== false)\n                {\n                    if (controlSettings.confirmationMessage != null && controlSettings.confirmationMessage.length > 0)\n                    {\n                        confirm(controlSettings.confirmationMessage).then(() =>\n                        {\n                            controlSettings!.onClick!(tableClickEvent);\n                        });\n                    }\n                    else\n                        controlSettings!.onClick!(tableClickEvent);\n                }\n                else if (GridControlData.columnType == GridColumnTypeEnum.EditButton)\n                    this.openAutoWindow(dataItem);\n\n                window.setTimeout(() => e.target.removeAttribute(\"disabled\"), 500);\n            }\n            //#endregion\n            return false;\n        });\n    }\n\n    private manageControls()\n    {\n        let controlList = [this._cellButtons, this._cellIcons, this._cellCustoms, this._cellLabels, this._cellImages];\n        for (let control of controlList)\n        {\n            control.forEach((GridControlData: GridControlData, className: string) =>\n            {\n                this.manageDataSourceControls(GridControlData, className);\n            });\n        }\n    }\n\n    originalDataSource()\n    {\n        return this._originalDataSource;\n    }\n\n    dataSource(dataItems?: any[], clearFilters = false, keepInfo = true)\n    {\n        if (dataItems != null)\n        {\n            let options = this.getOptions();\n\n            //#region DataSourceFieldId not defined\n            if (dataItems.length > 0 && dataItems[0][options.dataSourceFieldId!] == null)\t\t\t\t\t\n            {\n                let index = -1;\n                for (let item of dataItems)\n                {\n                    item[options.dataSourceFieldId!] = index;\n                    index--;\n                }\n                this._lastIndexAdded = index;\n            }\n            //#endregion\n\n            //#region Manage vr.DateTime type\n            this.fixDatasourceWithDate(dataItems);\n            //#endregion\n\n            //#region GroupBy & Filterable\n            if (options.groupBy != null)\n                this.sortingGroupFields(dataItems);\n\n            if (options.sortBy != null)\n            {\n                let sortByField = (options.sortBy as GridSortSettings).field;\n                this.sort(sortByField, (options.sortBy as GridSortSettings).direction, false);\n            }\n\n            this._originalDataSource = UtilityManager.duplicate(dataItems);\n            if (options.filterable)\n            {\n                this._dictionaryDataValues.clear();\n                window.setTimeout(() =>\n                {\n                    for (let column of options.columns!)\n                    {\n                        if (column.type != GridColumnTypeEnum.EditButton)\n                            this._dictionaryDataValues.set(column.field, dataItems.map(k => String(k[column.field]).toLowerCase()));\n                    }\n                }, 200);\n            }\n            //#endregion\n\n            //#region Keep info after rebind\n            if (keepInfo)\n            {\n                this._tempRebindInfo = new TempRebindInfo();\n                this._tempRebindInfo.checkedValues = this.getCheckedValues();\n                this._tempRebindInfo.page = this.pageSelected();\n                this._tempRebindInfo.yPosition = this.container().querySelector(\".grid_Body\")!.scrollTop;\n            }\n            //#endregion\n\n            if (clearFilters)\n            {\n                this.clearFilters(false);\n                this.setDataSource(dataItems);\n            }\n            else\n            {\n                if (options.serverBinding !== false)\n                    this.setDataSource(dataItems);\n                else\n                    this.applyFilters(true, !options.serverBinding);\n            }\n        }\n\n        if (this._dataSource == null)\n            this._dataSource = [];\n\n        return this._dataSource;\n    }\n\n    update(triggerDataBound = true, keepInfo = true)\n    {\n        //#region Keep info after rebind\n        if (keepInfo)\n        {\n            this._tempRebindInfo = new TempRebindInfo();\n            this._tempRebindInfo.checkedValues = this.getCheckedValues();\n            this._tempRebindInfo.page = this.pageSelected();\n            this._tempRebindInfo.yPosition = this.container().querySelector(\".grid_Body\")!.scrollTop;\n        }\n        //#endregion\n\n        this.setDataSource(this.dataSource(), triggerDataBound);\n    }\n\n    private setDataSource(dataItems: any[], triggerDataBound = true)\n    {\n        let options = this.getOptions();\n        this._dataSource = dataItems;\n\n        this._rowCheckedIdList = this._rowCheckedIdList.filter(k => dataItems.map(j => String(j[options.dataSourceFieldId!])).includes(k));\n\n        if (this._actualSortingInfo != null && !options.serverBinding)\n            this.applySorting();\n        else\n        {\n            this._cellButtons = new Map<string, GridControlData>();\n            this._cellIcons = new Map<string, GridControlData>();\n            this._cellCustoms = new Map<string, GridControlData>();\n            this._cellLabels = new Map<string, GridControlData>();\n            this._cellImages = new Map<string, GridControlData>();\n\n            //#region Keep info after rebind\n            if (this._tempRebindInfo != null && !options.serverBinding)\n            {\n                let page = this._tempRebindInfo.page;\n                let checkedValues = this._tempRebindInfo.checkedValues;\n                let yPosition = this._tempRebindInfo.yPosition;\n                this._tempRebindInfo = null;\n\n                this.pageSelected(page, false);\n                this.drawTable(dataItems, triggerDataBound);\n                this.manageControls();\n\n                this.selectRows(checkedValues, undefined, false);\n                this.container().querySelector(\".grid_Body\")!.scrollTo({ top: yPosition });\n            }\n            else\n            {\n                this.drawTable(dataItems, triggerDataBound);\n                this.manageControls();\n            }\n            //#endregion\n        }\n    }\n\n    private drawTable(dataItems: any[], triggerDataBound = true)\n    {\n        let options = this.getOptions();\n        if (typeof (options.pageSize) == \"boolean\" || this._pageSizeUnlimited)\n            options.pageSize = dataItems.length;\n\n        if (typeof (options.pageSize) != \"number\" && options.pageSize != null)\n            options.pageSize = (options.pageSize!.value != null) ? options.pageSize!.value : 50;\n\n        //#region Body\n        let tbody = this.element().getElementsByTagName(\"tbody\")[0];\n        if (this.element().getElementsByTagName(\"tbody\").length == 0)\n        {\n            tbody = document.createElement(\"tbody\");\n            this.element().appendChild(tbody);\n        }\n\n        tbody.innerHTML = \"\";\n\n        let tbodyLocked = null;\n        if (options.lockable)\n        {\n            tbodyLocked = this._elementLocked.getElementsByTagName(\"tbody\")[0];\n            if (this._elementLocked.getElementsByTagName(\"tbody\").length == 0)\n            {\n                tbodyLocked = document.createElement(\"tbody\");\n                this._elementLocked.appendChild(tbodyLocked);\n            }\n\n            tbodyLocked.innerHTML = \"\";\n        }\n        //#endregion\n\n        //#region Rows\n        let items: any[];\n        let firstIndex: number;\n        let lastIndex: number;\n        if (!options.serverBinding)\n        {\n            firstIndex = (this.pageSelected() - 1) * options.pageSize!;\n            lastIndex = this.pageSelected() * options.pageSize!;\n            items = dataItems.slice(firstIndex, lastIndex);\n        }\n        else\n        {\n            items = dataItems;\n            firstIndex = 0;\n            lastIndex = dataItems.length - 1;\n        }\n\n        //#region Default row if empty\n        if (items.length == 0)\n        {\n            let defaultRow: any = {};\n            for (let column of options.columns!)\n            {\n                defaultRow[column.field] = null;\n                defaultRow[\"defaultRow\"] = true;\n            }\n            items.push(defaultRow);\n\n            if (dataItems.length == 0)\n                dataItems.push(defaultRow);\n        }\n        else\n        {\n            if (items.filter(k => k[\"defaultRow\"] != null).length > 0)\n                items.splice(0, 1);\n\n            if (dataItems.filter(k => k[\"defaultRow\"] != null).length > 0)\n                dataItems.splice(0, 1);\n        }\n        //#endregion\n\n        //#region GroupBy\n        let visibleColumns = [];\n        if (options.groupable! || options.groupBy != null)\n        {\n            this._groupByActualValue = {};\n            visibleColumns = options.columns!.filter(k => k.hidden !== true);\n        }\n        //#endregion\n\n        let i = (!options.serverBinding) ? ((this.pageSelected() - 1) * options.pageSize!) : 0;\n        if (i > dataItems.length)\n        {\n            i = 0;\n            this.pageSelected(1, false);\n        }\n\n        let rowFragment = document.createDocumentFragment();\n        let rowFragmentLocked = document.createDocumentFragment();\n        for (let row of items)\n        {\n            let dataItem = dataItems[i];\n            if (dataItem == null)\n                continue;\n\n            let dataItemId = dataItem[options.dataSourceFieldId!];\n            let rowId = \"row\" + i + \"_\" + dataItemId;\n\n            //#region GroupBy\n            let rowAdded = 0;\n            if (options.groupable !== false && options.groupBy != null)\n            {\n                if ((options.groupBy as GridGroupBySettings).fields != null)\n                {\n                    let groupByIndex = 0;\n                    for (let groupByField of ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]))\n                    {\n                        let cellValue = row[groupByField.field];\n                        let column = options.columns!.find(k => k.field == groupByField.field);\n\n                        if (this._groupByActualValue[groupByField.field] !== cellValue)\n                        {\n                            if (rowAdded == 0)\n                            {\n                                for (let p = groupByIndex; p < ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).length; p++)\n                                {\n                                    options.groupBy = options.groupBy as GridGroupBySettings;\n                                    this._groupByActualValue[(options.groupBy.fields as GridGroupByItem[])[p].field] = undefined;\n                                }\n                            }\n\n                            //#region Add tr groupBy\n                            let trGroupBy = document.createElement(\"tr\");\n                            trGroupBy.setAttribute(\"field\", (cellValue == null || cellValue === \"\") ? \"nosetted\" : this.fixValueWithoutSpecialChars(cellValue));\n                            trGroupBy.setAttribute(\"level\", String(groupByIndex));\n                            trGroupBy.classList.add(\"grid_trGroupBy\", \"p-grid-body\");\n\n                            if (options.rowHeight != 27)\n                                trGroupBy.style.cssText += \"height: \" + options.rowHeight! + \"px;\";\n\n                            rowFragment.appendChild(trGroupBy);\n\n                            let trGroupByLocked = null;\n                            if (options.lockable)\n                            {\n                                trGroupByLocked = document.createElement(\"tr\");\n                                trGroupByLocked.setAttribute(\"field\", (cellValue == null || cellValue === \"\") ? \"nosetted\" : this.fixValueWithoutSpecialChars(cellValue));\n                                trGroupByLocked.setAttribute(\"level\", String(groupByIndex));\n                                trGroupByLocked.classList.add(\"grid_trGroupBy\", \"grid_trGroupByLocked\", \"p-grid-body\");\n\n                                if (options.rowHeight != 27)\n                                    trGroupByLocked.style.cssText += \"height: \" + options.rowHeight! + \"px;\";\n\n                                rowFragmentLocked!.appendChild(trGroupByLocked);\n                            }\n                            //#endregion\n\n                            rowAdded++;\n                            if (groupByIndex > 0)\n                            {\n                                for (let p = 0; p < groupByIndex; p++)\n                                {\n                                    let groupByFieldValue = typeof (groupByField) == \"string\" ? groupByField : groupByField.field;\n\n                                    let td = document.createElement(\"td\");\n                                    td.classList.add(\"groupBy\" + groupByFieldValue);\n                                    td.style.cssText += \"width: 16px;\";\n                                    trGroupBy.appendChild(td);\n\n                                    if (options.lockable)\n                                    {\n                                        let td = document.createElement(\"td\");\n                                        td.classList.add(\"groupBy\" + groupByFieldValue);\n                                        td.style.cssText += \"width: 16px;\";\n                                        trGroupByLocked!.appendChild(td);\n                                    }\n                                }\n                            }\n\n                            //#region Group title\n                            let cellText = String(cellValue);\n                            if (column != null)\n                            {\n                                if (column.type == GridColumnTypeEnum.Date)\n                                    cellText = (row[groupByField.field] == null) ? \"\" : Date.vrFixDateString(row[groupByField.field]).vrToItalyString();\n                                else if (column.type == GridColumnTypeEnum.Checkbox || column.type == GridColumnTypeEnum.Boolean)\n                                    cellText = (Boolean(row[groupByField.field])) ? \"Sì\" : \"No\";\n                            }\n\n                            let colspan = visibleColumns.length - groupByIndex + ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).length;\n                            if (options.checkboxes == GridCheckboxModeEnum.None)\n                                colspan -= 1;\n\n                            let groupByDisplayText = cellText;\n                            if (groupByField.displayField != null)\n                                groupByDisplayText = row[groupByField.displayField!];\n\n                            if (groupByField.displayValue != null)\n                            {\n                                let groupByDisplayValueEvent = new GridGroupDisplayValueEvent();\n                                groupByDisplayValueEvent.sender = this;\n                                groupByDisplayValueEvent.dataItem = row;\n                                groupByDisplayValueEvent.field = groupByField.field;\n                                groupByDisplayValueEvent.displayField = groupByField.displayField;\n                                groupByDisplayText = groupByField.displayValue!(groupByDisplayValueEvent);\n                            }\n\n                            if (groupByDisplayText == null) groupByDisplayText = cellText;\n\n                            let groupByCaret = IconClassicLight.CaretDown;\n                            let groupByFieldValue = typeof (groupByField) == \"string\" ? groupByField : groupByField.field;\n\n                            let tdExpandCollapse = document.createElement(\"td\");\n                            tdExpandCollapse.classList.add(\"grid_tdGroupByCollapse\", \"groupBy\" + groupByFieldValue);\n                            tdExpandCollapse.style.cssText += \"width: 16px; border-right-color: transparent !important;\";\n                            tdExpandCollapse.innerHTML = \"<i class='grid_tdGroupByCollapse \" + groupByCaret + \"'></i>\";\n                            trGroupBy.appendChild(tdExpandCollapse);\n\n                            let tdGroupByName = document.createElement(\"td\");\n                            tdGroupByName.classList.add(\"grid_tdGroupByName\");\n                            tdGroupByName.style.cssText += \"font-weight: 600;\";\n                            tdGroupByName.setAttribute(\"colspan\", String(colspan));\n                            trGroupBy.appendChild(tdGroupByName);\n\n                            let divGroupByName = document.createElement(\"div\");\n                            divGroupByName.classList.add(\"grid_divGroupByName\");\n                            if (dataItems.length == 1 && dataItems[0][\"defaultRow\"] != null)\n                                divGroupByName.innerHTML = \"Nessun gruppo o elemento presente\";\n                            else\n                            {\n                                if (groupByDisplayText == null || groupByDisplayText === \"\" || groupByDisplayText == \"null\")\n                                    divGroupByName.innerHTML = (groupByField.groupNameIfEmpty == null) ? \"Non impostato\" : groupByField.groupNameIfEmpty;\n                                else\n                                    divGroupByName.innerHTML = groupByDisplayText;\n                            }\n                            tdGroupByName.appendChild(divGroupByName);\n\n                            if (options.lockable)\n                            {\n                                let tdExpandCollapse = document.createElement(\"td\");\n                                tdExpandCollapse.classList.add(\"grid_tdGroupByCollapse\", \"groupBy\" + groupByFieldValue);\n                                tdExpandCollapse.style.cssText += \"width: 16px; border-right-color: transparent !important;\";\n                                tdExpandCollapse.innerHTML = \"<i class='grid_tdGroupByCollapse \" + groupByCaret + \"'></i>\";\n                                trGroupByLocked!.appendChild(tdExpandCollapse);\n\n                                let tdGroupByName = document.createElement(\"td\");\n                                tdGroupByName.classList.add(\"grid_tdGroupByName\");\n                                tdGroupByName.style.cssText += \"font-weight: 600;\";\n                                tdGroupByName.setAttribute(\"colspan\", String(colspan));\n                                trGroupByLocked!.appendChild(tdGroupByName);\n\n                                let divGroupByName = document.createElement(\"div\");\n                                divGroupByName.classList.add(\"grid_divGroupByName\");\n                                if (dataItems.length == 1 && dataItems[0][\"defaultRow\"] != null)\n                                    divGroupByName.innerHTML = \"Nessun gruppo o elemento presente\";\n                                else\n                                {\n                                    if (groupByDisplayText == null || groupByDisplayText === \"\" || groupByDisplayText == \"null\")\n                                        divGroupByName.innerHTML = \"Non impostato\";\n                                    else\n                                        divGroupByName.innerHTML = groupByDisplayText;\n                                }\n                                tdGroupByName.appendChild(divGroupByName);\n                            }\n\n                            if (options.onGroupEditClick != null || groupByField.onEditClick != null)\n                            {\n                                let divEdit = document.createElement(\"div\");\n                                divEdit.style.cssText += \"position: relative; display: inline-flex; margin-left: 6px; \" + ((options.checkboxes !== false) ? \"top: -5px;\" : \"\");\n                                divEdit.innerHTML = \"<i class='grid_groupByEdit \" + IconClassicLight.Pencil + \"' style='cursor: pointer;'></i>\";\n                                tdGroupByName.appendChild(divEdit);\n                            }\n\n                            this._groupByActualValue[groupByField.field] = cellValue;\n\n                            if (this.thereAreLockedColumns())\n                            {\n                                let groupByEdit = trGroupBy.querySelector(\"i.grid_groupByEdit\");\n                                if (groupByEdit != null)\n                                {\n                                    if (groupByEdit.parentElement != null)\n                                        groupByEdit.parentElement.style.display = \"none\";\n                                }\n                            }\n                            //#endregion\n\n                            //#region Checkbox group\n                            if (groupByField.checkbox == null) groupByField.checkbox = true;\n                            if (options.checkboxes != GridCheckboxModeEnum.None)\n                            {\n                                let checkboxContainer = trGroupBy.querySelector(\"div.grid_divGroupByName\")!;\n                                if (this.thereAreLockedColumns())\n                                    checkboxContainer = trGroupByLocked!.querySelector(\"div.grid_divGroupByName\")!;\n\n                                createCheckBox(\n                                    {\n                                        visible: groupByField.checkbox,\n                                        cssContainer: \"margin-right: 5px;\",\n                                        onCheck: (e) =>\n                                        {\n                                            let parentGroupRow = e.sender.element().parentElement!.parentElement!.parentElement!.parentElement!;\n\n                                            let childrenRows = this.getChildrenGroupRows(parentGroupRow, this._divBody);\n                                            if (this.thereAreLockedColumns())\n                                                childrenRows = this.getChildrenGroupRows(parentGroupRow, this._divBodyLocked);\n\n                                            if (options!.onBeforeGroupCheck != null)\n                                            {\n                                                let beforeGroupCheckEvent = new GridBeforeGroupCheckEvent();\n                                                beforeGroupCheckEvent.sender = this;\n                                                beforeGroupCheckEvent.checked = e.checked;\n                                                beforeGroupCheckEvent.childrenIdList = childrenRows.children.map(k => k.getAttribute(\"id\")!.split(\"_\")[1]);\n                                                options!.onBeforeGroupCheck(beforeGroupCheckEvent);\n\n                                                if (beforeGroupCheckEvent.isDefaultPrevented())\n                                                    return;\n                                            }\n\n                                            if (e.checked)\n                                                this.selectRows(childrenRows.children.map(k => k.getAttribute(\"id\")!.split(\"_\")[1]), undefined, false);\n                                            else\n                                                this.unselectRows(childrenRows.children.map(k => k.getAttribute(\"id\")!.split(\"_\")[1]), undefined, false);\n\n                                            this.manageGroupCheckParent(childrenRows.children.vrLast().getElementsByClassName(\"vr-checkbox-column\")[0] as HTMLElement);\n\n                                            if (options!.onAfterGroupCheck != null)\n                                            {\n                                                let beforeGroupCheckEvent = new GridAfterGroupCheckEvent();\n                                                beforeGroupCheckEvent.sender = this;\n                                                beforeGroupCheckEvent.checked = e.checked;\n                                                beforeGroupCheckEvent.childrenIdList = childrenRows.children.map(k => k.getAttribute(\"id\")!.split(\"_\")[1]);\n                                                options!.onAfterGroupCheck(beforeGroupCheckEvent)\n                                            }\n                                        }\n                                    }, checkboxContainer as HTMLElement, ControlPositionEnum.Before);\n                            }\n                            //#endregion\n\n                            //#region Expand/Collapse\n                            puma(trGroupBy).find(\"td.grid_tdGroupByCollapse\").add(puma(trGroupByLocked).find(\"td.grid_tdGroupByCollapse\")).click((e: any) =>\n                            {\n                                //#region Group icon\n                                let icon = puma(e.currentTarget).find(\"i\");\n                                let collapse = icon.hasClass(\"fa-caret-down\");\n                                //#endregion\n\n                                //#region Collapse/Expand\n                                let childrenRows = this.getChildrenGroupRows(e.currentTarget.parentElement! as HTMLElement, this._divBody);\n                                childrenRows.allRows.vrPushRange(this.getChildrenGroupRows(e.currentTarget.parentElement! as HTMLElement, this._divBodyLocked).allRows)\n\n                                for (let childRow of childrenRows.allRows)\n                                {\n                                    if (collapse)\n                                        puma(childRow).hide();\n                                    else\n                                    {\n                                        puma(childRow).show();\n\n                                        //#region Subgroup icon\n                                        let childrenIcon = puma(childRow).find(\"i.grid_tdGroupByCollapse\");\n                                        childrenIcon.removeClass(IconClassicLight.CaretRight);\n                                        childrenIcon.addClass(IconClassicLight.CaretDown);\n                                        //#endregion\n                                    }\n                                }\n                                //#endregion\n\n                                //#region Icon\n                                let indexIcon = puma(e.currentTarget.parentElement!).index() + 1;\n                                let iconNormal = puma(puma(this._divBody).find(\"tr:nth-child(\" + indexIcon + \")\").find(\"i\")[0]);\n                                if (collapse)\n                                {\n                                    iconNormal.removeClass(IconClassicLight.CaretDown);\n                                    iconNormal.addClass(IconClassicLight.CaretRight);\n\n                                    if (options.lockable)\n                                    {\n                                        let iconLocked = puma(puma(this._divBodyLocked).find(\"tr:nth-child(\" + indexIcon + \")\").find(\"i\")[0]);\n                                        iconLocked.removeClass(IconClassicLight.CaretDown);\n                                        iconLocked.addClass(IconClassicLight.CaretRight);\n                                    }\n                                }\n                                else\n                                {\n                                    iconNormal.removeClass(IconClassicLight.CaretRight);\n                                    iconNormal.addClass(IconClassicLight.CaretDown);\n\n                                    if (options.lockable)\n                                    {\n                                        let iconLocked = puma(puma(this._divBodyLocked).find(\"tr:nth-child(\" + indexIcon + \")\").find(\"i\")[0]);\n                                        iconLocked.removeClass(IconClassicLight.CaretRight);\n                                        iconLocked.addClass(IconClassicLight.CaretDown);\n                                    }\n                                }\n                                //#endregion\n\n                                if (options.onGroupExpandCollapse != null || groupByField.onExpandCollapse != null)\n                                {\n                                    let expandCollapseEvent = new GridGroupExpandCollapseEvent();\n                                    expandCollapseEvent.sender = this;\n                                    expandCollapseEvent.groupByField = groupByField.field;\n                                    expandCollapseEvent.groupByDisplayField = groupByField.displayField;\n                                    expandCollapseEvent.collapse = collapse;\n\n                                    expandCollapseEvent.value = row[groupByField.field];\n                                    if (groupByField.displayField != null)\n                                        expandCollapseEvent.displayValue = row[groupByField.displayField!];\n\n                                    let childrenItems: any[] = [];\n                                    for (let childRow of childrenRows.allRows)\n                                    {\n                                        let dataItemId = puma(childRow).attr(\"dataitemid\");\n                                        let dataItem = this.dataSource().find(k => k[options.dataSourceFieldId!] == dataItemId);\n                                        childrenItems.push(dataItem);\n                                    }\n                                    expandCollapseEvent.childrenItems = childrenItems;\n                                    expandCollapseEvent.childrenRows = childrenRows.allRows;\n\n                                    if (options.onGroupExpandCollapse != null)\n                                        options.onGroupExpandCollapse(expandCollapseEvent);\n                                    else if (groupByField.onExpandCollapse != null)\n                                        groupByField.onExpandCollapse!(expandCollapseEvent);\n                                }\n                            });\n                            //#endregion\n\n                            //#region Edit click\n                            puma(trGroupBy).find(\".grid_groupByEdit\").add(puma(trGroupByLocked).find(\".grid_groupByEdit\")).click((e: any) =>\n                            {\n                                if (options.onGroupEditClick != null || groupByField.onEditClick != null)\n                                {\n                                    let editClickEvent = new GridGroupEditClickEvent();\n                                    editClickEvent.sender = this;\n                                    editClickEvent.groupByField = groupByField.field;\n                                    editClickEvent.groupByDisplayField = groupByField.displayField;\n\n                                    editClickEvent.value = row[groupByField.field];\n                                    if (groupByField.displayField != null)\n                                        editClickEvent.displayValue = row[groupByField.displayField!];\n\n                                    let childrenRows = this.getChildrenGroupRows(e.currentTarget.parentElement! as HTMLElement, this._divBody)\n                                    let childrenItems: any[] = [];\n                                    for (let childRow of childrenRows.allRows)\n                                    {\n                                        let dataItemId = puma(childRow).attr(\"dataitemid\");\n                                        let dataItem = this.dataSource().find(k => k[options.dataSourceFieldId!] == dataItemId);\n                                        childrenItems.push(dataItem);\n                                    }\n                                    editClickEvent.childrenItems = childrenItems;\n                                    editClickEvent.childrenRows = childrenRows.allRows;\n                                    editClickEvent.dataItem = row;\n\n                                    if (options.onGroupEditClick != null)\n                                        options.onGroupEditClick(editClickEvent);\n                                    else if (groupByField.onEditClick != null)\n                                        groupByField.onEditClick!(editClickEvent);\n                                }\n                            });\n                            //#endregion\n                        }\n                        groupByIndex++;\n                    }\n                }\n            }\n            //#endregion\n\n            let tr = document.createElement(\"tr\");\n            tr.id = rowId;\n            tr.classList.add(\"p-grid-body\");\n            tr.setAttribute(\"dataItemId\", dataItemId)\n            tr.setAttribute(\"row\", String(i));\n\n            let trLocked = null;\n            if (options.lockable)\n            {\n                trLocked = document.createElement(\"tr\");\n                trLocked.id = rowId;\n                trLocked.classList.add(\"p-grid-body\");\n                trLocked.setAttribute(\"dataItemId\", dataItemId)\n                trLocked.setAttribute(\"row\", String(i))\n            }\n\n            //#region Checkbox column\n            if (options.checkboxes != GridCheckboxModeEnum.None)\n            {\n                let tdCheckbox = document.createElement(\"td\");\n                tdCheckbox.style.cssText += \"text-align: center; width: 20px;\";\n                tdCheckbox.classList.add(\"vrGridTdCheckboxColumn\");\n                tdCheckbox.setAttribute(\"field\", \"vrGridCheckboxColumn\");\n\n                let textHTML = \"<input dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_CheckboxColumn' class='vrCheckBox vr-checkbox-column' type='checkbox'></input>\"\n                    + \"<label style='display: none;' class='vrLabel vrCheckBoxLabel vr-checkboxColumn-label' for='\" + rowId + \"_CheckboxColumn'></label>\";\n                tdCheckbox.innerHTML = textHTML;\n\n                if (this.thereAreLockedColumns())\n                    trLocked!.appendChild(tdCheckbox);\n                else\n                    tr.appendChild(tdCheckbox);\n\n                tdCheckbox.onclick = ((e) =>\n                {\n                    if (e.shiftKey && options.checkboxes == GridCheckboxModeEnum.MultiCheck)\n                        this.selectRangeShiftKey(tdCheckbox);\n                    else\n                        this.selectRowInternal(dataItemId, true, { fromCheckboxInput: true, fromGroupOrRow: false, fromMethodCall: false, shiftKey: false });\n                });\n            }\n            //#endregion\n\n            //#region Columns\n            let k = (options.checkboxes != GridCheckboxModeEnum.None) ? 2 : 1;\n            if (options.groupable! || options.groupBy != null)\n                k += options.columns!.length;\n\n            for (let column of options.columns!)\n            {\n                let td = document.createElement(\"td\");\n\n                let tdLocked = null;\n                if (options.lockable)\n                    tdLocked = document.createElement(\"td\");\n\n                let field = column.field;\n                td.setAttribute(\"field\", field);\n                if (options.lockable) tdLocked!.setAttribute(\"field\", field);\n\n                //#region Width\n                let width = (column.width != null) ? (column.width) : ((column.fitSpace == true) ? this._fitSpaceColumnPercentage + \"%\" : (column.type == GridColumnTypeEnum.EditButton) ? 32 : 100);\n                td.style.cssText += \"width: \" + width + \"px;\";\n                if (options.lockable) tdLocked!.style.cssText += \"width: \" + width + \"px;\";\n\n                if (column.fitSpace == true)\n                {\n                    td.setAttribute(\"fitspace\", \"true\");\n                    if (options.lockable)\n                        tdLocked!.setAttribute(\"fitSpace\", \"true\");\n                }\n                //#endregion\n\n                //#region Hidden\n                if (column.hidden === true)\n                {\n                    td.style.display = \"none\";\n                    tr.appendChild(td);\n\n                    if (options.lockable)\n                    {\n                        tdLocked!.style.display = \"none\"\n                        trLocked!.appendChild(tdLocked!);\n                    }\n\n                    k++;\n                    continue;\n                }\n                //#endregion\n\n                if (!options.multilineRows)\n                {\n                    td.classList.add(\"grid_singleLineGridRow\");\n                    if (options.lockable) tdLocked!.classList.add(\"grid_singleLineGridRow\");\n                }\n\n                //#region Cell\n                let textAlign = GridAlignEnum.Left;\n                let textHTML = (row[field] == null) ? \"\" : String(row[field]);\n\n                //#region Type\n                switch (column.type)\n                {\n                    //#region Password\n                    case GridColumnTypeEnum.PasswordViewable:\n                        {\n                            let result = \"\";\n                            for (let char of textHTML)\n                                result += \"*\";\n\n                            textHTML = result;\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Number, Currency, Percentage & Duration\n                    case GridColumnTypeEnum.Number:\n                    case GridColumnTypeEnum.Currency:\n                    case GridColumnTypeEnum.Percentage:\n                        {\n                            textAlign = GridAlignEnum.Right;\n                            let decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 0;\n                            if (column.type == GridColumnTypeEnum.Currency || column.type == GridColumnTypeEnum.Percentage)\n                                decimalDigits = (column.decimalDigits != null) ? column.decimalDigits : 2;\n\n                            if (column.cellSettings == null) column.cellSettings = new GridCellSettings();\n                            if (column.cellSettings.zeroIfNull == null) column.cellSettings.zeroIfNull = false;\n\n                            if (textHTML === \"\" && column.cellSettings.zeroIfNull === false)\n                                textHTML = \"\";\n                            else\n                            {\n                                let valueFormatted = this.formatValue(Number(textHTML), column.type, decimalDigits, column.roundingSettings, undefined, column.milesSeparator);\n                                textHTML = valueFormatted;\n                            }\n                        }\n                        break;\n                    case GridColumnTypeEnum.Duration:\n                        {\n                            textAlign = GridAlignEnum.Center;\n                            if (column.cellSettings == null) column.cellSettings = new GridCellSettings();\n                            if (column.cellSettings.zeroIfNull == null) column.cellSettings.zeroIfNull = false;\n\n                            if (textHTML === \"\" && column.cellSettings.zeroIfNull === false)\n                                textHTML = \"\";\n                            else\n                            {\n                                let valueFormatted = this.formatValue(Number(textHTML), column.type, undefined, undefined, undefined, column.milesSeparator);\n                                textHTML = valueFormatted;\n                            }\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Date, Time, DateTime\n                    case GridColumnTypeEnum.Date:\n                    case GridColumnTypeEnum.DateTime:\n                    case GridColumnTypeEnum.Time:\n                    case GridColumnTypeEnum.LongDate:\n                    case GridColumnTypeEnum.LongDateTime:\n                    case GridColumnTypeEnum.LongWeekDate:\n                    case GridColumnTypeEnum.ShortWeekDate:\n                        {\n                            textAlign = GridAlignEnum.Center;\n                            let date = new Date(textHTML);\n                            let valueFormatted = this.formatValue(date, column.type, undefined, undefined, column.showSeconds);\n                            textHTML = valueFormatted;\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Checkbox\n                    case GridColumnTypeEnum.Checkbox:\n                    case GridColumnTypeEnum.Boolean:\n                        {\n                            let checked = (row[field] != null && Boolean(row[field]) == true) ? \"checked='checked'\" : \"\";\n\n                            textAlign = GridAlignEnum.Center;\n                            textHTML = \"<input \" + checked + \" disabled='disabled' dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_\" + column.field + \"' class='vrCheckBox' type='checkbox'></input>\"\n                                + \"<label class='vrLabel vrCheckBoxLabel' for='\" + rowId + \"_\" + column.field + \"'></label>\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Button\n                    case GridColumnTypeEnum.Button:\n                    case GridColumnTypeEnum.EditButton:\n                        {\n                            let buttonSettings = null;\n                            textAlign = GridAlignEnum.Center;\n\n                            let className = \"btn_\" + column.field + \"_\" + rowId;\n\n                            //#region Button settings\n                            if (column.buttonSettings != null && (dataItem[options.dataSourceFieldId!] != null))\n                            {\n                                let templateEvent = new GridTemplateEvent();\n                                templateEvent.dataItem = dataItem;\n                                templateEvent.className = className;\n                                templateEvent.element = td;\n                                templateEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                                templateEvent.field = column.field;\n                                templateEvent.sender = this;\n                                buttonSettings = column.buttonSettings(templateEvent);\n                            }\n\n                            if (buttonSettings == null)\n                            {\n                                buttonSettings = new GridButtonSettings();\n                                buttonSettings.text = \"\";\n                                buttonSettings.value = column.field;\n                            }\n                            //#endregion\n\n                            let customCss = \"max-width: 100%;\";\n                            let buttonClass = \"vrButton grid-button\";\n\n                            //#region Color\n                            if (buttonSettings.isPrimaryButton == true)\n                                customCss += \"color: #FFF; background-color: #51B3E1;\";\n\n                            if (buttonSettings.color != null)\n                                customCss += \"color: \" + buttonSettings.color + \";\";\n                            if (buttonSettings.backgroundColor != null)\n                                customCss += \"background-color: \" + buttonSettings.backgroundColor + \";\";\n                            //#endregion\n\n                            //#region Custom CSS & Class\n                            if (buttonSettings.css != null)\n                                customCss += buttonSettings.css;\n\n                            if (buttonSettings.class != null)\n                                buttonClass += \" \" + buttonSettings.class;\n                            //#endregion\n\n                            //#region Icon/Image\n                            let iconClass = (column.type == GridColumnTypeEnum.EditButton) ? IconClassicLight.Pencil : \"\";\n                            let spanIcon = \"\";\n                            if (buttonSettings.icon != null)\n                                iconClass = buttonSettings.icon;\n\n                            let imageUrl = \"\";\n                            let spanImage = \"\";\n                            if (buttonSettings.imageUrl != null)\n                                imageUrl = buttonSettings.imageUrl;\n\n                            if (iconClass.length > 0)\n                            {\n                                let marginRight = (buttonSettings.text != null) ? \"margin-right: 5px;\" : \"\";\n                                spanIcon = \"<span style='\" + marginRight + \"'><i class='vrIcon \" + iconClass + \"'></i></span> \";\n                            }\n                            else if (imageUrl.length > 0)\n                            {\n                                let marginRight = (buttonSettings.text != null) ? \"margin-right: 5px;\" : \"\";\n                                spanImage = \"<img style='\" + marginRight + \"' src='\" + imageUrl + \"' />\";\n                            }\n                            //#endregion\n\n                            //#region Tooltip\n                            let tooltip = (column.type == GridColumnTypeEnum.EditButton) ? \"Premi per modificare la riga\" : \"\";\n                            if (buttonSettings.tooltip != null)\n                                tooltip = buttonSettings.tooltip;\n                            //#endregion\n\n                            //#region Width\n                            if (column.type == GridColumnTypeEnum.EditButton)\n                                customCss += \"width: 29px;\";\n                            //#endregion\n\n                            //#region Enabled\n                            let disabled = \"\";\n                            if (buttonSettings.enabled === false)\n                            {\n                                disabled = \" disabled='disabled' \";\n                                customCss += \"opacity: 0.5; cursor: default;\";\n                            }\n                            //#endregion\n\n                            this._cellButtons.set(className, { GridControlsSettings: buttonSettings, columnType: column.type });\n\n                            let buttonText = (buttonSettings.text != null) ? buttonSettings.text : \"\";\n                            textHTML = \"<button title='\" + tooltip + \"' style='\" + customCss + \"' class='\" + buttonClass + \" \" + className + \"' dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_\" + column.field + \"'\" + disabled + \">\" + spanIcon + spanImage + buttonText + \"</button>\";\n\n                            if (buttonSettings.visible === false)\n                                textHTML = \"\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Custom\n                    case GridColumnTypeEnum.Custom:\n                        {\n                            let customSettings = null;\n                            textAlign = GridAlignEnum.Center;\n\n                            let className = \"btn_\" + column.field + \"_\" + rowId;\n\n                            //#region Custom settings\n                            if (column.customSettings != null && (dataItem[options.dataSourceFieldId!] != null))\n                            {\n                                let templateEvent = new GridTemplateEvent();\n                                templateEvent.dataItem = dataItem;\n                                templateEvent.className = className;\n                                templateEvent.element = td;\n                                templateEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                                templateEvent.field = column.field;\n                                templateEvent.sender = this;\n                                customSettings = column.customSettings(templateEvent);\n                            }\n\n                            if (customSettings == null)\n                            {\n                                customSettings = new GridCustomSettings();\n                                customSettings.value = column.field;\n                                customSettings.template = \"<div></div>\";\n                            }\n\n                            let customCss = \"\";\n                            if (customSettings.css != null)\n                                customCss += customSettings.css;\n                            //#endregion\n\n                            this._cellCustoms.set(className, { GridControlsSettings: customSettings, columnType: column.type });\n                            if (customSettings.template !== \"\")\n                                textHTML = \"<div style='\" + customCss + \"'>\" + customSettings.template + \"</div>\";\n\n                            if (customSettings.visible === false)\n                                textHTML = \"\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Icon\n                    case GridColumnTypeEnum.Icon:\n                        {\n                            let iconSettings = null;\n                            textAlign = GridAlignEnum.Center;\n\n                            let className = \"btn_\" + column.field + \"_\" + rowId;\n\n                            //#region Icon settings\n                            if (column.iconSettings != null && (dataItem[options.dataSourceFieldId!] != null))\n                            {\n                                let templateEvent = new GridTemplateEvent();\n                                templateEvent.dataItem = dataItem;\n                                templateEvent.className = className;\n                                templateEvent.element = td;\n                                templateEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                                templateEvent.field = column.field;\n                                templateEvent.sender = this;\n                                iconSettings = column.iconSettings(templateEvent);\n                            }\n\n                            if (iconSettings == null)\n                            {\n                                iconSettings = new GridIconSettings();\n                                iconSettings.value = column.field;\n                            }\n                            //#endregion\n\n                            let customCss = \"\";\n                            let iconCustomClass = \"\";\n\n                            //#region Color\n                            if (iconSettings.color != null)\n                                customCss += \"color: \" + iconSettings.color + \";\";\n                            //#endregion\n\n                            //#region Custom CSS & Class\n                            if (iconSettings.css != null)\n                                customCss += iconSettings.css;\n\n                            if (iconSettings.class != null)\n                                iconCustomClass += \" \" + iconSettings.class;\n                            //#endregion\n\n                            //#region Tooltip\n                            let tooltip = \"\";\n                            if (iconSettings.tooltip != null)\n                                tooltip = iconSettings.tooltip;\n                            //#endregion\n\n                            //#region Click\n                            if (iconSettings.onClick != null && iconSettings.enabled !== false)\n                                customCss += \"cursor: pointer;\";\n                            //#endregion\n\n                            //#region Icon or Image url\n                            let icon = \"\";\n                            let imageUrl = \"\";\n                            if (iconSettings.icon != null)\n                                icon = \"<i class='vrIcon \" + iconSettings.icon + \"'></i>\";\n                            else if (iconSettings.imageUrl != null)\n                                imageUrl = \"<img src='\" + iconSettings.imageUrl + \"' />\";\n                            else\n                                icon = \"<i class='vrIcon \" + row[field] + \"'></i>\";\n                            //#endregion\n\n                            this._cellIcons.set(className, { GridControlsSettings: iconSettings, columnType: column.type });\n\n                            textHTML = \"<span title='\" + tooltip + \"' style='\" + customCss + \"' class='\" + iconCustomClass + \" \" + className + \"' dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_\" + column.field + \"'>\" + icon + imageUrl + \"</span>\";\n\n                            if (iconSettings.visible === false)\n                                textHTML = \"\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Image\n                    case GridColumnTypeEnum.Image:\n                        {\n                            let imageSettings = null;\n                            textAlign = GridAlignEnum.Center;\n\n                            let className = \"btn_\" + column.field + \"_\" + rowId;\n\n                            //#region Image settings\n                            if (column.imageSettings != null && (dataItem[options.dataSourceFieldId!] != null))\n                            {\n                                let templateEvent = new GridTemplateEvent();\n                                templateEvent.dataItem = dataItem;\n                                templateEvent.className = className;\n                                templateEvent.element = td;\n                                templateEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                                templateEvent.field = column.field;\n                                templateEvent.sender = this;\n                                imageSettings = column.imageSettings(templateEvent);\n                            }\n\n                            if (imageSettings == null)\n                            {\n                                imageSettings = new GridImageSettings();\n                                imageSettings.value = column.field;\n                            }\n                            //#endregion\n\n                            let customCss = \"\";\n                            let imageCustomClass = \"\";\n\n                            //#region Custom CSS & Class\n                            if (imageSettings.css != null)\n                                customCss += imageSettings.css;\n\n                            if (imageSettings.class != null)\n                                imageCustomClass += \" \" + imageSettings.class;\n                            //#endregion\n\n                            //#region Tooltip\n                            let tooltip = \"\";\n                            if (imageSettings.tooltip != null)\n                                tooltip = imageSettings.tooltip;\n                            //#endregion\n\n                            //#region Click\n                            if (imageSettings.onClick != null && imageSettings.enabled !== false)\n                                customCss += \"cursor: pointer;\";\n                            //#endregion\n\n                            //#region Icon or Image url\n                            let imageUrl = textHTML;\n                            if (imageSettings.imageUrl != null)\n                                imageUrl = imageSettings.imageUrl;\n                            //#endregion\n\n                            this._cellImages.set(className, { GridControlsSettings: imageSettings, columnType: column.type });\n\n                            let url = imageUrl;\n                            if (imageSettings.base64Bytes != null)\n                                url = \"data:image/png;base64,\" + imageSettings.base64Bytes;\n\n                            textHTML = \"<img title='\" + tooltip + \"' style='\" + customCss + \"' class='\" + imageCustomClass + \" \" + className + \"' dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_\" + column.field + \"' src='\" + url + \"' />\";\n\n                            if (imageSettings.visible === false)\n                                textHTML = \"\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Label\n                    case GridColumnTypeEnum.Label:\n                        {\n                            let labelSettings = null;\n                            textAlign = GridAlignEnum.Left;\n\n                            let className = \"lbl_\" + column.field + \"_\" + rowId;\n\n                            //#region Label settings\n                            if (column.labelSettings != null && (dataItem[options.dataSourceFieldId!] != null))\n                            {\n                                let templateEvent = new GridTemplateEvent();\n                                templateEvent.dataItem = dataItem;\n                                templateEvent.className = className;\n                                templateEvent.element = td;\n                                templateEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                                templateEvent.field = column.field;\n                                templateEvent.sender = this;\n                                labelSettings = column.labelSettings(templateEvent);\n                            }\n\n                            if (labelSettings == null)\n                            {\n                                labelSettings = new GridLabelSettings();\n                                labelSettings.value = column.field;\n                            }\n                            //#endregion\n\n                            let customCss = \"\";\n\n                            //#region Color\n                            if (labelSettings.color != null)\n                                customCss += \"color: \" + labelSettings.color + \";\";\n                            //#endregion\n\n                            //#region Custom CSS & Class\n                            if (labelSettings.css != null)\n                                customCss += labelSettings.css;\n                            //#endregion\n\n                            //#region Tooltip\n                            let tooltip = \"\";\n                            if (labelSettings.tooltip != null)\n                                tooltip = labelSettings.tooltip;\n                            //#endregion\n\n                            //#region Click\n                            if (labelSettings.onClick != null && labelSettings.enabled !== false)\n                                customCss += \"cursor: pointer;\";\n                            //#endregion\n\n                            //#region Bold\n                            if (labelSettings.bold === true)\n                                customCss += \"font-weight: 500;\";\n                            //#endregion\n\n                            //#region Underline mode\n                            let underlineOnFocus = \"\";\n                            if (labelSettings.underlineMode != null)\n                            {\n                                switch (labelSettings.underlineMode)\n                                {\n                                    case GridLabelUnderlineMode.Always: customCss += \"text-decoration: underline\"; break;\n                                    case GridLabelUnderlineMode.None: customCss += \"text-decoration: none\"; break;\n                                    case GridLabelUnderlineMode.OnFocus: underlineOnFocus = \"grid_labelhover\"; break;\n                                }\n                            }\n                            //#endregion\n\n                            //#region NoBr\n                            if (labelSettings.noBr !== false)\n                            {\n                                if (labelSettings.noBr === true)\n                                {\n                                    customCss += \"white-space: nowrap; overflow:hidden; margin-bottom: -6px; text-overflow: ellipsis; display: inline-block;\";\n                                }\n                                else\n                                    customCss += \"overflow: hidden; display: -webkit-inline-box; -webkit-line-clamp: \" + labelSettings.noBr + \"; -webkit-box-orient: vertical;white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word;\";\n                            }\n                            //#endregion\n\n                            //#region Icon or Image url\n                            let icon = \"\";\n                            if (labelSettings.icon != null)\n                                icon = \"<i class='vrIcon \" + labelSettings.icon + \"'></i> \";\n                            //#endregion\n\n                            this._cellLabels.set(className, { GridControlsSettings: labelSettings, columnType: column.type });\n\n                            textHTML = icon + \"<label title='\" + tooltip + \"' style='\" + customCss + \"' class='\" + className + \" \" + underlineOnFocus + \"' dataItemId='\" + dataItemId + \"' id='\" + rowId + \"_\" + column.field + \"'>\" + labelSettings.text + \"</label>\";\n\n                            if (labelSettings.visible === false)\n                                textHTML = \"\";\n                        }\n                        break;\n                    //#endregion\n\n                    //#region ComboBox, DropDownList, DropDownTree\n                    case GridColumnTypeEnum.ComboBox:\n                    case GridColumnTypeEnum.DropDownList:\n                    case GridColumnTypeEnum.DropDownTree:\n                    case GridColumnTypeEnum.DropDownTreeCheckboxes:\n                        {\n                            textAlign = GridAlignEnum.Left;\n                            if (column.displayField != null)\n                                textHTML = row[column.displayField];\n                        }\n                        break;\n                    //#endregion\n\n                    //#region Color\n                    case GridColumnTypeEnum.Color:\n                        {\n                            textAlign = GridAlignEnum.Center;\n                            if (textHTML.vrIsNotNullOrEmpty())\n                                textHTML = \"<i class='\" + IconClassicSolid.Circle + \"' style='height: 20px; color: \" + textHTML + \"; display: inline-flex; align-items: center;'></i>\";\n                        }\n                        break;\n                    //#endregion\n                }\n                //#endregion\n\n                //#region Text\n                if (row[\"defaultRow\"] === true)\n                {\n                    textHTML = \"\";\n                    if (tr.getAttribute(\"defaultrow\") == null)\n                        tr.setAttribute(\"defaultrow\", \"defaultrow\");\n                }\n\n                if (td.innerHTML === \"\")\n                    td.innerHTML = textHTML;\n\n                if (options.lockable && tdLocked!.innerHTML === \"\")\n                    tdLocked!.innerHTML = textHTML;\n                //#endregion\n\n                //#region Color\n                if (column.cellSettings != null)\n                {\n                    if (column.cellSettings.backgroundColor != null)\n                    {\n                        td.style.cssText += \"background-color: \" + column.cellSettings.backgroundColor + \";\";\n                        if (options.lockable) tdLocked!.style.cssText += \"background-color: \" + column.cellSettings.backgroundColor + \";\";\n                    }\n\n                    if (column.cellSettings.color != null)\n                    {\n                        td.style.cssText += \"color: \" + column.cellSettings.color + \";\";\n                        if (options.lockable) tdLocked!.style.cssText += \"color: \" + column.cellSettings.color + \";\";\n                    }\n\n                    if (column.cellSettings.css != null)\n                    {\n                        td.style.cssText += column.cellSettings.css + \";\";\n                        if (options.lockable) tdLocked!.style.cssText += column.cellSettings.css + \";\";\n                    }\n                }\n\n                if (options.rowColorProperty != null && row[options.rowColorProperty] != null && row[options.rowColorProperty] !== \"\")\n                {\n                    td.style.cssText += \"background-color: \" + row[options.rowColorProperty] + \";\";\n                    if (options.lockable) tdLocked!.style.cssText += \"background-color: \" + row[options.rowColorProperty] + \";\";\n                }\n\n                if (options.rowTextColorProperty != null && row[options.rowTextColorProperty] != null && row[options.rowTextColorProperty] !== \"\")\n                {\n                    td.style.cssText += \"color: \" + row[options.rowTextColorProperty] + \";\";\n                    if (options.lockable) tdLocked!.style.cssText += \"color: \" + row[options.rowTextColorProperty] + \";\";\n                }\n                //#endregion\n\n                //#region Text align\n                if (column.cellSettings != null)\n                    textAlign = (column.cellSettings.textAlign != null) ? column.cellSettings.textAlign : textAlign;\n\n                if (textAlign != GridAlignEnum.Left)\n                {\n                    td.style.cssText += \"text-align: \" + textAlign + \";\";\n                    if (options.lockable) tdLocked!.style.cssText += \"text-align: \" + textAlign + \";\";\n                }\n                //#endregion\n\n                //#region Tooltip\n                if (options.tooltip === true && column.type != GridColumnTypeEnum.Custom)\n                {\n                    let tooltip = \"\";\n                    if (column.cellSettings != null)\n                    {\n                        if (column.cellSettings.tooltip === true)\n                            tooltip = (column.title == null) ? \"\" : column.title;\n                        else if (typeof (column.cellSettings.tooltip) == \"string\")\n                            tooltip = column.cellSettings.tooltip;\n                        else if (typeof (column.cellSettings.tooltip) == \"function\")\n                        {\n                            let tooltipEvent = new GridTooltipEvent();\n                            tooltipEvent.dataItem = dataItem;\n                            tooltipEvent.element = td;\n                            tooltipEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                            tooltip = column.cellSettings.tooltip(tooltipEvent);\n                        }\n                    }\n\n                    if (tooltip == null || tooltip.length == 0)\n                        tooltip = textHTML;\n\n                    if (tooltip != null && tooltip.length > 0)\n                    {\n                        td.setAttribute(\"title\", puma(\"<span>\" + tooltip + \"</span>\").text())\n                        if (options.lockable) tdLocked!.setAttribute(\"title\", puma(\"<span>\" + tooltip + \"</span>\").text())\n                    }\n                }\n                //#endregion\n\n                //#region Bold\n                if (column.bold === true)\n                {\n                    td.style.cssText += \"font-weight: 600;\";\n                    if (options.lockable) tdLocked!.style.cssText += \"font-weight: 600;\";\n                }\n                //#endregion\n\n                //#endregion\n\n                // Append td\n                if (options.lockable && column.locked)\n                    trLocked!.appendChild(tdLocked!)\n                else\n                    tr.appendChild(td);\n\n                k++;\n            }\n            //#endregion\n\n            //#region GroupBy\n            if (options.groupable! || options.groupBy != null)\n            {\n                for (let i = options.columns!.length - 1; i >= 0; i--)\n                {\n                    let column = options.columns![i];\n\n                    let display = \"\";\n                    if (options.groupBy == null || (options.groupBy as GridGroupBySettings).fields == null || ((options.groupBy as GridGroupBySettings).fields != null && !((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(column.field)))\n                        display = \"display: none;\";\n\n                    let tdGroupBy = document.createElement(\"td\");\n                    tdGroupBy.style.cssText += display + \"; width: 16px;\";\n                    tdGroupBy.classList.add(\"groupBy\" + column.field);\n                    tr.insertBefore(tdGroupBy, tr.firstChild);\n\n                    if (options.lockable)\n                    {\n                        let tdGroupByLocked = document.createElement(\"td\");\n                        tdGroupByLocked.style.cssText += display + \"; width: 16px;\";\n                        tdGroupByLocked.classList.add(\"groupBy\" + column.field);\n                        trLocked!.insertBefore(tdGroupByLocked, trLocked!.firstChild);\n                    }\n                }\n            }\n            //#endregion\n\n            if (options.rowHeight != 27)\n                tr.style.cssText += \"height: \" + options.rowHeight! + \"px;\";\n\n            //#region Select row\n            if (options.checkboxes != GridCheckboxModeEnum.None)\n            {\n                puma(tr).add(puma(trLocked)).off(\"click\");\n                puma(tr).add(puma(trLocked)).click((e: any) =>\n                {\n                    if (e.shiftKey && options.checkboxes == GridCheckboxModeEnum.MultiCheck)\n                        this.selectRangeShiftKey(e.target);\n                    else\n                    {\n                        if (!puma(e.target).is(\"input\") && !puma(e.target).hasClass(\"vrButton\") && !puma(e.target).hasClass(\"vrIcon\"))\n                            this.selectRowInternal(dataItemId, true, { fromCheckboxInput: false, fromGroupOrRow: true, fromMethodCall: false, shiftKey: false });\n                    }\n                });\n            }\n            else\n            {\n                puma(tr).add(puma(trLocked)).off(\"click\");\n                puma(tr).add(puma(trLocked)).click((e: any) =>\n                {\n                    //#region Event\n                    if (options.onSelectRow != null)\n                    {\n                        let selectRowEvent = new GridSelectRowEvent();\n                        selectRowEvent.sender = this;\n                        selectRowEvent.rowElement = e.currentTarget;\n                        selectRowEvent.dataItem = dataItem;\n                        selectRowEvent.checked = true;\n                        selectRowEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n                        options.onSelectRow(selectRowEvent);\n                    }\n                    //#endregion\n                });\n            }\n            //#endregion\n\n            //#region OnRowDataBound\n            if (options.onRowDataBound != null)\n            {\n                let onRowDataBoundEvent = new GridOnRowDataBoundEvent();\n                onRowDataBoundEvent.sender = this;\n                onRowDataBoundEvent.rowElement = tr;\n\n                let dataItem: any = {};\n                for (let property of Object.getOwnPropertyNames(row))\n                    dataItem[property] = row[property];\n\n                onRowDataBoundEvent.dataItem = dataItem;\n                onRowDataBoundEvent.realDataItem = row;\n                onRowDataBoundEvent.empty = (dataItem[options.dataSourceFieldId!] == null);\n\n                let backgroundColor = options.onRowDataBound(onRowDataBoundEvent);\n                if (backgroundColor != null && backgroundColor.length > 0)\n                {\n                    Array.from(tr.getElementsByTagName(\"td\")).forEach((td) => td.style.cssText += \"background-color: \" + backgroundColor + \";\");\n                    if (options.lockable)\n                        Array.from(trLocked!.getElementsByTagName(\"td\")).forEach((td) => td.style.cssText += \"background-color: \" + backgroundColor + \";\");\n                }\n            }\n            //#endregion\n\n            // Append tr\n            rowFragment.appendChild(tr);\n            if (options.lockable)\n                rowFragmentLocked.appendChild(trLocked!);\n\n            i++;\n        }\n\n        tbody.appendChild(rowFragment);\n        if (options.lockable)\n            tbodyLocked!.appendChild(rowFragmentLocked);\n        //#endregion\n\n        //#region OnDataBound\n        if (options.onDataBound != null && triggerDataBound)\n        {\n            let onDataBoundEvent = new GridOnDataBoundEvent();\n            onDataBoundEvent.sender = this;\n            options.onDataBound(onDataBoundEvent);\n        }\n        //#endregion\n\n        this._actualPageSize = options.pageSize!;\n        window.setTimeout(() =>\n        {\n            //#region Footer\n            if (options.footer !== false)\n            {\n                let divPagination = document.getElementById(this._elementId + \"_footerPagination\")!;\n                divPagination.innerHTML = \"\";\n                let footer = options.footer as GridFooterSettings;\n\n                let maxLength = (options.serverBinding !== false) ? this._responseForServerBinding[(options.serverBinding! as GridServerBindSettings).itemCountPropertyName!] : dataItems.length;\n                if (options.pageSize! < maxLength)\n                {\n                    let pageSelected = this.pageSelected();\n                    let numberOfPages = Math.trunc(maxLength / Number(options.pageSize!));\n                    if (maxLength % Number(options.pageSize!) > 0)\n                        numberOfPages += 1;\n\n                    //#region Pages\n                    if (footer.showPagination && options.pageSize! != 0)\n                    {\n                        let spanPagination = document.createElement(\"span\");\n                        spanPagination.id = this._elementId + \"_divPagination\";\n                        spanPagination.classList.add(\"p-grid-pagination\");\n                        divPagination.appendChild(spanPagination);\n\n                        //#region Previous buttons\n                        createButton(\n                            {\n                                icon: IconClassicLight.Backward,\n                                css: \"border-left: none; border-top-left-radius: 5px; border-bottom-left-radius: 5px;\",\n                                onClick: (e) =>\n                                {\n                                    this.pageSelected(1);\n                                }\n                            }, spanPagination);\n\n                        createButton(\n                            {\n                                icon: IconClassicLight.BackwardStep,\n                                onClick: (e) =>\n                                {\n                                    let pageToSelect = this.pageSelected() - 1;\n                                    if (pageToSelect < 1)\n                                        pageToSelect = 1;\n\n                                    this.pageSelected(pageToSelect);\n                                }\n                            }, spanPagination);\n                        //#endregion\n\n                        //#region Index\n                        let maxVisiblePages = (options.footer! as GridFooterSettings).maxVisiblePages!;\n                        let startingIndex = 1;\n                        if (pageSelected % maxVisiblePages == 0)\n                            startingIndex = (((pageSelected / maxVisiblePages) - 1) * maxVisiblePages) + 1;\n                        else\n                            startingIndex = (Math.trunc(pageSelected / maxVisiblePages) * maxVisiblePages) + 1;\n\n                        let endIndex = 0;\n                        let noMore = false;\n                        if (numberOfPages <= maxVisiblePages)\n                        {\n                            endIndex = startingIndex + numberOfPages;\n                            noMore = true;\n                        }\n                        else\n                            endIndex = startingIndex + maxVisiblePages;\n\n                        if (endIndex >= (numberOfPages + 1))\n                        {\n                            endIndex = (numberOfPages + 1);\n                            noMore = true;\n                        }\n                        //#endregion\n\n                        //#region Page numbers\n                        if (startingIndex > 1)\n                        {\n                            let button = document.createElement(\"button\");\n                            button.id = this._elementId + \"_btnPage_\" + (startingIndex - 1);\n                            button.innerHTML = \"...\";\n                            button.onclick = (e) => \n                            {\n                                this.pageSelected(startingIndex - 1);\n                                return false;\n                            }\n                            spanPagination.appendChild(button);\n                        }\n\n                        let buttonsFragment = document.createDocumentFragment();\n                        for (let i = startingIndex; i <= endIndex; i++)\n                        {\n                            if (i == endIndex && noMore)\n                                break;\n\n                            let button = document.createElement(\"button\");\n                            button.id = this._elementId + \"_btnPage_\" + i;\n                            button.style.cssText += \"cursor: pointer;\";\n                            button.innerHTML = (i == endIndex) ? ((startingIndex == endIndex) ? String(i) : \"...\") : String(i);\n                            if (i == pageSelected)\n                                button.classList.add(\"p-grid-pageSelected\");\n\n                            button.onclick = (e) =>\n                            {\n                                this.pageSelected(i);\n                                return false;\n                            };\n                            buttonsFragment.appendChild(button);\n                        }\n                        spanPagination.appendChild(buttonsFragment);\n                        //#endregion\n\n                        //#region Next buttons\n                        createButton(\n                            {\n                                icon: IconClassicLight.ForwardStep,\n                                onClick: (e) =>\n                                {\n                                    let pageToSelect = this.pageSelected() + 1;\n                                    if (pageToSelect > numberOfPages)\n                                        pageToSelect = numberOfPages;\n\n                                    this.pageSelected(pageToSelect);\n                                }\n                            }, spanPagination);\n\n                        createButton(\n                            {\n                                icon: IconClassicLight.Forward,\n                                css: \"border-top-right-radius: 5px; border-bottom-right-radius: 5px;\",\n                                onClick: (e) =>\n                                {\n                                    this.pageSelected(numberOfPages);\n                                }\n                            }, spanPagination);\n                        //#endregion\n                    }\n                    //#endregion\n\n                    //#region Total elements\n                    if (footer.totalElements)\n                    {\n                        let spanTotalElements = document.createElement(\"span\");\n                        spanTotalElements.id = this._elementId + \"TotalsLabel\";\n                        spanTotalElements.classList.add(\"p-grid-totalElements\");\n                        divPagination.appendChild(spanTotalElements);\n\n                        if (footer.cartSettings != null)\n                            spanTotalElements.style.cssText += \"right: 50px;\";\n\n                        if (typeof (footer.totalElements) == \"boolean\" && footer.totalElements === true)\n                        {\n                            if (options.pageSize == 0)\n                                spanTotalElements.innerHTML = \"Nessun elemento\";\n                            else\n                            {\n                                if (lastIndex > maxLength)\n                                    lastIndex = maxLength;\n\n                                let pagesText = firstIndex + \" - \" + lastIndex + \" di \" + maxLength + ((maxLength == 1) ? \" elemento\" : \" elementi\") +\n                                    \" - \" + pageSelected + \" di \" + numberOfPages + \" pagine\";\n\n                                if (options.serverBinding !== false)\n                                {\n                                    let indexFrom = Number(options.pageSize!) * (this.pageSelected() - 1) + 1;\n                                    let indexTo = Number(options.pageSize!) * (this.pageSelected() - 1) + dataItems.length;\n\n                                    pagesText = indexFrom + \" - \" + indexTo + \" di \" + maxLength + ((maxLength == 1) ? \" elemento\" : \" elementi\") +\n                                        \" - \" + pageSelected + \" di \" + numberOfPages + \" pagine\";\n                                }\n\n                                spanTotalElements.innerHTML = pagesText;\n                            }\n                        }\n                        else\n                        {\n                            let totalElementTemplateEvent = new GridTotalElementTemplateEvent();\n                            totalElementTemplateEvent.dataItems = dataItems;\n                            totalElementTemplateEvent.firstIndex = firstIndex;\n                            totalElementTemplateEvent.lastIndex = lastIndex;\n                            totalElementTemplateEvent.numberOfPages = numberOfPages;\n                            totalElementTemplateEvent.pageSelected = pageSelected;\n                            let totalElementsText = footer.totalElements(totalElementTemplateEvent);\n\n                            spanTotalElements.innerHTML = String(totalElementsText);\n                        }\n                    }\n                    //#endregion                \n                }\n                else\n                {\n                    //#region Clear footer\n                    if (footer.totalElements)\n                    {\n                        let spanTotalElements = document.createElement(\"span\");\n                        spanTotalElements.id = this._elementId + \"TotalsLabel\";\n                        spanTotalElements.classList.add(\"p-grid-totalElements\");\n                        divPagination.appendChild(spanTotalElements);\n\n                        if (footer.cartSettings != null)\n                            spanTotalElements.style.cssText += \"right: 50px;\";\n\n                        let realDataItems = dataItems.filter(k => k[\"defaultRow\"] == null || k[\"defaultRow\"] == false);\n\n                        if (typeof (footer.totalElements) == \"boolean\" && footer.totalElements === true)\n                        {\n                            if (realDataItems.length == 0)\n                                spanTotalElements.innerHTML = \"Nessun elemento\";\n                            else\n                                spanTotalElements.innerHTML = dataItems.length + ((realDataItems.length == 1) ? \" elemento\" : \" elementi\");\n                        }\n                        else\n                        {\n                            let totalElementTemplateEvent = new GridTotalElementTemplateEvent();\n                            totalElementTemplateEvent.dataItems = realDataItems;\n                            totalElementTemplateEvent.firstIndex = firstIndex;\n                            totalElementTemplateEvent.lastIndex = lastIndex;\n                            let totalElementsText = footer.totalElements(totalElementTemplateEvent);\n\n                            spanTotalElements.innerHTML = String(totalElementsText);\n                        }\n                    }\n\n                    if (!footer.showPageSize)\n                    {\n                        let ddlPageSize = ControlManager.get<ComboBox>(this._elementId + \"_ddlPageSize\");\n                        if (ddlPageSize != null)\n                            ddlPageSize.hide();\n                    }\n                    //#endregion\n                }\n            }\n            //#endregion\n\n            //#region Totals\n            if (this._showTotals && options.columns!.filter(k => k.aggregate != null && k.aggregate !== false).length > 0)\n            {\n                if (options.serverBinding !== false)\n                    this.createTotals(this._responseForServerBinding[(options.serverBinding as GridServerBindSettings).totalsPropertyName!], false);\n                else\n                {\n                    let totals = this.getTotals(dataItems);\n                    this.createTotals(totals, false);\n                }\n            }\n            //#endregion\n        })\n\n        //#region Recalculate Width/Height & AdjustTrHeight\n        if (!this._firstDraw)\n            this.recalculateHeightWidth();\n        else\n            window.setTimeout(() => this.recalculateHeightWidth());\n\n        this._firstDraw = true;\n        this.adjustTrHeight();\n        //#endregion\n\n        this._deletedItems = [];\n        this.selectRows(this._rowCheckedIdList, undefined, false);\n\n        //#region GroupBy\n        if (options.groupable! && options.groupBy != null)\n        {\n            //#region Group totals\n            let groupItems: TotalsGroupItem[] = [];\n            let trGroupByList = Array.from(this.element().getElementsByClassName(\"grid_trGroupBy\")) as HTMLElement[];\n            if (options.lockable)\n                trGroupByList.vrPushRange(Array.from(this._elementLocked.getElementsByClassName(\"grid_trGroupByLocked\")))\n\n            for (let tr of trGroupByList)\n            {\n                let children = [];\n                if (tr.classList.contains(\"grid_trGroupByLocked\"))\n                    children = this.getChildrenGroupRows(tr, this._divBodyLocked).children;\n                else\n                    children = this.getChildrenGroupRows(tr, this._divBody).children;\n\n                //#region Children number\n                if (!options.serverBinding)\n                {\n                    let td = tr.getElementsByClassName(\"grid_tdGroupByName\")[0];\n                    let childrenNumber = children.length;\n\n                    if (this.dataSource().length > 1)\n                    {\n                        let divGroupByName = td.getElementsByClassName(\"grid_divGroupByName\")[0];\n                        let spanChildrenNumber = document.createElement(\"span\");\n                        spanChildrenNumber.style.cssText += \"margin-left: 5px;\";\n                        spanChildrenNumber.innerHTML = \"(\" + childrenNumber + \")\";\n                        divGroupByName.appendChild(spanChildrenNumber);\n                    }\n                }\n                //#endregion\n\n                //#region Totals group\n                if (this._showTotals)\n                {\n                    let value = this.fixValueWithoutSpecialChars(tr.getAttribute(\"field\")!);\n\n                    let lastChildren = children.vrLast()!;\n                    if (lastChildren != null)\n                    {\n                        let clonedTr = lastChildren.cloneNode(true) as HTMLElement;\n                        clonedTr.classList.add(\"p-grid-totalsGroup\", this._elementId + \"_totalGroupBy\" + value);\n                        lastChildren.parentNode!.insertBefore(clonedTr, lastChildren.nextSibling);\n                    }\n\n                    let totalsGroupItem = new TotalsGroupItem();\n                    totalsGroupItem.groupValue = value;\n\n                    let childrenItems = [];\n                    for (let child of children)\n                    {\n                        let dataItemId = child.getAttribute(\"dataitemid\")!;\n                        childrenItems.push(dataItems.find(k => k[options.dataSourceFieldId!] == dataItemId));\n                    }\n                    totalsGroupItem.dataItems = childrenItems;\n                    groupItems.push(totalsGroupItem);\n                }\n                //#endregion\n            }\n\n            if (this._showTotals)\n            {\n                if (!(groupItems.length == 0 || groupItems[0].dataItems[0] == null))\n                {\n                    let totalGroupList: any[] = [];\n                    for (let group of groupItems)\n                    {\n                        let totals = this.getTotals(group.dataItems);\n                        totalGroupList.push({ totals: totals, groupValue: group.groupValue });\n                    }\n                    this.createTotals(totalGroupList, true);\n                }\n            }\n            //#endregion\n        }\n        //#endregion\n    }\n\n    private createTotals(data: any[], isGroup: boolean)\n    {\n        if (!isGroup)\n        {\n            //#region Totals global (data is the datasource)\n            let tdFragment = document.createDocumentFragment();\n            let trTotals = this._divTotals.querySelector(\".p-grid-totals\")!;\n            let tdList = trTotals.getElementsByTagName(\"td\");\n            for (let td of Array.from(tdList))\n            {\n                let newTd = td.cloneNode(true) as HTMLElement;\n\n                let field = td.getAttribute(\"field\")!;\n                let total = data.find(k => k.field == field);\n                if (total != null)\n                    this.writeTotals(total, newTd);\n                else\n                    newTd.innerHTML = \"\";\n\n                tdFragment.appendChild(newTd);\n            }\n            trTotals.innerHTML = \"\";\n            trTotals.appendChild(tdFragment);\n            //#endregion\n        }\n        else\n        {\n            //#region Totals group\n            let dataGrouped = data.vrGroupBy(k => k.groupValue);\n            let trTdList: any[] = [];\n            for (let key in dataGrouped)\n            {\n                let totalsGroup = dataGrouped[key];\n                let groupValue = totalsGroup[0].groupValue;\n                let totalsGroupTotals: any[][] = [];\n                for (let totGroup of totalsGroup)\n                    totalsGroupTotals.push(totGroup.totals);\n\n                let trList = this.element().querySelectorAll(\".\" + this._elementId + \"_totalGroupBy\"\n                    + this.fixValueWithoutSpecialChars(groupValue))!;\n\n                let i = 0;\n                for (let tr of Array.from(trList))\n                {\n                    let tdFragment = document.createDocumentFragment();\n                    let tdList = tr.getElementsByTagName(\"td\");\n                    for (let td of Array.from(tdList))\n                    {\n                        let newTd = td.cloneNode(true) as HTMLElement;\n\n                        let field = td.getAttribute(\"field\")!;\n                        let total = totalsGroupTotals[i].find(k => k.field == field);\n                        if (total != null)\n                            this.writeTotals(total, newTd);\n                        else\n                            newTd.innerHTML = \"\";\n\n                        tdFragment.appendChild(newTd);\n                    }\n\n                    trTdList.push({ tr: tr, tdFragment: tdFragment });\n                    tr.innerHTML = \"\";\n                    i++;\n                }\n            }\n\n            for (let trTd of trTdList)\n                trTd.tr.appendChild(trTd.tdFragment);\n            //#endregion\n        }\n    }\n\n    private writeTotals(total: TotalsResult, td: HTMLElement)\n    {\n        if (td != null)\n        {\n            let valueFormatted = this.formatValue(total.total, total.type, total.decimalDigits, total.roundingSettings, undefined, total.milesSeparator);\n            td.innerHTML = valueFormatted;\n            td.setAttribute(\"title\", td.innerText);\n        }\n    }\n\n    private formatValue(value: any, columnType?: GridColumnTypeEnum, decimalDigits?: number,\n        roundingSettings?: NumberFormatRoundingSettings, showSeconds?: boolean, milesSeparator?: boolean)\n    {\n        let options = this.getOptions();\n        if (columnType == null) columnType = GridColumnTypeEnum.String;\n\n        //#region Number, Currency, Percentage\n        if (columnType == GridColumnTypeEnum.Number || columnType == GridColumnTypeEnum.Currency || columnType == GridColumnTypeEnum.Percentage)\n        {\n            if (roundingSettings == null)\n                roundingSettings = options.roundingSettings;\n\n            let formatSettings = new NumberFormatSettings(roundingSettings);\n            formatSettings.useGrouping = milesSeparator;\n            formatSettings.minimumFractionDigits = decimalDigits;\n            formatSettings.maximumFractionDigits = decimalDigits;\n\n            if (roundingSettings != null)\n            {\n                if (roundingSettings.minimumFractionDigits != null) formatSettings.minimumFractionDigits = roundingSettings.minimumFractionDigits;\n                if (roundingSettings.maximumFractionDigits != null) formatSettings.maximumFractionDigits = roundingSettings.maximumFractionDigits\n\n                if (roundingSettings.roundingMode == RoundingModeEnum.None)\n                {\n                    if (roundingSettings.maximumFractionDigits == null)\n                        formatSettings.maximumFractionDigits = 8;\n                }\n            }\n\n            if (columnType == GridColumnTypeEnum.Percentage)\n                value = Number(value) / 100;\n\n            if (columnType == GridColumnTypeEnum.Number)\n                return Number(value).vrToNumberString(formatSettings);\n            else if (columnType == GridColumnTypeEnum.Currency)\n                return Number(value).vrToCurrencyString(formatSettings);\n            else if (columnType == GridColumnTypeEnum.Percentage)\n                return Number(value).vrToPercentageString(formatSettings);\n        }\n        //#endregion\n\n        //#region Duration\n        else if (columnType == GridColumnTypeEnum.Duration)\n        {\n            let hours: number = Math.trunc(value / 60);\n            let hoursString = String(hours);\n            if (hours < 10)\n                hoursString = \"0\" + hoursString;\n\n            let minutes: number = Math.trunc(value % 60);\n            let minutesString = String(minutes);\n            if (minutes < 10)\n                minutesString = \"0\" + minutesString;\n\n            return hoursString + \":\" + minutesString;\n        }\n        //#endregion\n\n        //#region Date, DateTime, Time\n        else if (columnType == GridColumnTypeEnum.Date || columnType == GridColumnTypeEnum.DateTime\n            || columnType == GridColumnTypeEnum.Time || columnType == GridColumnTypeEnum.LongDate\n            || columnType == GridColumnTypeEnum.LongDateTime || columnType == GridColumnTypeEnum.LongWeekDate\n            || columnType == GridColumnTypeEnum.ShortWeekDate)\n        {\n            value = Date.vrFixDateString(value);\n            let dateModeEnum: DateModeEnum = DateModeEnum.Date;\n\n            if (columnType == GridColumnTypeEnum.Date) dateModeEnum = DateModeEnum.Date;\n            else if (columnType == GridColumnTypeEnum.DateTime) dateModeEnum = DateModeEnum.DateTime;\n            else if (columnType == GridColumnTypeEnum.Time) dateModeEnum = DateModeEnum.Time;\n            else if (columnType == GridColumnTypeEnum.LongDate) dateModeEnum = DateModeEnum.LongDate;\n            else if (columnType == GridColumnTypeEnum.LongDateTime) dateModeEnum = DateModeEnum.LongDateTime;\n            else if (columnType == GridColumnTypeEnum.LongWeekDate) dateModeEnum = DateModeEnum.LongWeekDate;\n            else if (columnType == GridColumnTypeEnum.ShortWeekDate) dateModeEnum = DateModeEnum.ShortWeekDate;\n\n            return (value == \"\" || !Date.vrIsValidDate(value)) ? \"\" : new Date(value).vrToItalyString(dateModeEnum, showSeconds);\n        }\n        //#endregion\n\n        //#region String, Label\n        else if (columnType == GridColumnTypeEnum.String || columnType == GridColumnTypeEnum.Label)\n        {\n            value = String(value);\n            return value;\n        }\n        //#endregion\n\n        return \"\";\n    }\n    //#endregion\n\n    //#region Manage rows\n    updateRow(dataItem: any, rebind = true)\n    {\n        let options = this.getOptions();\n        let dataItemId = dataItem[options.dataSourceFieldId!];\n\n        let itemOriginalDatasource = this.originalDataSource().find(k => k[options.dataSourceFieldId!] == dataItemId);\n        let itemOriginalDatasourceIndex = this.originalDataSource().indexOf(itemOriginalDatasource);\n        let itemDatasource = this.dataSource().find(k => k[options.dataSourceFieldId!] == dataItemId);\n        let itemDatasourceIndex = this.dataSource().indexOf(itemDatasource);\n        if (itemOriginalDatasource != null)\n        {\n            this.fixDatasourceWithDate([dataItem]);\n            this.originalDataSource()[itemOriginalDatasourceIndex] = dataItem;\n            this.dataSource()[itemDatasourceIndex] = dataItem;\n\n            if (rebind)\n                this.update();\n        }\n        else\n            this.addRow(dataItem, rebind);\n    }\n\n    updateRows(dataItems: any[], rebind = true)\n    {\n        for (let dataItem of dataItems)\n            this.updateRow(dataItem, false);\n\n        if (rebind)\n            this.update();\n    }\n\n    addRow(dataItem: any, rebind = true)\n    {\n        this.addRows([dataItem], rebind);\n    }\n\n    addRows(dataItems: any[], rebind = true)\n    {\n        this.fixDatasourceWithDate(dataItems);\n        let options = this.getOptions();\n        for (let dataItem of dataItems)\n        {\n            if (dataItem[options.dataSourceFieldId!] == null)\n            {\n                dataItem[options.dataSourceFieldId!] = this._lastIndexAdded;\n                this._lastIndexAdded--;\n            }\n        }\n\n        if (this._originalDataSource == null)\n            this._originalDataSource = [];\n\n        this.dataSource().vrPushRange(dataItems);\n        this._originalDataSource.vrPushRange(dataItems);\n\n        if (options.groupable! && options.groupBy != null)\n            this.sortingGroupFields(dataItems);\n\n        if (rebind)\n            this.setDataSource(this.dataSource());\n\n        //#region Add to dictionary for filter\n        for (let column of options.columns!)\n        {\n            if (column.type != GridColumnTypeEnum.EditButton)\n                this._dictionaryDataValues.set(column.field, this._originalDataSource.map(k => String(k[column.field]).toLowerCase()));\n        }\n        //#endregion\n    }\n\n    deleteRow(dataItemId: number | string, rebind = false)\n    {\n        this.deleteRows([dataItemId], rebind);\n    }\n\n    deleteRows(dataItemIdList: (number | string)[], rebind = false)\n    {\n        let options = this.getOptions();\n\n        //#region Delete row element\n        let rows = Array.from(puma(this._divBody).find(\"tr\"));\n        for (let row of rows)\n        {\n            if (dataItemIdList.vrToStringArrayList().includes(puma(row).attr(\"dataItemId\")))\n                puma(row).remove();\n        }\n\n        if (this.thereAreLockedColumns())\n        {\n            let rows = Array.from(puma(this._divBodyLocked).find(\"tr\"));\n            for (let row of rows)\n            {\n                if (dataItemIdList.vrToStringArrayList().includes(puma(row).attr(\"dataItemId\")))\n                    puma(row).remove();\n            }\n        }\n        //#endregion\n\n        //#region Delete item\n        for (let itemId of dataItemIdList)\n        {\n            let itemToDelete = this.dataSource().find(k => k[options.dataSourceFieldId!] == itemId);\n            if (itemToDelete != null)\n            {\n                this.dataSource().vrDeleteItem(itemToDelete, options.dataSourceFieldId!);\n                this._originalDataSource.vrDeleteItem(itemToDelete, options.dataSourceFieldId!);\n            }\n        }\n        //#endregion\n\n        //#region Remove from dictionary for filter\n        for (let column of options.columns!)\n        {\n            if (column.type != GridColumnTypeEnum.EditButton)\n                this._dictionaryDataValues.set(column.field, this._originalDataSource.map(k => String(k[column.field]).toLowerCase()));\n        }\n        //#endregion\n\n        if (rebind)\n            this.setDataSource(this.dataSource());\n    }\n\n    rows()\n    {\n        let rows: GridRow[] = [];\n        let rowElements = Array.from<HTMLElement>(puma(this._divBody).find(\"tr\"));\n        for (let rowElement of rowElements)\n        {\n            let row = new GridRow();\n            row.element = rowElement;\n            row.cells = Array.from<HTMLElement>(puma(rowElement).find(\"td\"));\n            row.id = rowElement.id;\n            row.dataItemId = rowElement.getAttribute(\"dataItemId\")!;\n            row.index = Number(rowElement.getAttribute(\"row\")!);\n            rows.push(row);\n        }\n        return rows;\n    }\n    //#endregion\n\n    //#region Items\n    public getAllItems(toSavePurpose: boolean = false)\n    {\n        let rows = UtilityManager.duplicate(this.dataSource()) as any[];\n        if (toSavePurpose)\n        {\n            for (let row of rows)\n            {\n                for (let property in row)\n                {\n                    let propertyValue = row[property];\n                    if (Date.vrIsValidDate(propertyValue))\n                        row[property] = Date.vrConvertDateFromClient(propertyValue);\n                }\n            }\n        }\n        return rows.filter(k => k.defaultRow !== true);\n    }\n\n    getCheckedItems()\n    {\n        let options = this.getOptions();\n        let checkedValues = this.getCheckedValues();\n\n        let checkedItems: any[] = [];\n        for (let value of checkedValues)\n        {\n            let item = this.dataSource().find(k => k[options.dataSourceFieldId!] == value);\n            if (item != null)\n                checkedItems.push(item);\n        }\n        return checkedItems;\n    }\n\n    getCheckedValues(): string[]\n    {\n        return this._rowCheckedIdList.vrDistinct();\n    }\n\n    getCheckedNumberValues(): number[]\n    {\n        return this._rowCheckedIdList.vrToNumberArrayList().vrDistinct();\n    }\n\n    getDeletedItems()\n    {\n        return this._deletedItems;\n    }\n\n    getDeletedItemValues(key?: string)\n    {\n        let options = this.getOptions();\n        return this.getDeletedItems().map(k => key != null ? k[key] : k[options.dataSourceFieldId!]);\n    }\n    //#endregion\n\n    //#region Check/Select\n    clearSelection(triggerChange = true)\n    {\n        this._rowCheckedIdList = [];\n        this.unCheckAllRows(triggerChange);\n    }\n\n    checkAllRows(triggerChange = true)\n    {\n        let options = this.getOptions();\n        if (options.checkboxes == GridCheckboxModeEnum.SingleCheck)\n            return;\n\n        let headerCheckbox = document.getElementById(this._elementId + \"header_CheckboxColumn\") as HTMLInputElement;\n        if (headerCheckbox != null)\n        {\n            headerCheckbox.classList.remove(\"indeterminateVrCheckbox\");\n            headerCheckbox.checked = true;\n        }\n\n        let checkboxList = this._divBody.getElementsByClassName(\"vr-checkbox-column\");\n        if (this.thereAreLockedColumns())\n            checkboxList = this._divBodyLocked.getElementsByClassName(\"vr-checkbox-column\");\n\n        for (let checkbox of Array.from(checkboxList) as HTMLInputElement[])\n            checkbox.checked = true;\n\n        //#region Group by\n        if (options.groupable! && options.groupBy != null && options.checkboxes != GridCheckboxModeEnum.None)\n        {\n            let groupByRows = this._divBody.getElementsByClassName(\"grid_trGroupBy\");\n            if (this.thereAreLockedColumns())\n                groupByRows = this._divBodyLocked.getElementsByClassName(\"grid_trGroupBy\");\n\n            for (let groupByRow of Array.from(groupByRows))\n            {\n                let checkBox = groupByRow.getElementsByTagName(\"input\")[0];\n                (checkBox as HTMLInputElement).checked = true;\n                checkBox.classList.remove(\"indeterminateVrCheckbox\");\n            }\n        }\n        //#endregion\n\n        //#region Update checkedValues\n        let checkedIdList: string[] = [];\n        let datasourceIdList = this.dataSource().map(k => k[options.dataSourceFieldId!]);\n        let checkboxCheckedList = Array.from(checkboxList).filter(k => (k as HTMLInputElement).checked);\n        for (let checkboxChecked of checkboxCheckedList)\n        {\n            let dataItemId = checkboxChecked.getAttribute(\"dataItemId\")!;\n            let checkedId = datasourceIdList.find(k => k == dataItemId);\n            if (checkedId != null)\n                checkedIdList.push(checkedId);\n        }\n\n        this._rowCheckedIdList.vrPushRange(checkedIdList.vrToStringArrayList());\n        this.updateCart();\n        //#endregion\n\n        //#region Event\n        if (triggerChange && options.onSelectAllRows != null)\n        {\n            let selectAllRowsEvent = new GridSelectAllRowsEvent();\n            selectAllRowsEvent.sender = this;\n            selectAllRowsEvent.checked = true;\n            options.onSelectAllRows(selectAllRowsEvent);\n        }\n        //#endregion\n    }\n\n    unCheckAllRows(triggerChange = true)\n    {\n        let options = this.getOptions();\n\n        let headerCheckbox = document.getElementById(this._elementId + \"header_CheckboxColumn\") as HTMLInputElement;\n        if (headerCheckbox != null)\n        {\n            headerCheckbox.classList.remove(\"indeterminateVrCheckbox\");\n            headerCheckbox.checked = false;\n        }\n\n        let checkboxList = this._divBody.getElementsByClassName(\"vr-checkbox-column\");\n        if (this.thereAreLockedColumns())\n            checkboxList = this._divBodyLocked.getElementsByClassName(\"vr-checkbox-column\");\n\n        for (let checkbox of Array.from(checkboxList) as HTMLInputElement[])\n            checkbox.checked = false;\n\n        //#region Group by\n        if (options.groupable! && options.groupBy != null && options.checkboxes != GridCheckboxModeEnum.None)\n        {\n            let groupByRows = this._divBody.getElementsByClassName(\"grid_trGroupBy\");\n            if (this.thereAreLockedColumns())\n                groupByRows = this._divBodyLocked.getElementsByClassName(\"grid_trGroupBy\");\n\n            for (let groupByRow of Array.from(groupByRows))\n            {\n                let checkBox = groupByRow.getElementsByTagName(\"input\")[0];\n                (checkBox as HTMLInputElement).checked = false;\n                checkBox.classList.remove(\"indeterminateVrCheckbox\");\n            }\n        }\n        //#endregion\n\n        //#region Update checkedValues\n        let uncheckedIdList: string[] = [];\n        let datasourceIdList = this.dataSource().map(k => k[options.dataSourceFieldId!]);\n        for (let checkbox of Array.from(checkboxList))\n        {\n            let dataItemId = checkbox.getAttribute(\"dataItemId\")!;\n            let uncheckedId = datasourceIdList.find(k => k == dataItemId);\n            if (uncheckedId != null)\n                uncheckedIdList.push(uncheckedId);\n        }\n\n        for (let uncheckedId of uncheckedIdList)\n            this._rowCheckedIdList.vrDelete(String(uncheckedId));\n\n        this.updateCart();\n        //#endregion\n\n        //#region Event\n        if (triggerChange && options.onSelectAllRows != null)\n        {\n            let selectAllRowsEvent = new GridSelectAllRowsEvent();\n            selectAllRowsEvent.sender = this;\n            selectAllRowsEvent.checked = false;\n            options.onSelectAllRows(selectAllRowsEvent);\n        }\n        //#endregion\n    }\n\n    selectRowsByIndexes(indexes: number[], triggerChange = true)\n    {\n        for (let index of indexes)\n            this.selectRowByIndex(index, triggerChange);\n    }\n\n    selectRowByIndex(index: number, triggerChange = true)\n    {\n        let tr = puma(this._divBody).find(\"tr[row='\" + index + \"']\");\n        let dataItemId = tr.attr(\"dataItemId\");\n        this.selectRowInternal(dataItemId, triggerChange, { fromCheckboxInput: false, fromGroupOrRow: false, fromMethodCall: false, shiftKey: false });\n    }\n\n    selectRows(itemIdList: string[], property?: string, triggerChange = true)\n    {\n        if (itemIdList.length == 0)\n            return;\n\n        let options = this.getOptions();\n        if (options.checkboxes == GridCheckboxModeEnum.SingleCheck)\n            itemIdList = [itemIdList.vrLast()];\n\n        // Other property instead of 'id'\n        if (property != null)\n            itemIdList = this.dataSource().filter(k => itemIdList.includes(String(k[property]))).map(k => k[options.dataSourceFieldId!]);\n\n        itemIdList = itemIdList.vrToStringArrayList().vrDistinct();\n        for (let itemId of itemIdList)\n            this.selectRow(itemId, triggerChange);\n    }\n\n    selectRow(itemId: string, triggerChange = true)\n    {\n        this.selectRowInternal(itemId, triggerChange, { fromCheckboxInput: false, fromGroupOrRow: false, fromMethodCall: true, shiftKey: false });\n    }\n\n    private selectRangeShiftKey(target: HTMLElement)\n    {\n        let rowIndex = Number(puma(target).closest(\"tr\").attr(\"row\"));\n        let checkboxList: HTMLInputElement[] = Array.from<HTMLInputElement>(puma(this._divBody).find(\".vr-checkbox-column:checked\") as any);\n        if (this.thereAreLockedColumns())\n            checkboxList = Array.from<HTMLInputElement>(puma(this._divBodyLocked).find(\".vr-checkbox-column:checked\") as any);\n\n        let trSelectedList: HTMLElement[] = [];\n        for (let checkbox of checkboxList)\n            trSelectedList.push(puma(checkbox).closest(\"tr\")[0]);\n\n        let minDifferenceTr: number | null = null;\n        let finalRowIndex = 0;\n        for (let trSelected of trSelectedList)\n        {\n            let rowIndexSelected = Number(puma(trSelected).attr(\"row\"));\n            let diff = Math.abs(rowIndex - rowIndexSelected);\n            if (minDifferenceTr == null || (diff < minDifferenceTr && diff > 0))\n            {\n                minDifferenceTr = diff;\n                finalRowIndex = Number(puma(trSelected).attr(\"row\"));\n            }\n        }\n\n        let start = (finalRowIndex < rowIndex) ? finalRowIndex : rowIndex;\n        let end = (finalRowIndex < rowIndex) ? rowIndex : finalRowIndex;\n        for (let i = start + 1; i <= end; i++)\n        {\n            let tr = puma(this._divBody).find(\"tr[row='\" + i + \"']\");\n            let dataItemId = tr.attr(\"dataItemId\");\n            this.selectRowInternal(dataItemId, true, { fromCheckboxInput: true, fromGroupOrRow: true, fromMethodCall: false, shiftKey: true });\n        }\n    }\n\n    private selectRowInternal(itemId: string, triggerChange = true, settings: { fromCheckboxInput: boolean, fromGroupOrRow: boolean, fromMethodCall: boolean, shiftKey: boolean })\n    {\n        let options = this.getOptions();\n\n        let bodyWhereSearch = (this.thereAreLockedColumns() ? this._divBodyLocked : this._divBody);\n        let checkboxList = Array.from(bodyWhereSearch.getElementsByClassName(\"vr-checkbox-column\")) as HTMLInputElement[];\n        let checkboxGroupList = Array.from(bodyWhereSearch.querySelectorAll(\".grid_divGroupByName input\")) as HTMLInputElement[];\n\n        //#region Select checkbox\n        let dataItem = null;\n        let checkboxToSelect = checkboxList.find(k => k.getAttribute(\"dataItemId\") == itemId)! as HTMLInputElement;\n        if (checkboxToSelect != null)\n        {\n            if (checkboxToSelect.checked)\n            {\n                let checkedCheckboxList = checkboxList.filter(k => k.checked);\n                if (options.checkboxes == GridCheckboxModeEnum.SingleCheck || (options.checkboxes == GridCheckboxModeEnum.MultiCheck && !settings.fromCheckboxInput && checkedCheckboxList.length > 1))\n                {\n                    if (!settings.fromMethodCall)\n                    {\n                        for (let checkbox of checkboxList)\n                        {\n                            checkbox.checked = false;\n                            checkbox.classList.remove(\"indeterminateVrCheckbox\");\n                            this._rowCheckedIdList.vrDelete(String(checkbox.getAttribute(\"dataItemId\")));\n                        }\n\n                        for (let checkbox of checkboxGroupList)\n                        {\n                            checkbox.checked = false;\n                            checkbox.classList.remove(\"indeterminateVrCheckbox\");\n                        }\n\n                        this._rowCheckedIdList.vrDelete(String(itemId));\n                    }\n\n                    checkboxToSelect.checked = true;\n                    this._rowCheckedIdList.push(String(itemId));\n                }\n                else \n                {\n                    if (settings.fromGroupOrRow)\n                        this.unselectRow(itemId, triggerChange);\n                    else\n                        this._rowCheckedIdList.push(String(itemId));\n                }\n            }\n            else\n            {\n                if ((options.checkboxes == GridCheckboxModeEnum.SingleCheck || !settings.fromCheckboxInput) && !settings.fromMethodCall)\n                {\n                    for (let checkbox of checkboxList)\n                    {\n                        checkbox.checked = false;\n                        this._rowCheckedIdList.vrDelete(String(checkbox.getAttribute(\"dataItemId\")));\n                    }\n\n                    for (let checkbox of checkboxGroupList)\n                    {\n                        checkbox.checked = false;\n                        checkbox.classList.remove(\"indeterminateVrCheckbox\");\n                    }\n                }\n\n                if (!settings.fromGroupOrRow && !settings.fromMethodCall)\n                {\n                    checkboxToSelect.checked = false;\n                    this._rowCheckedIdList.vrDelete(String(itemId));\n                }\n                else\n                {\n                    checkboxToSelect.checked = true;\n                    this._rowCheckedIdList.push(String(itemId));\n                }\n            }\n\n            dataItem = this.dataSource().find(k => k[options.dataSourceFieldId!] == itemId);\n        }\n        this.updateCart();\n        //#endregion\n\n        let headerCheckbox = document.getElementById(this._elementId + \"header_CheckboxColumn\") as HTMLInputElement;\n        if (headerCheckbox != null)\n            headerCheckbox.classList.add(\"indeterminateVrCheckbox\");\n\n        //#region All rows checked\n        let checkedIdList: string[] = [];\n        let datasourceIdList = this.dataSource().map(k => k[options.dataSourceFieldId!]);\n        let checkboxCheckedList = checkboxList.filter(k => (k as HTMLInputElement).checked);\n        for (let checkboxChecked of checkboxCheckedList)\n        {\n            let dataItemId = checkboxChecked.getAttribute(\"dataItemId\")!;\n            let checkedId = datasourceIdList.find(k => k == dataItemId);\n            if (checkedId != null)\n                checkedIdList.push(checkedId);\n        }\n\n        if (headerCheckbox != null)\n        {\n            if (checkedIdList.length == checkboxList.length)\n            {\n                headerCheckbox.classList.remove(\"indeterminateVrCheckbox\");\n                headerCheckbox.checked = true;\n            }\n            else if (checkedIdList.length == 0)\n            {\n                headerCheckbox.checked = false;\n                headerCheckbox.classList.remove(\"indeterminateVrCheckbox\");\n            }\n        }\n        //#endregion\n\n        //#region Group\n        this.manageGroupCheckParent(checkboxToSelect);\n        //#endregion\n\n        //#region Event\n        if (options.onSelectRow != null && dataItem != null && triggerChange)\n        {\n            let rowElement = checkboxToSelect.closest(\"tr\") as HTMLTableRowElement;\n\n            let dataSourceIdList = this.dataSource().map(k => k[options!.dataSourceFieldId!]);\n            let index = dataSourceIdList.indexOf(dataItem[options!.dataSourceFieldId!]);\n            if (index == -1 || options!.dataSourceFieldId == null)\n                index = puma(rowElement).index();\n\n            let selectRowEvent = new GridSelectRowEvent();\n            selectRowEvent.sender = this;\n            selectRowEvent.rowElement = rowElement;\n            selectRowEvent.dataItem = dataItem;\n            selectRowEvent.checked = (checkboxToSelect != null) ? checkboxToSelect.checked : false;\n            selectRowEvent.empty = (dataItem != null && dataItem[options.dataSourceFieldId!] == null);\n            selectRowEvent.index = index;\n            selectRowEvent.shiftKey = settings.shiftKey;\n            selectRowEvent.fromCheckbox = settings.fromCheckboxInput && !settings.shiftKey;\n            options.onSelectRow(selectRowEvent);\n        }\n        //#endregion\n    }\n\n    private manageGroupCheckParent(checkbox: HTMLElement)\n    {\n        let options = this.getOptions();\n        if (options.groupable! && options.groupBy != null && (options.groupBy as GridGroupBySettings).fields != null && (options.groupBy as GridGroupBySettings).fields.length > 0 && options.checkboxes != GridCheckboxModeEnum.None && checkbox != null)\n        {\n            //#region Parent group row\n            let parentGroupRow = checkbox.parentElement!.parentElement! as any;\n            let i = parentGroupRow.rowIndex;\n            while (parentGroupRow != null && !parentGroupRow.classList.contains(\"grid_trGroupBy\"))\n            {\n                parentGroupRow = this._divBody.querySelector(\"tr:nth-child(\" + i + \")\")!;\n                if (this.thereAreLockedColumns())\n                    parentGroupRow = this._divBodyLocked.querySelector(\"tr:nth-child(\" + i + \")\")!;\n\n                i--;\n            }\n            //#endregion\n\n            //#region Checkbox management\n            while (parentGroupRow != null && ((Number(parentGroupRow.getAttribute(\"level\")) == 0 && parentGroupRow.classList.contains(\"grid_trGroupBy\")) || (Number(parentGroupRow.getAttribute(\"level\")) > 0 || !parentGroupRow.classList.contains(\"grid_trGroupBy\"))))\n            {\n                if (!parentGroupRow.classList.contains(\"grid_trGroupBy\"))\n                {\n                    parentGroupRow = this._divBody.querySelector(\"tr:nth-child(\" + i + \")\")!;\n                    if (this.thereAreLockedColumns())\n                        parentGroupRow = this._divBodyLocked.querySelector(\"tr:nth-child(\" + i + \")\")!;\n\n                    i--;\n                    continue;\n                }\n\n                let checkBoxParentGroup = parentGroupRow.getElementsByTagName(\"input\")[0];\n\n                //#region Check or not \n                let childrenRows = this.getChildrenGroupRows(parentGroupRow, this._divBody);\n                if (this.thereAreLockedColumns())\n                    childrenRows = this.getChildrenGroupRows(parentGroupRow, this._divBodyLocked);\n\n                let numberOfCheckedChildren = this.getCheckedChildrenGroupRows(parentGroupRow, this._divBody).length;\n                if (this.thereAreLockedColumns())\n                    numberOfCheckedChildren = this.getCheckedChildrenGroupRows(parentGroupRow, this._divBodyLocked).length;\n\n                checkBoxParentGroup.checked = false;\n                checkBoxParentGroup.classList.remove(\"indeterminateVrCheckbox\");\n\n                if (numberOfCheckedChildren == childrenRows.children.length)\n                    checkBoxParentGroup.checked = true;\n                else if (numberOfCheckedChildren == 0)\n                    checkBoxParentGroup.checked = false;\n                else\n                    checkBoxParentGroup.classList.add(\"indeterminateVrCheckbox\");\n                //#endregion\n\n                if (Number(parentGroupRow.getAttribute(\"level\")) == 0)\n                    break;\n\n                parentGroupRow = this._divBody.querySelector(\"tr:nth-child(\" + i + \")\")!;\n                if (this.thereAreLockedColumns())\n                    parentGroupRow = this._divBodyLocked.querySelector(\"tr:nth-child(\" + i + \")\")!;\n\n                i--;\n            }\n        }\n    }\n\n    unselectRows(itemIdList: string[], property?: string, triggerChange = true)\n    {\n        if (itemIdList.length == 0)\n            return;\n\n        // Other property instead of 'id'\n        let options = this.getOptions();\n        if (property != null)\n            itemIdList = this.dataSource().filter(k => itemIdList.includes(String(k[property]))).map(k => k[options.dataSourceFieldId!]);\n\n        itemIdList = itemIdList.vrToStringArrayList().vrDistinct();\n        for (let itemId of itemIdList)\n            this.unselectRow(itemId, triggerChange);\n    }\n\n    unselectRow(itemId: string, triggerChange = true)\n    {\n        let options = this.getOptions();\n\n        let bodyWhereSearch = (this.thereAreLockedColumns() ? this._divBodyLocked : this._divBody);\n        let checkboxList = Array.from(bodyWhereSearch.getElementsByClassName(\"vr-checkbox-column\")) as HTMLInputElement[];\n\n        let headerCheckbox = document.getElementById(this._elementId + \"header_CheckboxColumn\") as HTMLInputElement;\n        if (headerCheckbox != null)\n            headerCheckbox.checked = false;\n\n        this._rowCheckedIdList.vrDelete(String(itemId));\n        this.updateCart();\n\n        let checkedValues = this.getCheckedValues();\n        if (checkedValues.length == 0)\n            headerCheckbox.classList.remove(\"indeterminateVrCheckbox\");\n        else\n            headerCheckbox.classList.add(\"indeterminateVrCheckbox\");\n\n        let dataItem = null;\n        let checkboxToDeselect = checkboxList.find(k => k.getAttribute(\"dataItemId\") == itemId);\n        if (checkboxToDeselect != null)\n        {\n            if (checkboxToDeselect.checked)\n                checkboxToDeselect.checked = false;\n\n            dataItem = this.dataSource().find(k => k[options.dataSourceFieldId!] == itemId);\n            this.manageGroupCheckParent(checkboxToDeselect);\n        }\n\n        //#region Event\n        if (options.onSelectRow != null && checkboxToDeselect != null && triggerChange)\n        {\n            let rowElement = checkboxToDeselect.closest(\"tr\") as HTMLTableRowElement;\n\n            let dataSourceIdList = this.dataSource().map(k => k[options!.dataSourceFieldId!]);\n            let index = dataSourceIdList.indexOf(dataItem[options!.dataSourceFieldId!]);\n            if (index == -1 || options!.dataSourceFieldId == null)\n                index = puma(rowElement).index();\n\n            let selectRowEvent = new GridSelectRowEvent();\n            selectRowEvent.sender = this;\n            selectRowEvent.rowElement = rowElement;\n            selectRowEvent.dataItem = dataItem;\n            selectRowEvent.checked = false;\n            selectRowEvent.empty = (dataItem != null && dataItem[options.dataSourceFieldId!] == null);\n            selectRowEvent.index = index;\n            selectRowEvent.shiftKey = false;\n            selectRowEvent.fromCheckbox = false;\n            options.onSelectRow(selectRowEvent);\n        }\n        //#endregion\n    }\n    //#endregion\n\n    //#region Cart\n    private updateCart()\n    {\n        let btnCart = ControlManager.get<Button>(this._elementId + \"_btnCart\");\n        if (btnCart != null)\n        {\n            let checkedValues = this.getCheckedValues();\n            btnCart.badge(String(checkedValues.length));\n        }\n    }\n\n    private openWindowCart()\n    {\n        let options = this.getOptions();\n        this.createWindowCart();\n        this._wndCart.open();\n\n        this._grdCart.dataSource(this.getCheckedItems());\n        this._grdCart.removeAllGroups(false);\n\n        if (options.groupBy != null)\n            this._grdCart.addGroups((options.groupBy as GridGroupBySettings).fields);\n    }\n\n    private createWindowCart()\n    {\n        if (this._wndCart != null)\n            return;\n\n        let options = this.getOptions();\n        this._wndCart = createWindow(\n            {\n                addToControlList: false,\n                classContainer: this.element().id + \"_wndUtility\",\n                width: puma(this.container()).width() / 2 + 100,\n                height: puma(this.container()).height() / 2 + 100,\n                position: { right: 10, bottom: 40 },\n                title: \"Gestisci elementi selezionati\",\n                onClose: (e) =>\n                {\n                    puma(this._wndCart.container()).remove();\n                    (this._wndCart as any) = null;\n                },\n                footer: [\n                    { text: \"Chiudi\", type: WindowFooterItemTypeEnum.Close },\n                    {\n                        text: \"Rimuovi tutto\", type: WindowFooterItemTypeEnum.Ok, confirmationMessage: \"Confermi di voler rimuovere tutti gli elementi?\", onClick: (e) =>\n                        {\n                            this.clearSelection();\n                            this._grdCart.clear();\n                            this._wndCart.close();\n                        }\n                    }\n                ]\n            });\n        puma(this.container()).append(this._wndCart.container());\n\n        puma(this._wndCart.element()).vrAppendPuma(\"<div id='\" + this._elementId + \"_divWindowCartContainer' class='vrContainer'></div>\");\n        let divContainer = puma(\"#\" + this._elementId + \"_divWindowCartContainer\")[0];\n\n        let columns = options.columns!.filter(k => (options.footer! as GridFooterSettings).cartSettings!.fields.includes(k.field));\n        columns.unshift({\n            field: \"remove\",\n            type: GridColumnTypeEnum.Button,\n            width: 40,\n            buttonSettings: (e) =>\n            {\n                return {\n                    icon: IconClassicLight.Remove,\n                    onClick: (e) => \n                    {\n                        this.unselectRow(e.dataItem[options.dataSourceFieldId!])\n                        this._grdCart.dataSource(this.getCheckedItems());\n                        if (this.getCheckedValues().length == 0)\n                            this._wndCart.close();\n                    }\n                }\n            }\n        })\n\n        columns.forEach(k =>\n        {\n            k.fitSpace = undefined;\n            if (k.width == null || k.fitSpace != null)\n                k.width = 100;\n        })\n\n        this._grdCart = createGrid(\n            {\n                addToControlList: false,\n                dataSourceFieldId: options.dataSourceFieldId,\n                footer: { totalElements: true },\n                pageSize: 500,\n                filterable: false,\n                height: this._wndCart.height() - 180,\n                groupable: true,\n                hideEditButton: true,\n                columns: columns\n            }, divContainer);\n    }\n    //#endregion\n\n    //#region Sorting\n    private applySorting(rebind = true)\n    {\n        if (this._actualSortingInfo != null)\n            this.sort(this._actualSortingInfo.field, this._actualSortingInfo.mode, rebind);\n    }\n\n    removeSort(updateDataSource = true)\n    {\n        if (this._actualSortingInfo != null)\n        {\n            let options = this.getOptions();\n            let field = this._actualSortingInfo.field;\n            let thJq = puma(this._divHeader).find(\"th[field='\" + field + \"']\");\n            if (options.lockable && thJq[0] == null)\n                thJq = puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\");\n\n            if (thJq[0] != null)\n            {\n                thJq[0].style.cssText += \"background-color: #e3f1fa !important; color: #000 !important;\";\n\n                if (thJq.find(\".grid_headerThContent\")[0] != null)\n                    thJq.find(\".grid_headerThContent\")[0].style.cssText += \"color: #000 !important;\";\n            }\n\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretUp);\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretDown);\n            thJq.removeAttr(\"sortMode\");\n            this._actualSortingInfo = null;\n\n            if (options.groupBy != null)\n                (options.groupBy as GridGroupBySettings).sortBy = undefined;\n\n            if (updateDataSource)\n            {\n                if (options.serverBinding !== false)\n                    this.rebind();\n                else\n                    this.update();\n            }\n        }\n    }\n\n    sort(field: string, gridSortModeEnum?: GridSortDirectionEnum, rebind = true)\n    {\n        let options = this.getOptions();\n        if (options.sortable === false)\n            return;\n\n        if (this._actualSortingInfo != null && this._actualSortingInfo.field !== field)\n            this.removeSort(false);\n\n        let thJq = puma(this._divHeader).find(\"th[field='\" + field + \"']\");\n        if (options.lockable && thJq[0] == null)\n            thJq = puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\");\n\n        if (thJq[0] != null)\n        {\n            thJq[0].style.cssText += \"background-color: coral !important; color: #FFF !important;\";\n\n            if (thJq.find(\".grid_headerThContent\")[0] != null)\n                thJq.find(\".grid_headerThContent\")[0].style.cssText += \"color: #FFF !important;\";\n        }\n\n        //#region Sort mode\n        if (gridSortModeEnum == null) gridSortModeEnum = GridSortDirectionEnum.Asc;\n        this._actualSortingInfo = { field: field, mode: gridSortModeEnum };\n        if (gridSortModeEnum == GridSortDirectionEnum.Asc)\n        {\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretDown);\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretUp);\n\n            thJq.find(\"i\").addClass(IconClassicLight.CaretUp);\n            thJq.attr(\"sortMode\", GridSortDirectionEnum.Asc);\n        }\n        else\n        {\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretDown);\n            thJq.find(\"i\").removeClass(IconClassicLight.CaretUp);\n\n            thJq.find(\"i\").addClass(IconClassicLight.CaretDown);\n            thJq.attr(\"sortMode\", GridSortDirectionEnum.Desc);\n        }\n        //#endregion\n\n        //#region Server binding\n        if (options.serverBinding !== false && rebind)\n        {\n            this.rebind();\n            return;\n        }\n        //#endregion\n\n        if (this.dataSource().length > 2500)\n        {\n            showLoader();\n            window.setTimeout(() => \n            {\n                this.sortInternal(field, gridSortModeEnum, rebind)\n                hideLoader();\n            });\n        }\n        else\n            this.sortInternal(field, gridSortModeEnum, rebind)\n    }\n\n    private sortInternal(field: string, gridSortModeEnum?: GridSortDirectionEnum, rebind = true)\n    {\n        let options = this.getOptions();\n        this._cellButtons = new Map<string, GridControlData>();\n        this._cellIcons = new Map<string, GridControlData>();\n        this._cellCustoms = new Map<string, GridControlData>();\n        this._cellLabels = new Map<string, GridControlData>();\n        this._cellImages = new Map<string, GridControlData>();\n\n        let items: any[] = this.dataSource().map(k => k);\n        if (options.groupBy != null)\n        {\n            (options.groupBy as GridGroupBySettings).sortBy = { field: field, direction: gridSortModeEnum };\n            this.sortingGroupFields(items);\n        }\n        else\n            items.vrSortBy([field], (gridSortModeEnum == GridSortDirectionEnum.Asc));\n\n        if (rebind)\n        {\n            this.drawTable(items);\n            this.manageControls();\n        }\n    }\n\n    private sortingGroupFields(dataItems: any[])\n    {\n        let options = this.getOptions();\n        let sortingFields: string[] = [];\n        let groupBySettings = (options.groupBy as GridGroupBySettings);\n\n        let sortByField = groupBySettings.sortBy != null ? (groupBySettings.sortBy! as GridSortSettings).field : null;\n        if (sortByField != null)\n        {\n            //#region External group sort\n            if (groupBySettings.sortBy!.direction == GridSortDirectionEnum.Desc)\n                sortingFields.push(\"-\" + sortByField);\n            else\n                sortingFields.push(sortByField);\n\n            //#region Color\n            let thJq = puma(this._divHeader).find(\"th[field='\" + sortByField + \"']\");\n            if (options.lockable && thJq[0] == null)\n                thJq = puma(this._divHeaderLocked).find(\"th[field='\" + sortByField + \"']\");\n\n            if (thJq[0] != null)\n            {\n                thJq[0].style.cssText += \"background-color: coral !important; color: #FFF !important;\";\n\n                if (thJq.find(\".grid_headerThContent\")[0] != null)\n                    thJq.find(\".grid_headerThContent\")[0].style.cssText += \"color: #FFF !important;\";\n            }\n\n            if (groupBySettings.sortBy!.direction == null) groupBySettings.sortBy!.direction = GridSortDirectionEnum.Asc;\n            this._actualSortingInfo = { field: sortByField, mode: groupBySettings.sortBy!.direction };\n            if (groupBySettings.sortBy!.direction == GridSortDirectionEnum.Asc)\n            {\n                thJq.find(\"i\").removeClass(IconClassicLight.CaretDown);\n                thJq.find(\"i\").removeClass(IconClassicLight.CaretUp);\n\n                thJq.find(\"i\").addClass(IconClassicLight.CaretUp);\n                thJq.attr(\"sortMode\", GridSortDirectionEnum.Asc);\n            }\n            else\n            {\n                thJq.find(\"i\").removeClass(IconClassicLight.CaretDown);\n                thJq.find(\"i\").removeClass(IconClassicLight.CaretUp);\n\n                thJq.find(\"i\").addClass(IconClassicLight.CaretDown);\n                thJq.attr(\"sortMode\", GridSortDirectionEnum.Desc);\n            }\n            //#endregion\n\n            //#endregion\n        }\n        else\n        {\n            //#region Sort for fields\n            let automaticSort = groupBySettings.automaticSort;\n            if (automaticSort == null)\n                automaticSort = true;\n\n            if (groupBySettings.fields != null && automaticSort)\n            {\n                for (let groupByField of (groupBySettings.fields as GridGroupByItem[]))\n                {\n                    if (groupByField == null)\n                        continue;\n\n                    if (!sortingFields.includes((groupByField as GridGroupByItem).field))\n                        sortingFields.push((groupByField as GridGroupByItem).field);\n                }\n            }\n            //#endregion\n        }\n\n        //#region Internal group sort\n        let internalSortByField = groupBySettings.internalSortBy != null ? (groupBySettings.internalSortBy! as GridSortSettings).field : null;\n        if (internalSortByField != null)\n        {\n            if (groupBySettings.internalSortBy!.direction == GridSortDirectionEnum.Desc)\n                sortingFields.push(\"-\" + internalSortByField);\n            else\n                sortingFields.push(internalSortByField);\n        }\n        //#endregion\n\n        sortingFields = sortingFields.vrDistinct();\n        if (sortingFields.length > 0)\n            dataItems.vrSortBy(sortingFields);\n    }\n    //#endregion\n\n    //#region Column\n    column(field: string)\n    {\n        let options = this.getOptions();\n        let column = options.columns!.find(k => k.field == field)!;\n        let columnIndex = options.columns!.indexOf(column);\n        return options.columns![columnIndex];\n    }\n\n    columnTitle(field: string, title?: string)\n    {\n        let column = this.column(field);\n        if (column != null)\n        {\n            if (title != null)\n            {\n                column.title = title;\n                puma(this._divHeader).find(\"th[field='\" + field + \"']\").find(\"span.grid_headerThContent\").html(title);\n\n                let options = this.getOptions();\n                if (options.lockable)\n                    puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").find(\"span.grid_headerThContent\").html(title);\n            }\n            return column.title;\n        }\n        else\n            return \"\";\n    }\n\n    hideColumns(fields: string[], update = true)\n    {\n        for (let field of fields)\n            this.hideColumn(field, false);\n\n        if (update)\n            this.update();\n    }\n\n    hideColumn(field: string, updateDataSource = true)\n    {\n        puma(this._divHeader).find(\"th[field='\" + field + \"']\").hide();\n        puma(this._divFilters).find(\"td[field='\" + field + \"']\").hide();\n        puma(this._divBody).find(\"td[field='\" + field + \"']\").hide();\n        puma(this._divTotals).find(\"td[field='\" + field + \"']\").hide();\n\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").hide();\n            puma(this._divFiltersLocked).find(\"td[field='\" + field + \"']\").hide();\n            puma(this._divBodyLocked).find(\"td[field='\" + field + \"']\").hide();\n            puma(this._divTotalsLocked).find(\"td[field='\" + field + \"']\").hide();\n        }\n\n        let column = this.column(field);\n        if (column != null)\n        {\n            column.hidden = true;\n            this.removeFilter(field);\n        }\n\n        if (updateDataSource)\n            this.update();\n    }\n\n    hideCheckboxColumn(updateDataSource = false)\n    {\n        this.hideColumn(\"vrGridCheckboxColumn\", updateDataSource);\n    }\n\n    hideEditButtonColumn(updateDataSource = false)\n    {\n        this.hideColumn(\"editButton\", updateDataSource);\n    }\n\n    hideOnlyThisColumns(fieldList: string[], updateDataSource = true)\n    {\n        let options = this.getOptions();\n        for (let column of options.columns!)\n            this.showColumn(column.field, false);\n\n        for (let field of fieldList)\n            this.hideColumn(field, false);\n\n        if (updateDataSource)\n            this.update();\n    }\n\n    showColumns(fields: string[], update = true)\n    {\n        for (let field of fields)\n            this.showColumn(field, false);\n\n        if (update)\n            this.update();\n    }\n\n    showColumn(field: string, updateDataSource = true)\n    {\n        puma(this._divHeader).find(\"th[field='\" + field + \"']\").show();\n        puma(this._divFilters).find(\"td[field='\" + field + \"']\").show();\n        puma(this._divBody).find(\"td[field='\" + field + \"']\").show();\n        puma(this._divTotals).find(\"td[field='\" + field + \"']\").show();\n\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").show();\n            puma(this._divFiltersLocked).find(\"td[field='\" + field + \"']\").show();\n            puma(this._divBodyLocked).find(\"td[field='\" + field + \"']\").show();\n            puma(this._divTotalsLocked).find(\"td[field='\" + field + \"']\").show();\n        }\n\n        let column = this.column(field);\n        if (column != null)\n            column.hidden = false;\n\n        if (updateDataSource)\n            this.update();\n    }\n\n    showCheckboxColumn(updateDataSource = false)\n    {\n        this.showColumn(\"vrGridCheckboxColumn\", updateDataSource);\n    }\n\n    showEditButtonColumn(updateDataSource = false)\n    {\n        this.showColumn(\"editButton\", updateDataSource);\n    }\n\n    showOnlyThisColumns(fieldList: string[], updateDataSource = true)\n    {\n        let options = this.getOptions();\n        for (let column of options.columns!)\n            this.hideColumn(column.field, false);\n\n        for (let field of fieldList)\n            this.showColumn(field, false);\n\n        if (updateDataSource)\n            this.update();\n    }\n\n    columnVisible(value: string, state: boolean, updateDataSource = true)\n    {\n        if (state) this.showColumn(value, updateDataSource);\n        else this.hideColumn(value, updateDataSource);\n    }\n\n    columnCheckboxVisible(state: boolean, updateDataSource = false)\n    {\n        if (state) this.showCheckboxColumn(updateDataSource);\n        else this.hideCheckboxColumn(updateDataSource);\n    }\n    //#endregion\n\n    //#region Lock/Unlock\n    lockColumns(fields: string[], update = true)\n    {\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            for (let field of fields)\n                this.lockColumn(field, false);\n\n            if (update)\n                this.update();\n        }\n    }\n\n    lockColumn(field: string, update = true)\n    {\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            if (this._divHeaderLocked != null) this._divHeaderLocked.style.cssText += \"display: inline-block;\";\n            if (this._divFiltersLocked != null) this._divFiltersLocked.style.cssText += \"display: inline-block;\";\n            if (this._divBodyLocked != null) this._divBodyLocked.style.cssText += \"display: inline-block;\";\n            if (this._divTotalsLocked != null) this._divTotalsLocked.style.cssText += \"display: inline-block;\";\n\n            if (!this.thereAreLockedColumns())\n            {\n                //#region Edit Button\n                let columnEditButton = this.column(\"editButton\");\n                if (columnEditButton != null)\n                {\n                    columnEditButton.locked = true;\n                    this.showColumn(\"editButton\", false);\n\n                    //#region Move column to correct index\n                    let columnToMoveIndex = options.columns!.indexOf(columnEditButton);\n                    let columnToMove = options.columns!.splice(columnToMoveIndex, 1)[0];\n                    options.columns!.splice(0, 0, columnToMove);\n                    //#endregion\n\n                    puma(this._divHeader).find(\"th[field='\" + \"editButton\" + \"']\").attr(\"locked\", \"locked\");\n                    puma(this._divHeader).find(\"th[field='\" + \"editButton\" + \"']\").vrAppendToPuma(puma(this._divHeaderLocked).find(\"tr\"));\n                    puma(this._divFilters).find(\"td[field='\" + \"editButton\" + \"']\").vrAppendToPuma(puma(this._divFiltersLocked).find(\"tr\"));\n                    puma(this._divTotals).find(\"td[field='\" + \"editButton\" + \"']\").vrAppendToPuma(puma(this._divTotalsLocked).find(\"tr\"));\n                }\n                //#endregion\n\n                //#region Checkboxes\n                if (options.checkboxes !== false)\n                {\n                    let firstColumnField = options.columns![0].field;\n                    puma(this._divHeader).find(\"th[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divHeaderLocked).find(\"tr th[field='\" + firstColumnField + \"']\"));\n                    puma(this._divFilters).find(\"td[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divFiltersLocked).find(\"tr td[field='\" + firstColumnField + \"']\"));\n                    puma(this._divTotals).find(\"td[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divTotalsLocked).find(\"tr td[field='\" + firstColumnField + \"']\"));\n                }\n                //#endregion\n            }\n\n            puma(this._divHeader).find(\"th[field='\" + field + \"']\").vrAppendToPuma(puma(this._divHeaderLocked).find(\"tr\"));\n            puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").attr(\"locked\", \"locked\");\n            puma(this._divFilters).find(\"td[field='\" + field + \"']\").vrAppendToPuma(puma(this._divFiltersLocked).find(\"tr\"));\n            puma(this._divTotals).find(\"td[field='\" + field + \"']\").vrAppendToPuma(puma(this._divTotalsLocked).find(\"tr\"));\n\n            let column = this.column(field);\n            if (column != null)\n            {\n                column.locked = true;\n                this.showColumn(field, false);\n\n                //#region Move column to correct index\n                let columnToMoveIndex = options.columns!.indexOf(column);\n                let columnToMove = options.columns!.splice(columnToMoveIndex, 1)[0];\n                let lastLockedColumn = options.columns!.filter(k => k.locked == true).vrLast();\n                let lastLockedColumnIndex = (lastLockedColumn == null) ? 0 : options.columns!.lastIndexOf(lastLockedColumn);\n                options.columns!.splice((lastLockedColumn == null) ? 0 : (lastLockedColumnIndex + 1), 0, columnToMove);\n                //#endregion    \n            }\n\n            this.recalculateHeightWidth();\n            if (update)\n                this.update();\n        }\n    }\n\n    unlockColumns(fields: string[], update = true)\n    {\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            for (let field of fields)\n                this.unlockColumn(field, false);\n\n            if (update)\n                this.update();\n        }\n    }\n\n    unlockColumn(field: string, update = true)\n    {\n        let options = this.getOptions();\n        if (options.lockable)\n        {\n            puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").removeAttr(\"locked\");\n            puma(this._divHeaderLocked).find(\"th[field='\" + field + \"']\").vrAppendToPuma(puma(this._divHeader).find(\"tr\"));\n            puma(this._divFiltersLocked).find(\"td[field='\" + field + \"']\").vrAppendToPuma(puma(this._divFilters).find(\"tr\"));\n            puma(this._divTotalsLocked).find(\"td[field='\" + field + \"']\").vrAppendToPuma(puma(this._divTotals).find(\"tr\"));\n\n            let column = this.column(field);\n            if (column != null)\n            {\n                column.locked = false;\n\n                //#region Move column to correct index\n                let columnToMoveIndex = options.columns!.indexOf(column);\n                let columnToMove = options.columns!.splice(columnToMoveIndex, 1)[0];\n                options.columns!.splice(options.columns!.length, 0, columnToMove);\n                //#endregion\n            }\n\n            if (!this.thereAreLockedColumns())\n            {\n                if (this._divHeaderLocked != null) this._divHeaderLocked.style.cssText += \"display: none;\";\n                if (this._divFiltersLocked != null) this._divFiltersLocked.style.cssText += \"display: none;\";\n                if (this._divBodyLocked != null) this._divBodyLocked.style.cssText += \"display: none;\";\n                if (this._divTotalsLocked != null) this._divTotalsLocked.style.cssText += \"display: none;\";\n\n                //#region Edit Button\n                let columnEditButton = this.column(\"editButton\");\n                if (columnEditButton != null)\n                {\n                    columnEditButton.locked = false;\n\n                    //#region Move column to correct index\n                    let columnToMoveIndex = options.columns!.indexOf(columnEditButton);\n                    let columnToMove = options.columns!.splice(columnToMoveIndex, 1)[0];\n                    options.columns!.splice(0, 0, columnToMove);\n                    //#endregion\n\n                    let fieldAfterEditButton = options.columns![1].field;\n                    puma(this._divHeaderLocked).find(\"th[field='\" + \"editButton\" + \"']\").removeAttr(\"locked\");\n                    puma(this._divHeaderLocked).find(\"th[field='\" + \"editButton\" + \"']\").vrInsertBeforePuma(puma(this._divHeader).find(\"tr th[field='\" + fieldAfterEditButton + \"']\"));\n                    puma(this._divFiltersLocked).find(\"td[field='\" + \"editButton\" + \"']\").vrInsertBeforePuma(puma(this._divFilters).find(\"tr td[field='\" + fieldAfterEditButton + \"']\"));\n                    puma(this._divTotalsLocked).find(\"td[field='\" + \"editButton\" + \"']\").vrInsertBeforePuma(puma(this._divTotals).find(\"tr td[field='\" + fieldAfterEditButton + \"']\"));\n                }\n                //#endregion\n\n                //#region Checkboxes\n                if (options.checkboxes !== false)\n                {\n                    let firstColumnField = options.columns![0].field;\n                    puma(this._divHeaderLocked).find(\"th[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divHeader).find(\"tr th[field='\" + firstColumnField + \"']\"));\n                    puma(this._divFiltersLocked).find(\"td[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divFilters).find(\"tr td[field='\" + firstColumnField + \"']\"));\n                    puma(this._divTotalsLocked).find(\"td[field='\" + \"vrGridCheckboxColumn\" + \"']\").vrInsertBeforePuma(puma(this._divTotals).find(\"tr td[field='\" + firstColumnField + \"']\"));\n                }\n                //#endregion\n            }\n\n            this.recalculateHeightWidth();\n            if (update)\n                this.update();\n        }\n    }\n\n    lockedColumns()\n    {\n        let options = this.getOptions();\n        return options.columns!.filter(k => k.locked && k.field != \"editButton\");\n    }\n\n    thereAreLockedColumns()\n    {\n        let options = this.getOptions();\n        return options.lockable && options.columns!.filter(k => k.field != \"editButton\").vrAny(k => k.locked);\n    }\n    //#endregion\n\n    //#region GroupBy\n    hasGroup()\n    {\n        return this.getOptions().groupBy != null;\n    }\n\n    removeGroup(field: string, updateDataSource = true)\n    {\n        this.removeGroups([field], updateDataSource);\n    }\n\n    removeGroups(fields: string[], updateDataSource = true)\n    {\n        let options = this.getOptions();\n        if (options.groupable! && options.groupBy != null)\n        {\n            for (let field of fields)\n            {\n                if (((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(field))\n                    ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).vrDeleteAllBy(k => (k as GridGroupByItem).field == field);\n\n                puma(\"#\" + this._elementId + \"_divContainer\").find(\".groupBy\" + field).hide();\n            }\n\n            if ((options.groupBy as GridGroupBySettings).fields == null || ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).length == 0)\n                options.groupBy = null;\n\n            if (updateDataSource)\n            {\n                if (options.serverBinding !== false)\n                    this.rebind();\n                else\n                    this.update();\n            }\n        }\n    }\n\n    removeAllGroups(updateDataSource = true)\n    {\n        this.removeSort(false);\n        let options = this.getOptions();\n        if (options.groupable! && options.groupBy != null)\n            this.removeGroups(((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field), false);\n\n        options.groupBy = null;\n        if (updateDataSource)\n        {\n            if (options.serverBinding !== false)\n                this.rebind();\n            else\n                this.update();\n        }\n    }\n\n    addGroup(field: string | GridGroupByItem, updateDataSource = true, sortBy?: GridSortSettings, internalSortBy?: GridSortSettings)\n    {\n        this.addGroups([field], updateDataSource, sortBy, internalSortBy);\n    }\n\n    addGroups(fields: (string | GridGroupByItem)[], updateDataSource = true, sortBy?: GridSortSettings, internalSortBy?: GridSortSettings)\n    {\n        if (fields.length == 0)\n            return;\n\n        let options = this.getOptions();\n        if (options.groupBy == null)\n            options.groupBy = new GridGroupBySettings();\n        else\n        {\n            if (options.groupBy != null && (options.groupBy as GridGroupBySettings).fields != null && (options.groupBy as GridGroupBySettings).fields.length > 0)\n            {\n                // If grid is grouped, then remove all groups and re-added all\n                let allFields: any[] = UtilityManager.duplicate((options.groupBy as GridGroupBySettings).fields);\n                for (let field of fields)\n                {\n                    let realField = \"\";\n                    if (typeof (field) == \"string\")\n                        realField = field;\n                    else\n                        realField = field.field;\n\n                    if (!allFields.map(k => k.field).includes(realField))\n                        allFields.push(field);\n                }\n\n                this.removeAllGroups(false);\n                this.addGroups(allFields, updateDataSource, sortBy, internalSortBy);\n                return;\n            }\n        }\n\n        if (!options.groupable)\n            throw new Error(\"Griglia non raggruppabile! Mettere opzione .groupable: true\");\n\n        if (sortBy != null)\n            (options.groupBy as GridGroupBySettings).sortBy = sortBy;\n\n        if (internalSortBy != null)\n            (options.groupBy as GridGroupBySettings).internalSortBy = internalSortBy;\n\n        for (let field of fields)\n        {\n            let groupByItem = field;\n            if (typeof (field) == \"string\")\n            {\n                groupByItem = new GridGroupByItem();\n                groupByItem.field = field;\n            }\n\n            if ((options.groupBy as GridGroupBySettings).fields == null) (options.groupBy as GridGroupBySettings).fields = [];\n            if (!((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes((groupByItem as GridGroupByItem).field))\n                ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).push(groupByItem as GridGroupByItem);\n\n            let groupByField = field;\n            if (typeof (field) != \"string\")\n                groupByField = field.field;\n\n            puma(\"#\" + this._elementId + \"_divContainer\").find(\".groupBy\" + groupByField).show();\n\n            let headerClasses = Array.from(puma(this._divHeader).find(\">table tr:first-child th\")).map(k => (k as any).classList[0]);\n            if (!headerClasses.includes(\"groupBy\" + (groupByItem as GridGroupByItem).field))\n                puma(this._divHeader).find(\">table tr:first-child\").vrPrependPuma(\"<th class='groupBy\" + (groupByItem as GridGroupByItem).field + \" groupByHeader' field='\" + (groupByItem as GridGroupByItem).field + \"'></th>\");\n\n            let filterClasses = Array.from(puma(this._divFilters).find(\">table tr:first-child td\")).map(k => (k as any).classList[0]);\n            if (!filterClasses.includes(\"groupBy\" + (groupByItem as GridGroupByItem).field))\n                puma(this._divFilters).find(\">table tr:first-child\").vrPrependPuma(\"<td class='groupBy\" + (groupByItem as GridGroupByItem).field + \" groupByFilter'></td>\");\n\n            if (options.lockable)\n            {\n                let headerLockedClasses = Array.from(puma(this._divHeaderLocked).find(\">table tr:first-child th\")).map(k => (k as any).classList[0]);\n                if (!headerLockedClasses.includes(\"groupBy\" + (groupByItem as GridGroupByItem).field))\n                    puma(this._divHeaderLocked).find(\">table tr:first-child\").vrPrependPuma(\"<th class='groupBy\" + (groupByItem as GridGroupByItem).field + \" groupByHeader' field='\" + (groupByItem as GridGroupByItem).field + \"'></th>\");\n\n                let filterLockedClasses = Array.from(puma(this._divFiltersLocked).find(\">table tr:first-child td\")).map(k => (k as any).classList[0]);\n                if (!filterLockedClasses.includes(\"groupBy\" + (groupByItem as GridGroupByItem).field))\n                    puma(this._divFiltersLocked).find(\">table tr:first-child\").vrPrependPuma(\"<td class='groupBy\" + (groupByItem as GridGroupByItem).field + \" groupByFilter'></td>\");\n            }\n\n            let columnFields = options.columns!.map(k => k.field);\n            if (!columnFields.includes((groupByItem as GridGroupByItem).field))\n                options.columns!.push({ field: (groupByItem as GridGroupByItem).field, hidden: true });\n        }\n\n        this.sortingGroupFields(this.dataSource());\n\n        if (updateDataSource)\n        {\n            if (options.serverBinding !== false)\n                this.rebind();\n            else\n                this.update();\n        }\n    }\n\n    private getChildrenGroupRows(tr: HTMLElement, divBody: HTMLElement)\n    {\n        let childrenGroupRows: GridChildrenGroupRows = new GridChildrenGroupRows();\n        let childrenList: HTMLElement[] = [];\n\n        //#region Group level\n        let level = Number(puma(tr).attr(\"level\"));\n        let i = puma(tr).index() + 2;\n        let childrenRow = puma(divBody).find(\"tr:nth-child(\" + i + \")\");\n        let childrenLevel = Number(puma(divBody).find(\"tr:nth-child(\" + i + \")\").attr(\"level\"));\n        childrenList.push(childrenRow[0]);\n        //#endregion\n\n        //#region Get children\n        while ((level == 0 && childrenLevel != level) || (level != childrenLevel && !childrenRow.hasClass(\"grid_trGroupBy\")))\n        {\n            if (childrenRow.length == 0)\n                break;\n\n            if (!childrenList.map(k => puma(k).attr(\"id\")).includes(childrenRow.attr(\"id\")) || childrenRow.hasClass(\"grid_trGroupBy\"))\n                childrenList.push(childrenRow[0]);\n\n            i++;\n            childrenRow = puma(divBody).find(\"tr:nth-child(\" + i + \")\");\n            childrenLevel = Number(puma(divBody).find(\"tr:nth-child(\" + i + \")\").attr(\"level\"));\n        }\n        //#endregion\n\n        childrenList = childrenList.filter(k => !puma(k).hasClass(\"p-grid-totalsGroup\"));\n        childrenGroupRows.children = childrenList.filter(k => !puma(k).hasClass(\"grid_trGroupBy\"));\n        childrenGroupRows.groupRows = childrenList.filter(k => puma(k).hasClass(\"grid_trGroupBy\"));\n        childrenGroupRows.allRows = childrenList;\n        return childrenGroupRows;\n    }\n\n    private getCheckedChildrenGroupRows(tr: HTMLElement, divBody: HTMLElement)\n    {\n        let checkedChildren = [];\n        let childrenRows = this.getChildrenGroupRows(tr, divBody);\n        for (let childRow of childrenRows.children)\n        {\n            let checkBox = puma(childRow).find(\".vr-checkbox-column\")[0] as HTMLInputElement;\n            if (checkBox != null && checkBox.checked)\n                checkedChildren.push(childRow);\n        }\n        return checkedChildren;\n    }\n    //#endregion\n\n    //#region Table actions (Show/Hide & GroupBy)\n    private createWindowActions()\n    {\n        if (this._wndActions != null)\n            return;\n\n        this._wndActions = createWindow(\n            {\n                addToControlList: false,\n                width: 530,\n                height: 400,\n                closeable: false,\n                title: \"Mostra/Nascondi colonne\",\n                classContainer: this.element().id + \"_wndUtility\",\n                onClose: (e) =>\n                {\n                    puma(this._wndActions.container()).remove();\n                    (this._wndActions as any) = null;\n                },\n                footer:\n                    [\n                        {\n                            type: WindowFooterItemTypeEnum.Custom, text: \"Reimposta\", mode: ButtonModeEnum.Primary,\n                            value: \"restoreOriginal\", icon: IconClassicLight.RotateLeft, align: WindowFooterItemAlignEnum.Left,\n                            onClick: (e) =>\n                            {\n                                let wndTableActionsContainer = puma(\"#\" + this._elementId + \"_divWindowTableActionsContainer\");\n                                for (let checkBoxElement of Array.from<HTMLInputElement>(wndTableActionsContainer.find(\"input\")))\n                                {\n                                    let checkBox = ControlManager.get<CheckBox>(checkBoxElement.id);\n                                    let field = puma(checkBoxElement).attr(\"field\");\n\n                                    let newValue = !this._originalHiddenColumnFields.includes(field);\n                                    if (checkBox.checked() != newValue)\n                                        checkBox.checked(newValue);\n                                }\n                            }\n                        },\n                        {\n                            type: WindowFooterItemTypeEnum.Custom, text: \"Seleziona tutti\", mode: ButtonModeEnum.Primary,\n                            value: \"checkAll\", icon: IconClassicLight.Check, align: WindowFooterItemAlignEnum.Left,\n                            onClick: (e) =>\n                            {\n                                let wndTableActionsContainer = puma(\"#\" + this._elementId + \"_divWindowTableActionsContainer\");\n                                for (let checkBoxElement of Array.from<HTMLInputElement>(wndTableActionsContainer.find(\"input\")))\n                                {\n                                    let checkBox = ControlManager.get<CheckBox>(checkBoxElement.id);\n                                    if (!checkBox.checked())\n                                        checkBox.checked(true, true);\n                                }\n                            }\n                        },\n                        {\n                            type: WindowFooterItemTypeEnum.Custom, text: \"Deseleziona tutti\", icon: IconClassicLight.Check,\n                            align: WindowFooterItemAlignEnum.Left,\n                            onClick: (e) =>\n                            {\n                                let wndTableActionsContainer = puma(\"#\" + this._elementId + \"_divWindowTableActionsContainer\");\n                                for (let checkBoxElement of Array.from<HTMLInputElement>(wndTableActionsContainer.find(\"input\")))\n                                {\n                                    let checkBox = ControlManager.get<CheckBox>(checkBoxElement.id);\n                                    if (checkBox.checked())\n                                        checkBox.checked(false, true);\n                                }\n                            }\n                        },\n                        { type: WindowFooterItemTypeEnum.Close, align: WindowFooterItemAlignEnum.Right },\n                        { type: WindowFooterItemTypeEnum.Ok, value: \"ok\", text: \"Applica\", align: WindowFooterItemAlignEnum.Right }\n                    ]\n            });\n        puma(this._wndActions.element()).vrAppendPuma(\"<div id='\" + this._elementId + \"_divWindowTableActionsContainer'  class='vrContainer'></div>\");\n    }\n\n    private openWindowActions(gridActionEnum: GridActionEnum)\n    {\n        this.createWindowActions();\n\n        let groupFieldAddedList: string[] = [];\n        let groupFieldRemovedList: string[] = [];\n        let columnFieldToShowList: string[] = [];\n        let columnFieldToHideList: string[] = [];\n        let columnFieldToLockList: string[] = [];\n        let columnFieldToUnlockList: string[] = [];\n        let editTableActions = false;\n\n        let options = this.getOptions();\n        this._wndActions.open([\n            {\n                value: \"ok\", callback: () =>\n                {\n                    if (!editTableActions)\n                        return;\n\n                    if (this.dataSource().length > 1000)\n                        showLoader();\n\n                    this._wndActions.close();\n                    window.setTimeout(() =>\n                    {\n                        if (gridActionEnum == GridActionEnum.GroupBy && (groupFieldRemovedList.length > 0 || groupFieldAddedList.length > 0))\n                        {\n                            //#region Manage groups\n                            this.removeGroups(groupFieldRemovedList, false);\n                            this.addGroups(groupFieldAddedList, false);\n                            if (options.serverBinding !== false)\n                                this.rebind();\n                            else\n                                this.update();\n                            //#endregion\n                        }\n                        else if (gridActionEnum == GridActionEnum.ShowHide && (columnFieldToShowList.length > 0 || columnFieldToHideList.length > 0))\n                        {\n                            //#region Show/Hide\n                            this.showColumns(columnFieldToShowList, false);\n                            this.hideColumns(columnFieldToHideList, false);\n                            this.removeFilters(columnFieldToHideList, false);\n\n                            if (columnFieldToHideList.length > 0)\n                                this.applyFilters(true);\n                            else\n                                this.update();\n                            //#endregion\n                        }\n                        else if (gridActionEnum == GridActionEnum.LockUnlock && (columnFieldToLockList.length > 0 || columnFieldToUnlockList.length > 0))\n                        {\n                            //#region Lock/Unlock\n                            if (columnFieldToLockList.length > 0 || (this.lockedColumns().length - columnFieldToUnlockList.length > 0))\n                            {\n                                this.lockColumns(columnFieldToLockList, false);\n                                this.unlockColumns(columnFieldToUnlockList, false);\n                                this.update();\n                            }\n                            else\n                            {\n                                confirm(\"Vuoi ripristinare il layout di base?\").then(() =>\n                                {\n                                    this.lockColumns(columnFieldToLockList, false);\n                                    this.unlockColumns(columnFieldToUnlockList, false);\n\n                                    this._actualLayout = null;\n                                    this.changeLayout(true, this._originalOptionsForLayout);\n                                },\n                                    () => \n                                    {\n                                        this.lockColumns(columnFieldToLockList, false);\n                                        this.unlockColumns(columnFieldToUnlockList, false);\n                                        this.update()\n                                    });\n                            }\n                            //#endregion\n                        }\n\n                        hideLoader();\n                    }, 100)\n                }\n            }]);\n        this.clearWindowActions();\n\n        let divContainer = puma(\"#\" + this._elementId + \"_divWindowTableActionsContainer\")[0];\n        divContainer.style.cssText += \"overflow-y: auto;\";\n\n        if (gridActionEnum == GridActionEnum.ShowHide)\n            this._wndActions.title(\"Mostra o nascondi colonne\");\n        else if (gridActionEnum == GridActionEnum.GroupBy)\n            this._wndActions.title(\"Raggruppa per colonne\");\n        else if (gridActionEnum == GridActionEnum.LockUnlock)\n            this._wndActions.title(\"Blocca o sblocca colonne\");\n\n        //#region Write columns\n        for (let column of options.columns!)\n        {\n            if (column.type == GridColumnTypeEnum.EditButton || column.title === \"\" || column.title == null)\n                continue;\n\n            if ((gridActionEnum == GridActionEnum.ShowHide && column.hideable === false)\n                || (gridActionEnum == GridActionEnum.GroupBy && column.groupable === false)\n                || (gridActionEnum == GridActionEnum.LockUnlock && column.lockable === false))\n                continue;\n\n            let div = puma(\"<div id='\" + this._elementId + \"_divActionColumn\" + column.field + \"' field='\" + column.field + \"' class='grid_divActionColumn'></div>\").vrAppendToPuma(divContainer);\n\n            //#region CheckBox\n            let checked = false;\n            if (gridActionEnum == GridActionEnum.ShowHide)\n            {\n                checked = (column.hidden !== true);\n                this._wndActions.footerItem(\"restoreOriginal\")!.show();\n            }\n            else if (gridActionEnum == GridActionEnum.GroupBy)\n            {\n                checked = (options.groupable! && options.groupBy != null && (options.groupBy as GridGroupBySettings).fields != null) ? (((options.groupBy! as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(column.field)) : false;\n                this._wndActions.footerItem(\"restoreOriginal\")!.hide();\n            }\n            else if (gridActionEnum == GridActionEnum.LockUnlock)\n            {\n                checked = (column.locked === true);\n                this._wndActions.footerItem(\"restoreOriginal\")!.hide();\n                this._wndActions.footerItem(\"checkAll\")!.hide();\n            }\n\n            let checkBoxElement = puma(\"<input id='\" + this._elementId + \"_chkActionColumn\" + column.field + \"' field='\" + column.field + \"' />\").vrAppendToPuma(div);\n            createCheckBox(\n                {\n                    checked: checked,\n                    text: column.title,\n                    cssContainer: \"width: 100%\",\n                    onCheck: (e) =>\n                    {\n                        editTableActions = true;\n                        let field = puma(e.sender.element()).attr(\"field\");\n\n                        if (gridActionEnum == GridActionEnum.ShowHide)\n                        {\n                            //#region Show/Hide\n                            if (e.checked && !columnFieldToShowList.includes(field))\n                            {\n                                columnFieldToShowList.push(field);\n                                if (columnFieldToHideList.includes(field))\n                                    columnFieldToHideList.vrDelete(field);\n                            }\n                            else if (!e.checked && !columnFieldToHideList.includes(field))\n                            {\n                                columnFieldToHideList.push(field);\n                                if (columnFieldToShowList.includes(field))\n                                    columnFieldToShowList.vrDelete(field);\n                            }\n                            //#endregion\n                        }\n                        else if (gridActionEnum == GridActionEnum.GroupBy)\n                        {\n                            //#region Manage groups\n                            if (e.checked && !groupFieldAddedList.includes(field)) // Add\n                            {\n                                groupFieldAddedList.push(field);\n                                if (groupFieldRemovedList.includes(field))\n                                    groupFieldRemovedList.vrDelete(field);\n                            }\n                            else if (!e.checked && !groupFieldRemovedList.includes(field)) // Remove\n                            {\n                                groupFieldRemovedList.push(field);\n                                if (groupFieldAddedList.includes(field))\n                                    groupFieldAddedList.vrDelete(field);\n                            }\n                            //#endregion\n                        }\n                        else if (gridActionEnum == GridActionEnum.LockUnlock)\n                        {\n                            //#region Lock/Unlock\n                            if (e.checked && !columnFieldToLockList.includes(field))\n                            {\n                                columnFieldToLockList.push(field);\n                                if (columnFieldToUnlockList.includes(field))\n                                    columnFieldToUnlockList.vrDelete(field);\n                            }\n                            else if (!e.checked && !columnFieldToUnlockList.includes(field))\n                            {\n                                columnFieldToUnlockList.push(field);\n                                if (columnFieldToLockList.includes(field))\n                                    columnFieldToLockList.vrDelete(field);\n                            }\n                            //#endregion\n                        }\n                    }\n                }, null, null, this._elementId + \"_chkActionColumn\" + column.field);\n            //#endregion\n        }\n        //#endregion\n    }\n\n    private clearWindowActions()\n    {\n        puma(\"#\" + this._elementId + \"_divWindowTableActionsContainer\").empty();\n    }\n    //#endregion\n\n    //#region Filtering\n    private manageFilterTextByColumn(textToSearch: string, column: GridColumn, field: string, backSpace: boolean)\n    {\n        let filteredArray: any[] = [];\n        if (column.type == GridColumnTypeEnum.Custom)\n        {\n            //#region Custom column\n            filteredArray = this._originalDataSource.filter(k => \n            {\n                let properties = (column.customFilterProperties != null && column.customFilterProperties.length > 0) ? column.customFilterProperties : Object.keys(k);\n                for (let value in k)\n                {\n                    if (!properties.includes(value))\n                        continue;\n\n                    if (String(k[value]).toLowerCase().indexOf(textToSearch) != -1)\n                        return true;\n                }\n                return false;\n            });\n            //#endregion\n        }\n        else\n            filteredArray = this.getFilteredArrayByInputText(field, textToSearch);\n\n        if (!Array.vrEquals(filteredArray, this.dataSource()) || column.filterWebService === true)\n        {\n            this._timeoutFilterText = window.setTimeout(() =>\n            {\n                this.removeFilter(column.field, false);\n                if (column.filterWebService === true)\n                {\n                    //#region Add filter condition\n                    let filterSettings = new GridFilterSettings();\n                    filterSettings.type = column.type!;\n                    filterSettings.stringFilterSettings = new GridStringFilterSettings();\n                    filterSettings.stringFilterSettings.filterTypeEnum = GridStringFilterTypeEnum.IncludesFromSimpleSearch;\n                    filterSettings.stringFilterSettings.text = textToSearch.toLowerCase();\n                    this.updateFilter(column.field, filterSettings, false);\n                    //#endregion\n\n                    this.rebind(null, true);\n                }\n                else\n                {\n                    this.pageSelected(1, false);\n                    this.setDataSource(filteredArray);\n\n                    if (this._dictionaryFilterConditions.size > 0)\n                        this.applyFilters();\n\n                    //#region Add filter condition\n                    let filterSettings = new GridFilterSettings();\n                    filterSettings.type = column.type!;\n                    filterSettings.stringFilterSettings = new GridStringFilterSettings();\n                    filterSettings.stringFilterSettings.filterTypeEnum = GridStringFilterTypeEnum.IncludesFromSimpleSearch;\n                    filterSettings.stringFilterSettings.text = textToSearch.toLowerCase();\n                    this.updateFilter(column.field, filterSettings, false);\n                    //#endregion\n                }\n            }, 500);\n        }\n    }\n\n    clearFilters(updateDataSource = true, rebind = false)\n    {\n        let options = this.getOptions();\n        this._dictionaryFilterConditions.forEach((value, key) =>\n        {\n            //#region Type\n            let column = options.columns!.find(k => k.field == key)!;\n            switch (column.type)\n            {\n                case GridColumnTypeEnum.Checkbox:\n                case GridColumnTypeEnum.Boolean:\n                    {\n                        let checkboxJq = puma(\"#\" + this._elementId + \"_CheckboxFilter_\" + column.field);\n                        checkboxJq.addClass(\"indeterminateVrCheckbox\");\n\n                        let checkbox = checkboxJq[0] as HTMLInputElement;\n                        checkbox.checked = false;\n                    }\n                    break;\n                case GridColumnTypeEnum.Date:\n                    {\n                        let dateFilter = ControlManager.get<Button>(this._elementId + \"_DateFilter_\" + column.field);\n                        dateFilter.tooltip(\"\");\n                        puma(dateFilter.element()).css(\"background-color\", \"#f3f3f3\");\n                        puma(dateFilter.element()).css(\"color\", \"#000\");\n\n                        let dateFilterRemove = ControlManager.get<Button>(this._elementId + \"_DateFilterRemove_\" + column.field);\n                        dateFilterRemove.hide();\n                        this.recalculateHeight(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Percentage:\n                case GridColumnTypeEnum.Duration:\n                    {\n                        let numberFilter = ControlManager.get<Button>(this._elementId + \"_NumberFilter_\" + column.field);\n                        numberFilter.tooltip(\"\");\n                        puma(numberFilter.element()).css(\"background-color\", \"#f3f3f3\");\n                        puma(numberFilter.element()).css(\"color\", \"#000\");\n\n                        let numberFilterRemove = ControlManager.get<Button>(this._elementId + \"_NumberFilterRemove_\" + column.field);\n                        numberFilterRemove.hide();\n                        this.recalculateHeight(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.String:\n                case GridColumnTypeEnum.Custom:\n                case GridColumnTypeEnum.Label:\n                    {\n                        let textBox = ControlManager.get<TextBox>(this._elementId + \"_StringFilter_\" + column.field);\n                        textBox.clear();\n                        textBox.width(\"Calc(100% - 27px)\");\n\n                        let stringFilter = ControlManager.get<Button>(this._elementId + \"_StringFilterBtn_\" + column.field);\n                        stringFilter.tooltip(\"\");\n                        puma(stringFilter.element()).css(\"background-color\", \"#f3f3f3\");\n                        puma(stringFilter.element()).css(\"color\", \"#000\");\n\n                        let stringFilterRemove = ControlManager.get<Button>(this._elementId + \"_StringFilterBtnRemove_\" + column.field);\n                        stringFilterRemove.hide();\n                        this.recalculateHeight(true);\n                    }\n                    break;\n            }\n            //#endregion\n\n            this.removeFilter(key, false);\n        });\n\n        if (updateDataSource)\n            this.update();\n\n        if (rebind)\n            this.rebind();\n    }\n\n    private getFilteredArrayByInputText(field: string, value: string)\n    {\n        value = value.toLowerCase();\n        let filteredArray: any[] = [];\n\n        let arrayWhereSearch = this._dictionaryDataValues.get(field);\n        arrayWhereSearch!.forEach((k, index) => \n        {\n            if (k.indexOf(value) !== -1)\n                filteredArray.push(this._originalDataSource[index]);\n        });\n        return filteredArray;\n    }\n\n    private createWindowFiltering()\n    {\n        if (this._wndFiltering != null)\n            return;\n\n        let options = this.getOptions();\n\n        this._wndFiltering = createWindow(\n            {\n                addToControlList: false,\n                classContainer: this.element().id + \"_wndUtility\",\n                width: 430,\n                autoSize: WindowAutoSizeDirectionEnum.Height,\n                title: \"Gestisci filtro\",\n                onClose: (e) =>\n                {\n                    puma(this._wndFiltering.container()).remove();\n                    (this._wndFiltering as any) = null;\n                },\n                footer:\n                    [\n                        { type: WindowFooterItemTypeEnum.Ok, text: \"Applica\" },\n                        { type: WindowFooterItemTypeEnum.Close },\n                        { type: WindowFooterItemTypeEnum.Separator, value: \"removeFilterSeparator\" },\n                        { type: WindowFooterItemTypeEnum.Custom, text: \"Rimuovi filtro\", value: \"removeFilter\", cssContainer: \"margin-right: 18px;\" }\n                    ]\n            });\n\n        puma(this._wndFiltering.element()).vrAppendPuma(\"<div id='\" + this._elementId + \"_divWindowFilteringContainer' class='vrContainer'></div>\");\n        let divContainer = puma(\"#\" + this._elementId + \"_divWindowFilteringContainer\")[0];\n\n        puma(\"<div id='\" + this._elementId + \"_switchFilterSearch'></div>\").vrAppendToPuma(divContainer);\n        createSwitch({\n            labelOff: \"Ricerca con parametri\",\n            labelOn: { text: \"Ricerca puntuale\", tooltip: \"Max 100 valori\" },\n            cssContainer: \"margin-bottom: 5px;\",\n            visible: options.serverBinding == null || options.serverBinding === false,\n            onChange: (e) =>\n            {\n                puma(divSearchIntervals).vrVisible(!e.checked);\n                puma(divSearchSpecific).vrVisible(e.checked);\n                let lblCheckboxSelected = this._wndFiltering.footerItem<Label>(\"lblCheckboxSelectedSpecificValues\");\n                lblCheckboxSelected.visible(e.checked);\n\n                this._wndFiltering.center();\n                if (e.checked)\n                    txtFilterSpecificValues.focus();\n            }\n        }, null, null, this._elementId + \"_switchFilterSearch\")\n\n        //#region Search intervals\n        let divSearchIntervals = div(divContainer);\n\n        //#region Filter date\n        let divFilterDate = puma(\"<div id='\" + this._elementId + \"DivFilterDate' style='display: none;'></div>\").vrAppendToPuma(divSearchIntervals);\n        let dateFilterType = puma(\"<div id='\" + this._elementId + \"_ddlFilterDateType'></div>\").vrAppendToPuma(divFilterDate);\n\n        let datePickerDateFilterValueFrom: DatePicker;\n        let datePickerDateFilterValueTo: DatePicker;\n        let datePickerDateTimeFilterValueFrom: DatePicker;\n        let datePickerDateTimeFilterValueTo: DatePicker;\n        let numericTextBoxFilterValueTo: TextBox;\n        createComboBox(\n            {\n                mode: ComboBoxTypeEnum.DropDown,\n                label: \"Tipo di filtro\",\n                width: \"100%\",\n                cssContainer: \"margin-bottom: 10px;\",\n                items:\n                    [\n                        { text: \"Data maggiore di\", value: String(GridDateFilterTypeEnum.GreaterThan) },\n                        { text: \"Data minore di\", value: String(GridDateFilterTypeEnum.LessThan) },\n                        { text: \"Data uguale a\", value: String(GridDateFilterTypeEnum.EqualsTo) },\n                        { text: \"Data compresa tra\", value: String(GridDateFilterTypeEnum.Between) }\n                    ],\n                onAfterChange: (e) =>\n                {\n                    if (datePickerDateFilterValueTo == null || datePickerDateTimeFilterValueTo == null)\n                        return;\n\n                    if (Number(e.sender.value()) == GridDateFilterTypeEnum.Between)\n                    {\n                        if (datePickerDateFilterValueFrom.visible())\n                            datePickerDateFilterValueTo.show();\n                        else\n                            datePickerDateTimeFilterValueTo.show();\n                    }\n                    else\n                    {\n                        if (datePickerDateFilterValueFrom.visible())\n                            datePickerDateFilterValueTo.hide();\n                        else\n                            datePickerDateTimeFilterValueTo.hide();\n                    }\n                }\n            }, null, null, this._elementId + \"_ddlFilterDateType\");\n\n        //#region Date/Time\n        puma(\"<input id='\" + this._elementId + \"_dtpFilterDateFrom' />\").vrAppendToPuma(divFilterDate);\n        datePickerDateFilterValueFrom = createDatePicker(\n            {\n                width: 200,\n                cssContainer: \"margin-right: 5px;\"\n            }, null, null, this._elementId + \"_dtpFilterDateFrom\");\n\n        puma(\"<input id='\" + this._elementId + \"_dtpFilterDateTo' />\").vrAppendToPuma(divFilterDate);\n        datePickerDateFilterValueTo = createDatePicker(\n            {\n                width: 198,\n                label: \"e\",\n                labelSettings: { position: PositionEnum.Left },\n                visible: false\n            }, null, null, this._elementId + \"_dtpFilterDateTo\");\n        //#endregion\n\n        //#region DateTime\n        puma(\"<input id='\" + this._elementId + \"_dtpDateTimeFilterDateFrom' />\").vrAppendToPuma(divFilterDate);\n        datePickerDateTimeFilterValueFrom = createDatePicker(\n            {\n                width: 200,\n                cssContainer: \"margin-right: 5px;\",\n                visible: false,\n                mode: DateModeEnum.DateTime\n            }, null, null, this._elementId + \"_dtpDateTimeFilterDateFrom\");\n\n        puma(\"<input id='\" + this._elementId + \"_dtpDateTimeFilterDateTo' />\").vrAppendToPuma(divFilterDate);\n        datePickerDateTimeFilterValueTo = createDatePicker(\n            {\n                width: 198,\n                label: \"e\",\n                labelSettings: { position: PositionEnum.Left },\n                visible: false,\n                mode: DateModeEnum.DateTime\n            }, null, null, this._elementId + \"_dtpDateTimeFilterDateTo\");\n        //#endregion\n\n        //#endregion\n\n        //#region Filter number\n        let divFilterNumber = puma(\"<div id='\" + this._elementId + \"DivFilterNumber' style='display: none;'></div>\").vrAppendToPuma(divSearchIntervals);\n        puma(\"<div id='\" + this._elementId + \"_ddlFilterNumberType'></div>\").vrAppendToPuma(divFilterNumber);\n        createComboBox(\n            {\n                mode: ComboBoxTypeEnum.DropDown,\n                label: \"Tipo di filtro\",\n                width: \"100%\",\n                cssContainer: \"margin-bottom: 10px;\",\n                items:\n                    [\n                        { text: \"Numero maggiore di\", value: String(GridNumberFilterTypeEnum.GreaterThan) },\n                        { text: \"Numero minore di\", value: String(GridNumberFilterTypeEnum.LessThan) },\n                        { text: \"Numero uguale a\", value: String(GridNumberFilterTypeEnum.EqualsTo) },\n                        { text: \"Numero compreso tra\", value: String(GridNumberFilterTypeEnum.Between) }\n                    ],\n                onAfterChange: (e) =>\n                {\n                    if (numericTextBoxFilterValueTo == null)\n                        return;\n\n                    if (Number(e.sender.value()) == GridNumberFilterTypeEnum.Between)\n                        numericTextBoxFilterValueTo.show();\n                    else\n                        numericTextBoxFilterValueTo.hide();\n                }\n            }, null, null, this._elementId + \"_ddlFilterNumberType\");\n\n        puma(\"<input id='\" + this._elementId + \"_ntbFilterNumberFrom' />\").vrAppendToPuma(divFilterNumber);\n        createTextBox(\n            {\n                mode: TextModeEnum.Numeric,\n                cssContainer: \"margin-right: 5px;\",\n                decimals: 2,\n                validation: { minValue: 0 }\n            }, null, null, this._elementId + \"_ntbFilterNumberFrom\");\n\n        puma(\"<input id='\" + this._elementId + \"_ntbFilterNumberTo' />\").vrAppendToPuma(divFilterNumber);\n        numericTextBoxFilterValueTo = createTextBox(\n            {\n                mode: TextModeEnum.Numeric,\n                label: \"e\",\n                labelSettings: { position: PositionEnum.Left },\n                visible: false,\n                decimals: 2\n            }, null, null, this._elementId + \"_ntbFilterNumberTo\");\n        //#endregion\n\n        //#region Filter string\n        let divFilterString = puma(\"<div id='\" + this._elementId + \"DivFilterString' style='display: none;'></div>\").vrAppendToPuma(divSearchIntervals);\n        puma(\"<div id='\" + this._elementId + \"_ddlFilterStringType'></div>\").vrAppendToPuma(divFilterString);\n        createComboBox(\n            {\n                mode: ComboBoxTypeEnum.DropDown,\n                label: \"Tipo di filtro\",\n                width: \"100%\",\n                cssContainer: \"margin-bottom: 10px;\",\n                items:\n                    [\n                        { text: \"Inizia con\", value: String(GridStringFilterTypeEnum.StartsWith) },\n                        { text: \"Finisce con\", value: String(GridStringFilterTypeEnum.EndsWith) },\n                        { text: \"Uguale a\", value: String(GridStringFilterTypeEnum.EqualsTo) },\n                        { text: \"Contiene\", value: String(GridStringFilterTypeEnum.Includes) }\n                    ],\n                onAfterChange: (e) =>\n                {\n                    if (numericTextBoxFilterValueTo == null)\n                        return;\n\n                    if (Number(e.sender.value()) == GridNumberFilterTypeEnum.Between)\n                        numericTextBoxFilterValueTo.show();\n                    else\n                        numericTextBoxFilterValueTo.hide();\n                }\n            }, null, null, this._elementId + \"_ddlFilterStringType\");\n\n        puma(\"<input id='\" + this._elementId + \"_txtFilterStringValue' />\").vrAppendToPuma(divFilterString);\n        createTextBox(\n            {\n                width: \"100%\",\n            }, null, null, this._elementId + \"_txtFilterStringValue\");\n        //#endregion\n\n        //#endregion\n\n        //#region Search specific vlaues\n        let divSearchSpecific = div(divContainer, { css: \"display: none;\", class: \"vrGridDivSpecificValues\" });\n        let divFilterSpecificValues = div(divSearchSpecific);\n        let timeoutSearch = 0;\n\n        createCheckBox({\n            cssContainer: \"top: 4px;\",\n            onCheck: (e) =>\n            {\n                let allCheckboxes = Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\"));\n                for (let checkbox of allCheckboxes)\n                    checkbox.checked = e.checked;\n\n                puma(e.sender.element()).removeClass(\"indeterminateVrCheckbox\");\n                let lblCheckboxSelected = this._wndFiltering.footerItem<Label>(\"lblCheckboxSelectedSpecificValues\");\n                if (e.checked)\n                    lblCheckboxSelected.value(allCheckboxes.length + \" di \" + allCheckboxes.length + \" elementi\");\n                else\n                    lblCheckboxSelected.value(allCheckboxes.length + \" elementi\");\n            }\n        }, divFilterSpecificValues, null, this._elementId + \"_checkAllFilterSearchSpecificValues\")\n\n        let txtFilterSpecificValues = createTextBox({\n            width: \"Calc(100% - 27px)\",\n            css: \"border: solid 1px #ddd !important;\",\n            onKeyUp: (e) =>\n            {\n                window.clearTimeout(timeoutSearch);\n                timeoutSearch = window.setTimeout(() =>\n                {\n                    let checkboxToShowList = [];\n                    let checkboxToHideList = [];\n                    for (let checkbox of Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\")))\n                    {\n                        if (e.value != \"\")\n                        {\n                            let tag = String(JSON.parse(checkbox.getAttribute(\"tag\")!));\n                            if (tag.toLowerCase().indexOf(String(e.value!).toLowerCase()) !== -1)\n                                checkboxToShowList.push(checkbox.parentElement!);\n                            else\n                                checkboxToHideList.push(checkbox.parentElement!);\n                        }\n                        else\n                            checkboxToShowList.push(checkbox.parentElement!);\n                    }\n\n                    for (let checkboxToShow of checkboxToShowList) checkboxToShow.style.display = \"flex\";\n                    for (let checkboxToHide of checkboxToHideList) checkboxToHide.style.display = \"none\";\n                }, 300)\n            }\n        }, divFilterSpecificValues, null, this._elementId + \"_txtFilterSearchSpecificValues\")\n\n        let dtpFilterSpecificValues = createDatePicker({\n            width: \"Calc(100% - 27px)\",\n            css: \"border: solid 1px #ddd !important;\",\n            onAfterChange: (e) =>\n            {\n                let checkboxToShowList = [];\n                let checkboxToHideList = [];\n                for (let checkbox of Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\")))\n                {\n                    if (e.value != null)\n                    {\n                        e.value.setHours(0, 0, 0);\n                        let tag = new Date(JSON.parse(checkbox.getAttribute(\"tag\")!));\n                        if (Date.vrEquals(tag, e.value))\n                            checkboxToShowList.push(checkbox.parentElement!);\n                        else\n                            checkboxToHideList.push(checkbox.parentElement!);\n                    }\n                    else\n                        checkboxToShowList.push(checkbox.parentElement!);\n                }\n\n                for (let checkboxToShow of checkboxToShowList) checkboxToShow.style.display = \"flex\";\n                for (let checkboxToHide of checkboxToHideList) checkboxToHide.style.display = \"none\";\n            }\n        }, divFilterSpecificValues, null, this._elementId + \"_dtpFilterSearchSpecificValues\")\n\n        let divSpecificValues = div(divSearchSpecific, { id: this._elementId + \"_specificValues\", css: \"height: 300px; overflow-y: auto;\" })\n\n        this._wndFiltering.addFooterItem({\n            type: WindowFooterItemTypeEnum.Label,\n            value: \"lblCheckboxSelectedSpecificValues\",\n            cssContainer: \"margin-left: 10px;\"\n        })\n        //#endregion\n    }\n\n    private openWindowFiltering(column: GridColumn)\n    {\n        this.createWindowFiltering();\n\n        this._wndFiltering.open([\n            { value: \"ok\", callback: () => this.saveWindowFiltering(column) },\n            {\n                value: \"removeFilter\", callback: () =>\n                {\n                    this._wndFiltering.close();\n                    this.removeFilter(column.field);\n                    this.recalculateHeight(true);\n\n                    switch (column.type)\n                    {\n                        case GridColumnTypeEnum.DateTime:\n                        case GridColumnTypeEnum.Time:\n                        case GridColumnTypeEnum.Date:\n                        case GridColumnTypeEnum.LongDate:\n                        case GridColumnTypeEnum.LongDateTime:\n                        case GridColumnTypeEnum.LongWeekDate:\n                        case GridColumnTypeEnum.ShortWeekDate:\n                            {\n                                let filterButton = ControlManager.get<Button>(this._elementId + \"_DateFilter_\" + column.field);\n                                puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                                puma(filterButton.element()).css(\"color\", \"#000\");\n\n                                let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_DateFilterRemove_\" + column.field);\n                                filterButtonRemove.hide();\n                            }\n                            break;\n                        case GridColumnTypeEnum.Number:\n                        case GridColumnTypeEnum.Currency:\n                        case GridColumnTypeEnum.Duration:\n                        case GridColumnTypeEnum.Percentage:\n                            {\n                                let filterButton = ControlManager.get<Button>(this._elementId + \"_NumberFilter_\" + column.field);\n                                puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                                puma(filterButton.element()).css(\"color\", \"#000\");\n\n                                let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_NumberFilterRemove_\" + column.field);\n                                filterButtonRemove.hide();\n                            }\n                            break;\n                        case GridColumnTypeEnum.String:\n                        case GridColumnTypeEnum.Label:\n                            {\n                                let filterButton = ControlManager.get<Button>(this._elementId + \"_StringFilterBtn_\" + column.field);\n                                puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                                puma(filterButton.element()).css(\"color\", \"#000\");\n\n                                let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_StringFilterBtnRemove_\" + column.field);\n                                filterButtonRemove.hide();\n\n                                let textBox = ControlManager.get<TextBox>(this._elementId + \"_StringFilter_\" + column.field);\n                                textBox.width(\"Calc(100% - 27px)\");\n                            }\n                            break;\n                    }\n                }\n            }\n        ]);\n        this.clearWindowFiltering();\n        this._wndFiltering.autoSize(WindowAutoSizeDirectionEnum.Height);\n\n        if (column.title != null)\n            this._wndFiltering.title(\"Filtro campo: '\" + column.title + \"'\");\n        else\n            this._wndFiltering.title(\"Imposta filtro\");\n\n        let dtpFrom = ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateFrom\");\n        let dtpTo = ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateTo\");\n        let dtpDateTimeFrom = ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateFrom\");\n        let dtpDateTimeTo = ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateTo\");\n        let ntbFrom = ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberFrom\");\n        let ntbTo = ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberTo\");\n        let txtStringValue = ControlManager.get<TextBox>(this._elementId + \"_txtFilterStringValue\");\n        let txtFilterSearchSpecificValues = ControlManager.get<TextBox>(this._elementId + \"_txtFilterSearchSpecificValues\");\n        let dtpFilterSearchSpecificValues = ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterSearchSpecificValues\");\n\n        //#region Hide/Show\n        switch (column.type!)\n        {\n            case GridColumnTypeEnum.DateTime:\n            case GridColumnTypeEnum.Time:\n            case GridColumnTypeEnum.Date:\n            case GridColumnTypeEnum.LongDate:\n            case GridColumnTypeEnum.LongDateTime:\n            case GridColumnTypeEnum.LongWeekDate:\n            case GridColumnTypeEnum.ShortWeekDate:\n                {\n                    puma(\"#\" + this._elementId + \"DivFilterDate\").show();\n                    puma(\"#\" + this._elementId + \"DivFilterNumber\").hide();\n                    puma(\"#\" + this._elementId + \"DivFilterString\").hide();\n                    txtFilterSearchSpecificValues.hide();\n                    dtpFilterSearchSpecificValues.show();\n\n                    switch (column.type!)\n                    {\n                        case GridColumnTypeEnum.DateTime:\n                        case GridColumnTypeEnum.LongDateTime:\n                            {\n                                dtpFrom.hide();\n                                dtpTo.hide();\n                                dtpDateTimeFrom.show();\n                            }\n                            break;\n                        case GridColumnTypeEnum.Time:\n                            {\n                                dtpFrom.show();\n                                dtpDateTimeFrom.hide();\n                                dtpDateTimeTo.hide();\n\n                                dtpFrom.mode(DateModeEnum.Time);\n                                dtpTo.mode(DateModeEnum.Time);\n\n                                let defaultDateMin = new Date();\n                                defaultDateMin.setHours(0, 0, 0, 1);\n                                dtpFrom.min(defaultDateMin);\n                                dtpTo.min(defaultDateMin);\n\n                                let defaultDateMax = new Date();\n                                defaultDateMax.setHours(23, 59, 59, 59);\n                                dtpFrom.max(defaultDateMax);\n                                dtpTo.max(defaultDateMax);\n                            }\n                            break;\n                        case GridColumnTypeEnum.Date:\n                        case GridColumnTypeEnum.LongDate:\n                        case GridColumnTypeEnum.LongWeekDate:\n                        case GridColumnTypeEnum.ShortWeekDate:\n                            {\n                                dtpFrom.show();\n                                dtpDateTimeFrom.hide();\n                                dtpDateTimeTo.hide();\n\n                                dtpFrom.mode(DateModeEnum.Date);\n                                dtpTo.mode(DateModeEnum.Date);\n\n                                let defaultDateMin = Date.MIN_VALUE;\n                                defaultDateMin.setHours(7, 0);\n                                dtpFrom.min(defaultDateMin);\n                                dtpTo.min(defaultDateMin);\n\n                                let defaultDateMax = Date.MAX_VALUE;\n                                defaultDateMax.setHours(22, 0);\n                                dtpFrom.max(defaultDateMax);\n                                dtpTo.max(defaultDateMax);\n                            }\n                            break;\n                    }\n                }\n                break;\n            case GridColumnTypeEnum.Number:\n            case GridColumnTypeEnum.Currency:\n            case GridColumnTypeEnum.Duration:\n            case GridColumnTypeEnum.Percentage:\n                {\n                    puma(\"#\" + this._elementId + \"DivFilterDate\").hide();\n                    puma(\"#\" + this._elementId + \"DivFilterNumber\").show();\n                    puma(\"#\" + this._elementId + \"DivFilterString\").hide();\n                    txtFilterSearchSpecificValues.show();\n                    dtpFilterSearchSpecificValues.hide();\n\n                    switch (column.type)\n                    {\n                        case GridColumnTypeEnum.Number:\n                        case GridColumnTypeEnum.Duration:\n                            {\n                                ntbFrom.type(TextModeEnum.Numeric);\n                                ntbTo.type(TextModeEnum.Numeric);\n                            }\n                            break;\n                        case GridColumnTypeEnum.Currency:\n                            {\n                                ntbFrom.type(TextModeEnum.Currency);\n                                ntbTo.type(TextModeEnum.Currency);\n                            }\n                            break;\n                        case GridColumnTypeEnum.Percentage:\n                            {\n                                ntbFrom.type(TextModeEnum.Percentage);\n                                ntbTo.type(TextModeEnum.Percentage);\n                            }\n                            break;\n                    }\n                }\n                break;\n            case GridColumnTypeEnum.String:\n            case GridColumnTypeEnum.Label:\n                {\n                    puma(\"#\" + this._elementId + \"DivFilterDate\").hide();\n                    puma(\"#\" + this._elementId + \"DivFilterNumber\").hide();\n                    puma(\"#\" + this._elementId + \"DivFilterString\").show();\n                    txtFilterSearchSpecificValues.show();\n                    dtpFilterSearchSpecificValues.hide();\n                }\n                break;\n        }\n        //#endregion\n\n        this._wndFiltering.hideFooterItem(\"removeFilter\");\n        this._wndFiltering.hideFooterItem(\"removeFilterSeparator\");\n        let isSearchIntervals = true;\n        if (this._dictionaryFilterConditions.has(column.field))\n        {\n            this._wndFiltering.showFooterItem(\"removeFilter\");\n            this._wndFiltering.showFooterItem(\"removeFilterSeparator\");\n\n            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n            if (filterSettings != null)\n            {\n                if (filterSettings.dateFilterSettings != null && filterSettings.dateFilterSettings.specificValues != null\n                    && filterSettings.dateFilterSettings.specificValues.length > 0)\n                    isSearchIntervals = false;\n                else if (filterSettings.numberFilterSettings != null && filterSettings.numberFilterSettings.specificValues != null\n                    && filterSettings.numberFilterSettings.specificValues.length > 0)\n                    isSearchIntervals = false;\n                else if (filterSettings.stringFilterSettings != null && filterSettings.stringFilterSettings.specificValues != null\n                    && filterSettings.stringFilterSettings.specificValues.length > 0)\n                    isSearchIntervals = false;\n            }\n        }\n\n        //#region Fill CheckboxList specific values\n        let items = this.originalDataSource().map(k =>\n        {\n            let text = this.formatValue(k[column.field], column.type!, column.decimalDigits, column.roundingSettings, column.showSeconds, column.milesSeparator);\n            let tag = k[column.field];\n            if (tag != null)\n            {\n                if (column.type == GridColumnTypeEnum.Date || column.type == GridColumnTypeEnum.LongDate || column.type == GridColumnTypeEnum.LongWeekDate || column.type == GridColumnTypeEnum.ShortWeekDate)\n                {\n                    let date = new Date(k[column.field]);\n                    date.setHours(0, 0, 0);\n                    tag = date;\n                }\n                else if (column.type == GridColumnTypeEnum.Time || column.type == GridColumnTypeEnum.DateTime || column.type == GridColumnTypeEnum.LongDateTime)\n                    tag = new Date(k[column.field]);\n                else if (column.type == GridColumnTypeEnum.String || column.type == GridColumnTypeEnum.Label)\n                    tag = String(tag).toLowerCase();\n            }\n            else\n            {\n                text = \"\";\n                tag = \"\";\n            }\n\n            return { text: text, value: tag, tag: tag }\n        }).vrDistinctBy(k => k.text).vrSortAsc(\"tag\");\n\n        let divContent = puma(\"#\" + this._elementId + \"_specificValues\")[0];\n        let contentFragment = document.createDocumentFragment();\n        let divRecords = document.createElement(\"div\");\n        divRecords.classList.add(\"vrGrid_divSearchSpecificValues\");\n        contentFragment.appendChild(divRecords);\n        for (let data of items)\n        {\n            let divRow = document.createElement(\"div\");\n            divRecords.appendChild(divRow);\n\n            let checkbox = document.createElement(\"input\");\n            checkbox.setAttribute(\"type\", \"checkbox\");\n            checkbox.classList.add(\"vrControls\", \"vrCheckBox\");\n            checkbox.setAttribute(\"tag\", JSON.stringify(data.tag));\n            checkbox.onclick = (e: any) =>\n            {\n                let checkboxCheckedList = Array.from<HTMLElement>(puma('.vrGrid_divSearchSpecificValues input:checkbox:checked'));\n                if (checkboxCheckedList.length == 0)\n                {\n                    lblCheckboxSelected.value(items.length + \" elementi\")\n                    chkCheckAllSpecificValues.checked(false, false);\n                }\n                else\n                {\n                    if (checkboxCheckedList.length == items.length)\n                        chkCheckAllSpecificValues.checked(true, false);\n                    else\n                        chkCheckAllSpecificValues.checked(CheckboxStateEnum.Undefined, false);\n\n                    lblCheckboxSelected.value(checkboxCheckedList.length + \" di \" + items.length + \" elementi\");\n                }\n            }\n            divRow.appendChild(checkbox);\n\n            let lblText = document.createElement(\"label\");\n            lblText.innerHTML = data.text;\n            lblText.style.cssText += \"display: block; width: 100%; user-select: none;\";\n            lblText.onclick = (e: any) => puma(checkbox).click();\n            divRow.appendChild(lblText);\n        }\n        divContent.appendChild(contentFragment);\n\n        let lblCheckboxSelected = this._wndFiltering.footerItem<Label>(\"lblCheckboxSelectedSpecificValues\");\n        lblCheckboxSelected.value(items.length + \" elementi\");\n\n        let chkCheckAllSpecificValues = ControlManager.get<CheckBox>(this._elementId + \"_checkAllFilterSearchSpecificValues\");\n        //#endregion\n\n        let switchSearch = ControlManager.get<Switch>(this._elementId + \"_switchFilterSearch\");\n        if (isSearchIntervals)\n        {\n            //#region Search intervals\n            switchSearch.checked(false);\n            switch (column.type!)\n            {\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.Time:\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongDateTime:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.dateFilterSettings != null)\n                            {\n                                let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterDateType\");\n                                ddlType.value(filterSettings.dateFilterSettings.filterTypeEnum, true);\n\n                                if (column.type == GridColumnTypeEnum.DateTime || column.type == GridColumnTypeEnum.LongDateTime)\n                                {\n                                    dtpDateTimeFrom.value(filterSettings.dateFilterSettings.dateFrom);\n                                    dtpDateTimeTo.value(filterSettings.dateFilterSettings.dateTo);\n                                }\n                                else\n                                {\n                                    dtpFrom.value(filterSettings.dateFilterSettings.dateFrom);\n                                    dtpTo.value(filterSettings.dateFilterSettings.dateTo);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Duration:\n                case GridColumnTypeEnum.Percentage:\n                    {\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.numberFilterSettings != null)\n                            {\n                                let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterNumberType\");\n                                ddlType.value(filterSettings.numberFilterSettings.filterTypeEnum, true);\n                                ntbFrom.value(filterSettings.numberFilterSettings.numberFrom);\n                                ntbTo.value(filterSettings.numberFilterSettings.numberTo);\n                            }\n                        }\n                    }\n                    break;\n                case GridColumnTypeEnum.String:\n                case GridColumnTypeEnum.Label:\n                    {\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.stringFilterSettings != null)\n                            {\n                                let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterStringType\");\n                                ddlType.value(filterSettings.stringFilterSettings.filterTypeEnum, true);\n                                txtStringValue.value(filterSettings.stringFilterSettings.text);\n                            }\n                        }\n                    }\n                    break;\n            }\n            //#endregion\n        }\n        else\n        {\n            //#region Search specific values\n            switchSearch.checked(true);\n            switch (column.type!)\n            {\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.Time:\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongDateTime:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        //#region Load filter data\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.dateFilterSettings != null\n                                && filterSettings.dateFilterSettings.specificValues != null\n                                && filterSettings.dateFilterSettings.specificValues.length > 0)\n                            {\n                                for (let value of filterSettings.dateFilterSettings.specificValues)\n                                {\n                                    for (let checkbox of Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\")))\n                                    {\n                                        let tag = new Date(JSON.parse(checkbox.getAttribute(\"tag\")!));\n                                        if (Date.vrEquals(new Date(value), tag))\n                                        {\n                                            checkbox.checked = true;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                lblCheckboxSelected.value(filterSettings.dateFilterSettings.specificValues.length + \" di \" + items.length + \" elementi\")\n                                if (filterSettings.dateFilterSettings.specificValues.length == items.length)\n                                    chkCheckAllSpecificValues.checked(true, false);\n                                else\n                                    chkCheckAllSpecificValues.checked(CheckboxStateEnum.Undefined, false);\n                            }\n                        }\n                        //#endregion\n                    }\n                    break;\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Duration:\n                case GridColumnTypeEnum.Percentage:\n                    {\n                        //#region Load filter data\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.numberFilterSettings != null\n                                && filterSettings.numberFilterSettings.specificValues != null\n                                && filterSettings.numberFilterSettings.specificValues.length > 0)\n                            {\n                                for (let value of filterSettings.numberFilterSettings.specificValues)\n                                {\n                                    for (let checkbox of Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\")))\n                                    {\n                                        let tag = Number(JSON.parse(checkbox.getAttribute(\"tag\")!));\n                                        if (UtilityManager.equals(value, tag))\n                                        {\n                                            checkbox.checked = true;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                lblCheckboxSelected.value(filterSettings.numberFilterSettings.specificValues.length + \" di \" + items.length + \" elementi\")\n                                if (filterSettings.numberFilterSettings.specificValues.length == items.length)\n                                    chkCheckAllSpecificValues.checked(true, false);\n                                else\n                                    chkCheckAllSpecificValues.checked(CheckboxStateEnum.Undefined, false);\n                            }\n                        }\n                        //#endregion\n                    }\n                    break;\n                case GridColumnTypeEnum.String:\n                case GridColumnTypeEnum.Label:\n                    {\n                        if (this._dictionaryFilterConditions.has(column.field))\n                        {\n                            let filterSettings = this._dictionaryFilterConditions.get(column.field);\n                            if (filterSettings != null && filterSettings.stringFilterSettings != null\n                                && filterSettings.stringFilterSettings.specificValues != null\n                                && filterSettings.stringFilterSettings.specificValues.length > 0)\n                            {\n                                for (let value of filterSettings.stringFilterSettings.specificValues)\n                                {\n                                    for (let checkbox of Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\")))\n                                    {\n                                        let tag = String(JSON.parse(checkbox.getAttribute(\"tag\")!));\n                                        if (UtilityManager.equals(value, tag))\n                                        {\n                                            checkbox.checked = true;\n                                            break;\n                                        }\n                                    }\n                                }\n\n                                lblCheckboxSelected.value(filterSettings.stringFilterSettings.specificValues.length + \" di \" + items.length + \" elementi\")\n                                if (filterSettings.stringFilterSettings.specificValues.length == items.length)\n                                    chkCheckAllSpecificValues.checked(true, false);\n                                else\n                                    chkCheckAllSpecificValues.checked(CheckboxStateEnum.Undefined, false);\n                            }\n                        }\n                    }\n                    break;\n            }\n            //#endregion\n        }\n    }\n\n    private saveWindowFiltering(column: GridColumn)\n    {\n        let options = this.getOptions();\n        let filterSettings = new GridFilterSettings();\n        filterSettings.type = column.type!;\n        let checkboxCheckedList = [];\n        let checkboxAllList = [];\n\n        let switchSearch = ControlManager.get<Switch>(this._elementId + \"_switchFilterSearch\");\n        if (!switchSearch.checked())\n        {\n            //#region Search intervals\n            switch (column.type!)\n            {\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.Time:\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongDateTime:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        //#region Date filter settings\n                        let dtpFrom = ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateFrom\");\n                        let dtpTo = ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateTo\");\n                        let dtpDateTimeFrom = ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateFrom\");\n                        let dtpDateTimeTo = ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateTo\");\n\n                        if (column.type! == GridColumnTypeEnum.DateTime || column.type! == GridColumnTypeEnum.LongDateTime)\n                        {\n                            if (dtpDateTimeFrom.value() == null)\n                            {\n                                notifyWarning(\"Inserire almeno una data\");\n                                return;\n                            }\n                        }\n                        else\n                        {\n                            if (dtpFrom.value() == null)\n                            {\n                                notifyWarning(\"Inserire almeno una data\");\n                                return;\n                            }\n                        }\n\n                        let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterDateType\")\n                        filterSettings.dateFilterSettings = new GridDateFilterSettings();\n                        filterSettings.dateFilterSettings.filterTypeEnum = Number(ddlType.value());\n                        filterSettings.dateFilterSettings.dateFrom = (column.type! == GridColumnTypeEnum.DateTime || column.type! == GridColumnTypeEnum.LongDateTime) ? dtpDateTimeFrom.value()! : dtpFrom.value()!;\n                        filterSettings.dateFilterSettings.dateTo = (column.type! == GridColumnTypeEnum.DateTime || column.type! == GridColumnTypeEnum.LongDateTime) ? dtpDateTimeTo.value()! : dtpTo.value();\n                        //#endregion\n                    }\n                    break;\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Duration:\n                case GridColumnTypeEnum.Percentage:\n                    {\n                        //#region Number filter settings\n                        let ntbFrom = ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberFrom\");\n                        let ntbTo = ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberTo\");\n                        if (ntbFrom.isEmpty())\n                        {\n                            notifyWarning(\"Inserire almeno un numero\");\n                            return;\n                        }\n\n                        let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterNumberType\");\n                        filterSettings.numberFilterSettings = new GridNumberFilterSettings();\n                        filterSettings.numberFilterSettings.filterTypeEnum = Number(ddlType.value());\n                        filterSettings.numberFilterSettings.numberFrom = ntbFrom.value();\n                        filterSettings.numberFilterSettings.numberTo = (ntbTo.value() == 0) ? null : Number(ntbTo.value());\n                        //#endregion\n                    }\n                    break;\n                case GridColumnTypeEnum.String:\n                case GridColumnTypeEnum.Label:\n                    {\n                        //#region String filter settings\n                        let txtStringValue = ControlManager.get<TextBox>(this._elementId + \"_txtFilterStringValue\");\n                        if (txtStringValue.isEmpty())\n                        {\n                            notifyWarning(\"Inserire un testo\");\n                            return;\n                        }\n\n                        let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterStringType\");\n                        filterSettings.stringFilterSettings = new GridStringFilterSettings();\n                        filterSettings.stringFilterSettings.filterTypeEnum = Number(ddlType.value());\n                        filterSettings.stringFilterSettings.text = txtStringValue.value();\n                        //#endregion\n                    }\n                    break;\n            }\n            //#endregion\n        }\n        else\n        {\n            //#region Search specific values\n            checkboxCheckedList = Array.from<HTMLElement>(puma('.vrGrid_divSearchSpecificValues input:checkbox:checked'));\n            checkboxAllList = Array.from<HTMLInputElement>(puma(this._wndFiltering.element()).find(\".vrGrid_divSearchSpecificValues input\"));\n            let filterButton = null;\n            let filterButtonRemove = null;\n\n            switch (column.type!)\n            {\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.Time:\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongDateTime:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        filterSettings.dateFilterSettings = new GridDateFilterSettings();\n                        filterSettings.dateFilterSettings.specificValues = [];\n                        for (let checkbox of checkboxCheckedList)\n                            filterSettings.dateFilterSettings.specificValues.push(new Date(JSON.parse(checkbox.getAttribute(\"tag\")!)));\n\n                        if (checkboxCheckedList.length == 0 || checkboxAllList.length == checkboxCheckedList.length)\n                        {\n                            filterButton = ControlManager.get<Button>(this._elementId + \"_DateFilter_\" + column.field);\n                            puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                            puma(filterButton.element()).css(\"color\", \"#000\");\n\n                            filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_DateFilterRemove_\" + column.field);\n                            filterButtonRemove.hide();\n                        }\n                    }\n                    break;\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Duration:\n                case GridColumnTypeEnum.Percentage:\n                    {\n                        filterSettings.numberFilterSettings = new GridNumberFilterSettings();\n                        filterSettings.numberFilterSettings.specificValues = [];\n                        for (let checkbox of checkboxCheckedList)\n                            filterSettings.numberFilterSettings.specificValues.push(Number(JSON.parse(checkbox.getAttribute(\"tag\")!)));\n\n                        if (checkboxCheckedList.length == 0 || checkboxAllList.length == checkboxCheckedList.length)\n                        {\n                            filterButton = ControlManager.get<Button>(this._elementId + \"_NumberFilter_\" + column.field);\n                            puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                            puma(filterButton.element()).css(\"color\", \"#000\");\n\n                            filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_NumberFilterRemove_\" + column.field);\n                            filterButtonRemove.hide();\n                        }\n                    }\n                    break;\n                case GridColumnTypeEnum.String:\n                case GridColumnTypeEnum.Label:\n                    {\n                        filterSettings.stringFilterSettings = new GridStringFilterSettings();\n                        filterSettings.stringFilterSettings.specificValues = [];\n                        for (let checkbox of checkboxCheckedList)\n                            filterSettings.stringFilterSettings.specificValues.push(String(JSON.parse(checkbox.getAttribute(\"tag\")!)));\n\n                        if (checkboxCheckedList.length == 0 || checkboxAllList.length == checkboxCheckedList.length)\n                        {\n                            filterButton = ControlManager.get<Button>(this._elementId + \"_StringFilterBtn_\" + column.field);\n                            puma(filterButton.element()).css(\"background-color\", \"#f3f3f3\");\n                            puma(filterButton.element()).css(\"color\", \"#000\");\n\n                            filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_StringFilterBtnRemove_\" + column.field);\n                            filterButtonRemove.hide();\n\n                            let textBox = ControlManager.get<TextBox>(this._elementId + \"_StringFilter_\" + column.field);\n                            textBox.width(\"Calc(100% - 27px)\");\n                        }\n                    }\n                    break;\n            }\n            //#endregion\n        }\n\n        if (switchSearch.checked() && (checkboxCheckedList.length == 0 || checkboxAllList.length == checkboxCheckedList.length))\n            this.removeFilter(column.field);\n        else\n        {\n            this.removeFilter(column.field, !options.serverBinding);\n            this.updateFilter(column.field, filterSettings);\n        }\n        this._wndFiltering.close();\n    }\n\n    private clearWindowFiltering()\n    {\n        //#region Date filter\n        ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterDateType\").clear();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateFrom\").clear();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateTo\").clear();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterDateTo\").hide();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateFrom\").clear();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateTo\").clear();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateFrom\").hide();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpDateTimeFilterDateTo\").hide();\n        //#endregion\n\n        //#region Number filter\n        ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterNumberType\").clear();\n        ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberFrom\").clear();\n        ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberTo\").clear();\n        ControlManager.get<TextBox>(this._elementId + \"_ntbFilterNumberTo\").hide();\n        //#endregion\n\n        //#region Search specific values\n        ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterStringType\").clear();\n        ControlManager.get<TextBox>(this._elementId + \"_txtFilterStringValue\").clear();\n        puma(this._wndFiltering.element()).find(this._elementId + \"_specificValues\").empty();\n        ControlManager.get<TextBox>(this._elementId + \"_txtFilterSearchSpecificValues\").show();\n        ControlManager.get<DatePicker>(this._elementId + \"_dtpFilterSearchSpecificValues\").hide();\n        this._wndFiltering.footerItem<Label>(\"lblCheckboxSelectedSpecificValues\").clear();\n        ControlManager.get<CheckBox>(this._elementId + \"_checkAllFilterSearchSpecificValues\").clear();\n        //#endregion\n    }\n\n    addFilter(field: string, filterCondition: GridFilterSettings, applyFilters = true)\n    {\n        this._dictionaryFilterConditions.set(field, filterCondition);\n        if (applyFilters)\n            this.applyFilters();\n    }\n\n    removeFilters(fields: string[], applyFilters = true)\n    {\n        for (let field of fields)\n            this.removeFilter(field, false);\n\n        if (applyFilters)\n            this.applyFilters(true);\n    }\n\n    removeFilter(field: string, applyFilters = true)\n    {\n        if (this._dictionaryFilterConditions.has(field))\n        {\n            this._dictionaryFilterConditions.delete(field);\n            if (applyFilters)\n                this.applyFilters(true);\n        }\n    }\n\n    updateFilter(field: string, filterCondition: GridFilterSettings, applyFilters = true)\n    {\n        this._dictionaryFilterConditions.set(field, filterCondition);\n        if (applyFilters)\n            this.applyFilters();\n    }\n\n    private applyFilters(onOriginalDataSource = false, applyFilters = true)\n    {\n        let options = this.getOptions();\n\n        //#region Server binding\n        if (options.serverBinding !== false)\n        {\n            this.pageSelected(1, false);\n            if (applyFilters)\n                this.rebind();\n            else\n                this.setDataSource((onOriginalDataSource) ? this._originalDataSource : this.dataSource());\n\n            return;\n        }\n        //#endregion\n\n        let filteredArray: any[] = (onOriginalDataSource) ? this._originalDataSource : this.dataSource();\n        this._dictionaryFilterConditions.forEach((valueFilterSettings, columnField, dic) =>\n        {\n            let column = options.columns!.find(k => k.field == columnField)!;\n            if (column != null && column.hidden === true)\n                return;\n\n            if (valueFilterSettings.numberFilterSettings != null)\n            {\n                //#region Number filter\n                let filterButton = ControlManager.get<Button>(this._elementId + \"_NumberFilter_\" + columnField);\n                puma(filterButton.element()).css(\"background-color\", \"coral\");\n                puma(filterButton.element()).css(\"color\", \"#FFF\");\n\n                let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_NumberFilterRemove_\" + columnField);\n                filterButtonRemove.show();\n                this.recalculateHeight(true);\n\n                if (valueFilterSettings.numberFilterSettings.specificValues != null && valueFilterSettings.numberFilterSettings.specificValues.length > 0)\n                {\n                    //#region Search specific values\n                    filteredArray = filteredArray.filter(k => valueFilterSettings.numberFilterSettings!.specificValues.includes(k[columnField]));\n                    filterButton.tooltip(\"Ricerca specifica su questi valori: \" + valueFilterSettings.numberFilterSettings.specificValues.join(\" - \"));\n                    //#endregion\n                }\n                else\n                {\n                    //#region Search intervals\n                    switch (valueFilterSettings.numberFilterSettings.filterTypeEnum)\n                    {\n                        case GridNumberFilterTypeEnum.GreaterThan:\n                            filteredArray = filteredArray.filter(k => k[columnField] > valueFilterSettings.numberFilterSettings!.numberFrom);\n                            break;\n                        case GridNumberFilterTypeEnum.LessThan:\n                            filteredArray = filteredArray.filter(k => k[columnField] < valueFilterSettings.numberFilterSettings!.numberFrom);\n                            break;\n                        case GridNumberFilterTypeEnum.EqualsTo:\n                            filteredArray = filteredArray.filter(k => k[columnField] == valueFilterSettings.numberFilterSettings!.numberFrom);\n                            break;\n                        case GridNumberFilterTypeEnum.Between:\n                            {\n                                if (valueFilterSettings.numberFilterSettings!.numberTo != null)\n                                    filteredArray = filteredArray.filter(k => k[columnField] >= valueFilterSettings.numberFilterSettings!.numberFrom && k[columnField] <= valueFilterSettings.numberFilterSettings!.numberTo!);\n                                else\n                                    filteredArray = filteredArray.filter(k => k[columnField] > valueFilterSettings.numberFilterSettings!.numberFrom);\n                            }\n                            break;\n                    }\n\n                    // Filter button\n                    let valueTooltip = String(valueFilterSettings.numberFilterSettings!.numberFrom);\n                    if (valueFilterSettings.numberFilterSettings!.filterTypeEnum == GridNumberFilterTypeEnum.Between)\n                        valueTooltip += \" e \" + valueFilterSettings.numberFilterSettings!.numberTo;\n\n                    let ddlType = ControlManager.get<ComboBox>(this._elementId + \"_ddlFilterNumberType\");\n                    let type = \"\";\n                    switch (Number(ddlType!.value()))\n                    {\n                        case GridNumberFilterTypeEnum.GreaterThan: type = \"Maggiore di \"; break;\n                        case GridNumberFilterTypeEnum.LessThan: type = \"Minore di \"; break;\n                        case GridNumberFilterTypeEnum.EqualsTo: type = \"Uguale a \"; break;\n                        case GridNumberFilterTypeEnum.Between: type = \"Compreso tra \"; break;\n                    }\n\n                    filterButton.tooltip(type + valueTooltip);\n                    //#endregion\n                }\n                //#endregion\n            }\n            else if (valueFilterSettings.dateFilterSettings != null)\n            {\n                //#region Date filter\n                let filterButton = ControlManager.get<Button>(this._elementId + \"_DateFilter_\" + columnField);\n                puma(filterButton.element()).css(\"background-color\", \"coral\");\n                puma(filterButton.element()).css(\"color\", \"#FFF\");\n\n                let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_DateFilterRemove_\" + columnField);\n                filterButtonRemove.show();\n                this.recalculateHeight(true);\n\n                if (valueFilterSettings.dateFilterSettings.specificValues != null && valueFilterSettings.dateFilterSettings.specificValues.length > 0)\n                {\n                    //#region Search specific values\n                    let dateFilteredArray = [];\n                    for (let filterValue of filteredArray)\n                    {\n                        for (let specificValue of valueFilterSettings.dateFilterSettings.specificValues)\n                        {\n                            let date = new Date(filterValue[columnField]);\n                            if (column.type == GridColumnTypeEnum.Date || column.type == GridColumnTypeEnum.LongDate || column.type == GridColumnTypeEnum.LongWeekDate || column.type == GridColumnTypeEnum.ShortWeekDate)\n                                date.setHours(0, 0, 0);\n\n                            if (Date.vrEquals(date, specificValue))\n                                dateFilteredArray.push(filterValue);\n                        }\n                    }\n                    filteredArray = dateFilteredArray;\n\n                    let tooltipValues: string[] = [];\n                    let dateModeEnum: DateModeEnum = DateModeEnum.Date;\n\n                    if (column.type == GridColumnTypeEnum.Date) dateModeEnum = DateModeEnum.Date;\n                    else if (column.type == GridColumnTypeEnum.DateTime) dateModeEnum = DateModeEnum.DateTime;\n                    else if (column.type == GridColumnTypeEnum.Time) dateModeEnum = DateModeEnum.Time;\n                    else if (column.type == GridColumnTypeEnum.LongDate) dateModeEnum = DateModeEnum.LongDate;\n                    else if (column.type == GridColumnTypeEnum.LongDateTime) dateModeEnum = DateModeEnum.LongDateTime;\n                    else if (column.type == GridColumnTypeEnum.LongWeekDate) dateModeEnum = DateModeEnum.LongWeekDate;\n                    else if (column.type == GridColumnTypeEnum.ShortWeekDate) dateModeEnum = DateModeEnum.ShortWeekDate;\n\n                    tooltipValues = valueFilterSettings.dateFilterSettings.specificValues.map(k => { return new Date(k).vrToItalyString(dateModeEnum, column.showSeconds) });\n                    filterButton.tooltip(\"Ricerca specifica su questi valori: \" + tooltipValues.join(\" - \"));\n                    //#endregion\n                }\n                else\n                {\n                    //#region Search intervals\n                    let filterDateFrom = Date.vrFixDateString(valueFilterSettings.dateFilterSettings!.dateFrom);\n                    let filterDateTo = Date.vrFixDateString(valueFilterSettings.dateFilterSettings!.dateTo);\n\n                    switch (valueFilterSettings.dateFilterSettings.filterTypeEnum)\n                    {\n                        case GridDateFilterTypeEnum.GreaterThan:\n                            {\n                                switch (column.type)\n                                {\n                                    case GridColumnTypeEnum.Date:\n                                    case GridColumnTypeEnum.LongDate:\n                                    case GridColumnTypeEnum.LongWeekDate:\n                                    case GridColumnTypeEnum.ShortWeekDate:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsGreaterThan(filterDateFrom, false, false));\n                                        break;\n                                    case GridColumnTypeEnum.DateTime:\n                                    case GridColumnTypeEnum.LongDateTime:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsGreaterThan(filterDateFrom));\n                                        break;\n                                    case GridColumnTypeEnum.Time:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() > filterDateFrom.getHours() || (Date.vrFixDateString(k[columnField]).getHours() == filterDateFrom.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() > filterDateFrom.getMinutes())))\n                                        break;\n                                }\n                            }\n                            break;\n                        case GridDateFilterTypeEnum.LessThan:\n                            {\n                                switch (column.type)\n                                {\n                                    case GridColumnTypeEnum.Date:\n                                    case GridColumnTypeEnum.LongDate:\n                                    case GridColumnTypeEnum.LongWeekDate:\n                                    case GridColumnTypeEnum.ShortWeekDate:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsLessThan(filterDateFrom, false, false));\n                                        break;\n                                    case GridColumnTypeEnum.DateTime:\n                                    case GridColumnTypeEnum.LongDateTime:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsLessThan(filterDateFrom));\n                                        break;\n                                    case GridColumnTypeEnum.Time:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() < filterDateFrom.getHours() || (Date.vrFixDateString(k[columnField]).getHours() == filterDateFrom.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() < filterDateFrom.getMinutes())))\n                                        break;\n                                }\n                            }\n                            break;\n                        case GridDateFilterTypeEnum.EqualsTo:\n                            {\n                                switch (column.type)\n                                {\n                                    case GridColumnTypeEnum.Date:\n                                    case GridColumnTypeEnum.LongDate:\n                                    case GridColumnTypeEnum.LongWeekDate:\n                                    case GridColumnTypeEnum.ShortWeekDate:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsEqualsTo(filterDateFrom, false));\n                                        break;\n                                    case GridColumnTypeEnum.DateTime:\n                                    case GridColumnTypeEnum.LongDateTime:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsEqualsTo(filterDateFrom));\n                                        break;\n                                    case GridColumnTypeEnum.Time:\n                                        filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() == filterDateFrom.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() == filterDateFrom.getMinutes()))\n                                        break;\n                                }\n                            }\n                            break;\n                        case GridDateFilterTypeEnum.Between:\n                            {\n                                switch (column.type)\n                                {\n                                    case GridColumnTypeEnum.Date:\n                                    case GridColumnTypeEnum.DateTime:\n                                    case GridColumnTypeEnum.LongDate:\n                                    case GridColumnTypeEnum.LongWeekDate:\n                                    case GridColumnTypeEnum.ShortWeekDate:\n                                    case GridColumnTypeEnum.LongDateTime:\n                                        {\n                                            if (valueFilterSettings.dateFilterSettings!.dateTo != null)\n                                                filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsBetween(filterDateFrom, filterDateTo));\n                                            else\n                                                filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && Date.vrFixDateString(k[columnField]).vrIsGreaterThan(filterDateFrom));\n                                        }\n                                        break;\n                                    case GridColumnTypeEnum.Time:\n                                        {\n                                            if (valueFilterSettings.dateFilterSettings!.dateTo != null)\n                                            {\n                                                filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() > filterDateFrom.getHours() || (Date.vrFixDateString(k[columnField]).getHours() == filterDateFrom.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() > filterDateFrom.getMinutes())))\n                                                filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() < filterDateTo.getHours() || (Date.vrFixDateString(k[columnField]).getHours() == filterDateTo.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() < filterDateTo.getMinutes())))\n                                            }\n                                            else\n                                                filteredArray = filteredArray.filter(k => Date.vrFixDateString(k[columnField]) != null && (Date.vrFixDateString(k[columnField]).getHours() > filterDateFrom.getHours() || (Date.vrFixDateString(k[columnField]).getHours() == filterDateFrom.getHours() && Date.vrFixDateString(k[columnField]).getMinutes() > filterDateFrom.getMinutes())))\n                                        }\n                                        break;\n                                }\n                            }\n                            break;\n                    }\n\n                    // Filter button\n                    let dateModeEnum: DateModeEnum = DateModeEnum.Date;\n\n                    if (column.type == GridColumnTypeEnum.Date) dateModeEnum = DateModeEnum.Date;\n                    else if (column.type == GridColumnTypeEnum.DateTime) dateModeEnum = DateModeEnum.DateTime;\n                    else if (column.type == GridColumnTypeEnum.Time) dateModeEnum = DateModeEnum.Time;\n                    else if (column.type == GridColumnTypeEnum.LongDate) dateModeEnum = DateModeEnum.LongDate;\n                    else if (column.type == GridColumnTypeEnum.LongDateTime) dateModeEnum = DateModeEnum.LongDateTime;\n                    else if (column.type == GridColumnTypeEnum.LongWeekDate) dateModeEnum = DateModeEnum.LongWeekDate;\n                    else if (column.type == GridColumnTypeEnum.ShortWeekDate) dateModeEnum = DateModeEnum.ShortWeekDate;\n\n                    let tooltip = Date.vrFixDateString(valueFilterSettings.dateFilterSettings!.dateFrom).vrToItalyString(dateModeEnum);\n                    if (valueFilterSettings.dateFilterSettings!.filterTypeEnum == GridDateFilterTypeEnum.Between)\n                        tooltip += \" e \" + Date.vrFixDateString(valueFilterSettings.dateFilterSettings!.dateTo!).vrToItalyString(dateModeEnum);\n\n                    let type = \"\";\n                    switch (valueFilterSettings.dateFilterSettings!.filterTypeEnum)\n                    {\n                        case GridDateFilterTypeEnum.GreaterThan: type = \"Maggiore di \"; break;\n                        case GridDateFilterTypeEnum.LessThan: type = \"Minore di \"; break;\n                        case GridDateFilterTypeEnum.EqualsTo: type = \"Uguale a \"; break;\n                        case GridDateFilterTypeEnum.Between: type = \"Compreso tra \"; break;\n                    }\n\n                    filterButton.tooltip(type + tooltip);\n                    //#endregion\n                }\n                //#endregion\n            }\n            else if (valueFilterSettings.stringFilterSettings != null)\n            {\n                //#region String filter\n                if ((valueFilterSettings.stringFilterSettings!.text == null || valueFilterSettings.stringFilterSettings!.text == \"\")\n                    && (valueFilterSettings.stringFilterSettings.specificValues == null || valueFilterSettings.stringFilterSettings.specificValues.length == 0))\n                    return;\n\n                let textBox = ControlManager.get<TextBox>(this._elementId + \"_StringFilter_\" + column.field);\n                let filterButton: Button | null = null;\n                if ((valueFilterSettings.stringFilterSettings.specificValues != null && valueFilterSettings.stringFilterSettings.specificValues.length > 0)\n                    || valueFilterSettings.stringFilterSettings.filterTypeEnum != GridStringFilterTypeEnum.IncludesFromSimpleSearch)\n                {\n                    filterButton = ControlManager.get<Button>(this._elementId + \"_StringFilterBtn_\" + columnField);\n                    puma(filterButton.element()).css(\"background-color\", \"coral\");\n                    puma(filterButton.element()).css(\"color\", \"#FFF\");\n\n                    let filterButtonRemove = ControlManager.get<Button>(this._elementId + \"_StringFilterBtnRemove_\" + columnField);\n                    filterButtonRemove.show();\n                    this.recalculateHeight(true);\n\n                    textBox.width(\"Calc(100% - 60px)\");\n                }\n                else if (valueFilterSettings.stringFilterSettings.filterTypeEnum == GridStringFilterTypeEnum.IncludesFromSimpleSearch)\n                    textBox.value(valueFilterSettings.stringFilterSettings.text, false);\n\n                if (valueFilterSettings.stringFilterSettings.specificValues != null && valueFilterSettings.stringFilterSettings.specificValues.length > 0)\n                {\n                    //#region Search specific values\n                    filteredArray = filteredArray.filter(k => k[columnField] != null && valueFilterSettings.stringFilterSettings!.specificValues.map(k => { return k.toLowerCase() }).includes(k[columnField].toLowerCase()));\n                    if (filterButton != null)\n                        filterButton.tooltip(\"Ricerca specifica su questi valori: \" + valueFilterSettings.stringFilterSettings.specificValues.join(\" - \"));\n                    //#endregion\n                }\n                else\n                {\n                    //#region Search intervals\n                    let type = \"\";\n                    switch (valueFilterSettings.stringFilterSettings.filterTypeEnum)\n                    {\n                        case GridStringFilterTypeEnum.StartsWith:\n                            {\n                                type = \"Inizia con: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase().startsWith(valueFilterSettings.stringFilterSettings!.text.toLowerCase()));\n                            }\n                            break;\n                        case GridStringFilterTypeEnum.EndsWith:\n                            {\n                                type = \"Finisce con: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase().endsWith(valueFilterSettings.stringFilterSettings!.text.toLowerCase()));\n                            }\n                            break;\n                        case GridStringFilterTypeEnum.EqualsTo:\n                            {\n                                type = \"Uguale a: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase() == valueFilterSettings.stringFilterSettings!.text.toLowerCase());\n                            }\n                            break;\n                        case GridStringFilterTypeEnum.Includes:\n                            {\n                                type = \"Contiene: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase().indexOf(valueFilterSettings.stringFilterSettings!.text.toLowerCase()) !== -1);\n                            }\n                            break;\n                        case GridStringFilterTypeEnum.IncludesFromSimpleSearch:\n                            {\n                                type = \"Contiene: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase().indexOf(valueFilterSettings.stringFilterSettings!.text.toLowerCase()) !== -1);\n                            }\n                            break;\n                        default:\n                            {\n                                type = \"Contiene: \";\n                                filteredArray = filteredArray.filter(k => k[columnField] != null && k[columnField].toLowerCase().indexOf(valueFilterSettings.stringFilterSettings!.text.toLowerCase()) !== -1);\n                            }\n                            break;\n                    }\n\n                    if (filterButton != null)\n                        filterButton.tooltip(type + valueFilterSettings.stringFilterSettings!.text);\n                    //#endregion\n                }\n                //#endregion\n            }\n            else if (valueFilterSettings.checkboxFilterSettings != null)\n            {\n                filteredArray = filteredArray.filter(k => k[columnField] === valueFilterSettings.checkboxFilterSettings!.value);\n\n                //#region Filter checkbox\n                let checkboxJq = puma(\"#\" + this._elementId + \"_CheckboxFilter_\" + columnField);\n                checkboxJq.removeClass(\"indeterminateVrCheckbox\");\n\n                let checkbox = checkboxJq[0] as HTMLInputElement;\n                checkbox.checked = valueFilterSettings.checkboxFilterSettings!.value;\n                //#endregion\n            }\n        });\n\n        this.pageSelected(1, false);\n\n        if (applyFilters)\n        {\n            this._dataSource = UtilityManager.duplicate(filteredArray);\n            if (options.groupBy != null)\n                this.sortingGroupFields(this.dataSource());\n\n            this.setDataSource(this._dataSource!);\n        }\n    }\n    //#endregion\n\n    //#region Resizing\n    private resizable()\n    {\n        let options = this.getOptions();\n        let headerTable = puma(this._divHeader).find(\"table\")[0];\n        let tableHeight = headerTable.offsetHeight;\n\n        let thList = Array.from<HTMLElement>(puma(headerTable).find(\"th\"));\n        if (options.lockable)\n            thList.vrPushRange(Array.from<HTMLElement>(puma(this._divHeaderLocked).find(\"table\").find(\"th\")));\n\n        for (let th of thList)\n        {\n            let divResizable = document.createElement(\"div\");\n            divResizable.classList.add(\"divResizable\");\n            divResizable.style.cssText += \"height: \" + tableHeight + \"px;\";\n            th.appendChild(divResizable);\n            this.setResizingEvents(divResizable);\n        }\n    }\n\n    private setResizingEvents(divResizable: HTMLDivElement)\n    {\n        let pageX: number | null = null;\n        let currentColumn: HTMLElement | null = null;\n        let currentColumnWidth: number | null = null;\n        let timeoutRecalculateWidthWhileMoving: number = 0;\n\n        //#region Div events\n        puma(divResizable).on(\"mousedown\", (e: any) =>\n        {\n            this._isResizing = true;\n            currentColumn = e.target.parentElement;\n            pageX = e.pageX;\n\n            //#region Padding\n            let padding = 0;\n            if (puma(currentColumn!).css(\"box-sizing\") == \"border-box\")\n                padding = 0;\n            else\n            {\n                let padLeft = puma(currentColumn!).css(\"padding-left\");\n                let padRight = puma(currentColumn!).css(\"padding-right\");\n                padding = (padLeft.getNumericPart() + padRight.getNumericPart());\n            }\n            //#endregion\n\n            currentColumnWidth = currentColumn!.offsetWidth - padding;\n        });\n\n        puma(divResizable).on(\"mouseover\", (e: any) => (e.target as HTMLElement).style.borderRight = \"2px solid #0000ff\");\n        puma(divResizable).on(\"mouseout\", (e: any) => (e.target as HTMLElement).style.borderRight = \"\");\n        //#endregion\n\n        //#region Document events\n        puma(this.container()).on(\"mousemove\", (e: any) =>\n        {\n            if (currentColumn != null && !this._isDragging)\n            {\n                let options = this.getOptions();\n                let field = puma(puma(this._divHeader).find(\"th\")[puma(currentColumn).index()]).attr(\"field\");\n                let isColumnLocked = (currentColumn.getAttribute(\"locked\") != null);\n                if (isColumnLocked)\n                    field = puma(puma(this._divHeaderLocked).find(\"th\")[puma(currentColumn).index()]).attr(\"field\");\n\n                let index = puma(currentColumn!).index();\n                let column = this.column(field);\n\n                let diffX = e.pageX - pageX!;\n                currentColumn.style.width = (currentColumnWidth! + diffX) + \"px\"; // Header\n                currentColumn.removeAttribute(\"fitspace\");\n                column.width = (currentColumnWidth! + diffX);\n                column.fitSpace = false;\n\n                if (options.filterable) // Filter\n                {\n                    let tdFilter = puma(this._divFilters).find(\"td\")[index];\n                    if (isColumnLocked && tdFilter == null)\n                        tdFilter = puma(this._divFiltersLocked).find(\"td\")[index];\n\n                    tdFilter.style.width = (currentColumnWidth! + diffX) + \"px\";\n                }\n\n                if (this._showTotals) // Total\n                {\n                    let tdTotal = puma(this._divTotals).find(\"td\")[index];\n                    if (isColumnLocked && tdTotal == null)\n                        tdTotal = puma(this._divTotalsLocked).find(\"td\")[index];\n\n                    tdTotal.style.width = (currentColumnWidth! + diffX) + \"px\";\n                }\n\n                let colGroupList = puma(this._divBody).find(\"colgroup\"); // Col group \n                colGroupList.find(\"col[field='\" + column.field + \"']\")[0].style.cssText += \"width: \" + (currentColumnWidth! + diffX) + \"px\";\n            }\n        });\n\n        puma(this.container()).on(\"mouseup\", () =>\n        {\n            if (currentColumn != null && this._isResizing)\n            {\n                window.setTimeout(() =>\n                {\n                    this._isResizing = false;\n                    currentColumn = null;\n                    pageX = null;\n                    currentColumnWidth = null;\n\n                    this.recalculateFitSpacePercentage();\n                    this.recalculateWidth();\n                    this.updateColumnPositions();\n                });\n            }\n        });\n        //#endregion\n    }\n    //#endregion\n\n    //#region Columns Drag&Drop\n    private updateColumnPositions()\n    {\n        let headerTable = puma(this._divHeader).find(\"table\")[0];\n        for (let th of Array.from(puma(headerTable).find(\"th\")))\n        {\n            let field = puma(th).attr(\"field\");\n            let index = this._columnOptions.findIndex(k => k.field == field);\n            let columnPosition = this._columnOptions[index];\n            columnPosition.field = field;\n            columnPosition.left = puma(th).offset().left;\n            columnPosition.right = puma(th).offset().left + puma(th).width();\n            columnPosition.index = puma(th).index();\n        }\n    }\n\n    private draggableColumns()\n    {\n        let options = this.getOptions();\n        let headerTable = puma(this._divHeader).find(\"table\")[0];\n        for (let th of Array.from<HTMLElement>(puma(headerTable).find(\"th\")))\n        {\n            let field = puma(th).attr(\"field\");\n            if (field == \"vrGridCheckboxColumn\" || field == \"editButton\" || field.startsWith(\"groupBy\"))\n                continue;\n\n            this.drag(th,\n                {\n                    onDragging: (e) =>\n                    {\n                        //#region Dragging\n                        puma(this._divHeader).find(\"table th\").removeClass(\"grid_tdDraggedOn\");\n\n                        let draggingColumnPosition = this._columnOptions.find(k => e.left >= k.left && e.left <= k.right);\n                        if (draggingColumnPosition == null)\n                        {\n                            if (e.left < this._columnOptions[0].left)\n                                draggingColumnPosition = this._columnOptions[0];\n                            else if (e.left > this._columnOptions[this._columnOptions.length - 1].right)\n                                draggingColumnPosition = this._columnOptions[this._columnOptions.length - 1];\n                        }\n                        else if (draggingColumnPosition.index !== puma(th).index())\n                        {\n                            puma(th).addClass(\"grid_dragging\");\n\n                            if (draggingColumnPosition.index < puma(th).index())\n                                puma(puma(this._divHeader).find(\"table th\")[draggingColumnPosition.index]).addClass(\"grid_tdDraggedOn\");\n                            else\n                                puma(puma(this._divHeader).find(\"table th\")[draggingColumnPosition.index + 1]).addClass(\"grid_tdDraggedOn\");\n                        }\n                        //#endregion\n                    },\n                    onDragged: (e) =>\n                    {\n                        //#region Dragged\n                        puma(this._divHeader).find(\"table th\").removeClass(\"grid_tdDraggedOn\");\n                        puma(th).removeClass(\"grid_dragging\");\n                        puma(th)[0].style.cssText += \"top: 0px; left: 0px;\";\n\n                        let toDragColumnPosition = this._columnOptions.find(k => e.left >= k.left && e.left <= k.right);\n                        if (toDragColumnPosition == null)\n                        {\n                            if (e.left < this._columnOptions[0].left)\n                                toDragColumnPosition = this._columnOptions[0];\n                            else if (e.left > this._columnOptions[this._columnOptions.length - 1].right)\n                                toDragColumnPosition = this._columnOptions[this._columnOptions.length - 1];\n                        }\n                        else\n                        {\n                            let columnIndex = puma(th).index();\n\n                            //#region Swap column\n                            if (toDragColumnPosition.index > columnIndex)\n                                puma(puma(this._divHeader).find(\"table th\")[toDragColumnPosition.index]).vrAfterPuma(puma(this._divHeader).find(\"table th\")[columnIndex]);\n                            else\n                                puma(puma(this._divHeader).find(\"table th\")[toDragColumnPosition.index]).vrBeforePuma(puma(this._divHeader).find(\"table th\")[columnIndex]);\n\n                            if (options.filterable)\n                            {\n                                if (toDragColumnPosition.index > columnIndex)\n                                    puma(puma(this._divFilters).find(\"table td\")[toDragColumnPosition.index]).vrAfterPuma(puma(this._divFilters).find(\"table td\")[columnIndex]);\n                                else\n                                    puma(puma(this._divFilters).find(\"table td\")[toDragColumnPosition.index]).vrBeforePuma(puma(this._divFilters).find(\"table td\")[columnIndex]);\n                            }\n\n                            if (this._showTotals)\n                            {\n                                if (toDragColumnPosition.index > columnIndex)\n                                    puma(puma(this._divTotals).find(\"table td\")[toDragColumnPosition.index]).vrAfterPuma(puma(this._divTotals).find(\"table td\")[columnIndex]);\n                                else\n                                    puma(puma(this._divTotals).find(\"table td\")[toDragColumnPosition.index]).vrBeforePuma(puma(this._divTotals).find(\"table td\")[columnIndex]);\n                            }\n\n                            for (let row of Array.from(puma(this._divBody).find(\"table tr\")))\n                            {\n                                let field = puma(th).attr(\"field\");\n                                let tdJq = puma(row).find(\"td[field='\" + field + \"']\");\n                                let tdJqToDrag = puma(row).find(\"td[field='\" + toDragColumnPosition.field + \"']\");\n                                if (toDragColumnPosition.index > columnIndex)\n                                    tdJqToDrag.vrAfterPuma(tdJq);\n                                else\n                                    tdJqToDrag.vrBeforePuma(tdJq);\n                            }\n\n                            if (options.groupable)\n                            {\n                                if (toDragColumnPosition.index > columnIndex)\n                                    puma(this._divBody).find(\"colgroup\").find(\"col[field='\" + toDragColumnPosition.field + \"']\").vrAfterPuma(puma(this._divBody).find(\"colgroup\").find(\"col[field='\" + field + \"'\"));\n                                else\n                                    puma(this._divBody).find(\"colgroup\").find(\"col[field='\" + toDragColumnPosition.field + \"']\").vrBeforePuma(puma(this._divBody).find(\"colgroup\").find(\"col[field='\" + field + \"'\"));\n                            }\n                            //#endregion\n\n                            this.updateColumnPositions();\n\n                            //#region Update options.columns\n                            let column = options.columns!.find(k => k.field == field)!;\n                            let fieldToDrag = toDragColumnPosition.field;\n                            let columnToDrag = options.columns!.find(k => k.field == fieldToDrag)!;\n                            let indexToDrag = options.columns!.indexOf(columnToDrag);\n\n                            let fromIndex = options.columns!.indexOf(column);\n                            let tempColumn = options.columns![fromIndex];\n                            options.columns!.splice(fromIndex, 1);\n                            options.columns!.splice(indexToDrag, 0, tempColumn);\n                            //#endregion\n                        }\n                        //#endregion\n                    }\n                });\n        }\n    }\n\n    //#region Drag column support\n    drag(element: HTMLElement | JQuery | string, dragEvent?: DragSupportEvent)\n    {\n        let targetStartingXPosition: number | null = null;\n        puma(element).mousedown((emd: JQuery.MouseDownEvent) =>\n        {\n            if (this._isResizing === true)\n                return;\n\n            let startingXPosition = emd.clientX;\n            let startingYPosition = emd.clientY;\n\n            let target = puma(emd.currentTarget);\n            targetStartingXPosition = target.offset().left;\n            let targetStartingYPosition = target.offset().top;\n\n            let moved = false;\n            let tttt = window.setTimeout(() => targetStartingXPosition = null, 100);\n\n            //#region Moving\n            let that = this;\n            function mouseMoveDrag(emm: JQuery.MouseMoveEvent)\n            {\n                clearTimeout(tttt);\n                if (targetStartingXPosition == null || that._isResizing === true)\n                    return;\n\n                let actualXPosition = emm.clientX;\n                let actualYPosition = emm.clientY;\n                let xDiff = startingXPosition - actualXPosition;\n                let yDiff = startingYPosition - actualYPosition;\n\n                if (xDiff >= -50 && xDiff <= 50)\n                    return;\n\n                if (!(emm.clientX == startingXPosition && emm.clientY == startingYPosition))\n                {\n                    //#region Change position\n                    let leftPosition = (emm.clientX - (puma(target[0]).width() / 2));\n                    let topPosition = targetStartingYPosition;\n                    target.offset({ top: topPosition, left: leftPosition });\n                    //#endregion\n\n                    //#region Dragging event\n                    if (dragEvent!.onDragging != null)\n                    {\n                        let dragEveryEvent = new DragEveryEvent();\n                        dragEveryEvent.left = target.position().left;\n                        dragEveryEvent.top = target.position().top;\n                        dragEveryEvent.element = puma(element)[0];\n                        dragEvent!.onDragging(dragEveryEvent);\n                    }\n                    //#endregion\n                }\n\n                //#region Drag direction\n                if (Math.abs(xDiff) > Math.abs(yDiff))\n                {\n                    if (dragEvent == null && xDiff != 0)\n                        return;\n\n                    moved = true;\n                    that._isDragging = true;\n                }\n                else if (Math.abs(xDiff) < Math.abs(yDiff))\n                {\n                    if (dragEvent == null && xDiff != 0)\n                        return;\n\n                    moved = true;\n                    that._isDragging = true;\n                }\n                //#endregion\n            };\n            puma(this.container()).on(\"mousemove\", mouseMoveDrag);\n            //#endregion\n\n            //#region Stop moving\n            puma(this.container()).on(\"mouseup\", function mouseUpDrag(e: any)\n            {\n                puma(that.container()).off(\"mouseup\", mouseUpDrag);\n                puma(that.container()).off(\"mousemove\", mouseMoveDrag);\n                that._isDragging = false;\n\n                if (targetStartingXPosition == null || that._isResizing === true)\n                {\n                    targetStartingXPosition = null;\n                    return;\n                }\n\n                //#region Events\n                if (moved && dragEvent!.onDragged != null)\n                {\n                    let dragEveryEvent = new DragEveryEvent();\n                    dragEveryEvent.left = target.position().left;\n                    dragEveryEvent.top = target.position().top;\n                    dragEveryEvent.element = puma(element)[0];\n                    dragEvent!.onDragged(dragEveryEvent);\n                }\n                //#endregion\n\n                targetStartingXPosition = null;\n            });\n            //#endregion\n        });\n    }\n    //#endregion\n\n    //#endregion\n\n    //#region Sticker\n    sticker(text?: string)\n    {\n        if (text != null && text.length > 0)\n        {\n            this.showSticker();\n            this._lblSticker.value(text);\n        }\n\n        return this._lblSticker;\n    }\n\n    stickerVisible(state?: boolean)\n    {\n        if (state != null)\n            this._lblSticker.visible(state);\n\n        return this._lblSticker.visible();\n    }\n\n    showSticker()\n    {\n        this._lblSticker.show();\n    }\n\n    hideSticker()\n    {\n        this._lblSticker.hide();\n    }\n    //#endregion\n\n    //#region Utility\n    getTotals(dataItems: any[])\n    {\n        let options = this.getOptions();\n        let totals: TotalsResult[] = [];\n        for (let column of options.columns!.filter(k => k.aggregate != null && k.aggregate !== false))\n        {\n            let aggregateResult = 0;\n            switch (column.aggregate)\n            {\n                case GridAggregateMode.Count: aggregateResult = dataItems.map(k => k[column.field]).length; break;\n                case GridAggregateMode.Sum: aggregateResult = dataItems.map(k => k[column.field]).vrSum(); break;\n                case GridAggregateMode.Average:\n                    {\n                        if (column.type == GridColumnTypeEnum.Percentage)\n                            aggregateResult = dataItems.map(k => k[column.field]).vrAvg(undefined, column.countZeroInAverage) / 100;\n                        else\n                            aggregateResult = dataItems.map(k => k[column.field]).vrAvg(undefined, column.countZeroInAverage);\n                    }\n                    break;\n                case GridAggregateMode.Min:\n                    {\n                        if (column.type != null && (column.type == 5 || column.type == 6 || column.type == 7))\n                            aggregateResult = dataItems.map(k => new Date(k[column.field])).vrMin();\n                        else\n                            aggregateResult = dataItems.map(k => k[column.field]).vrMin();\n                    }\n                    break;\n                case GridAggregateMode.Max:\n                    {\n                        if (column.type != null && (column.type == 5 || column.type == 6 || column.type == 7))\n                            aggregateResult = dataItems.map(k => new Date(k[column.field])).vrMax();\n                        else\n                            aggregateResult = dataItems.map(k => k[column.field]).vrMax();\n                    }\n                    break;\n            }\n\n            let total = new TotalsResult();\n            total.field = column.field;\n            total.total = aggregateResult;\n            total.decimalDigits = column.decimalDigits;\n            total.roundingSettings = column.roundingSettings;\n            total.type = column.type!;\n            total.milesSeparator = column.milesSeparator;\n            totals.push(total);\n        }\n        return totals;\n    }\n\n    fixDatasourceWithVrDatetime(items: any[])\n    {\n        let newItems: any[] = [];\n        if (this._vrDateTimeFields != null && this._vrDateTimeFields.length > 0)\n        {\n            for (let item of items.filter(k => k))\n            {\n                for (let field of this._vrDateTimeFields)\n                {\n                    if (item[field] != null)\n                        item[field] = new DateTime(item[field]);\n                }\n                newItems.push(item);\n            }\n        }\n        else\n            newItems.vrPushRange(items);\n\n        return newItems;\n    }\n\n    fixDatasourceWithDate(items: any[])\n    {\n        let options = this.getOptions();\n        if (options.fixDatasourceWithDate === true)\n        {\n            this._vrDateTimeFields = [];\n            let dateTypes = [GridColumnTypeEnum.Date, GridColumnTypeEnum.DateTime, GridColumnTypeEnum.Time, GridColumnTypeEnum.LongDate,\n            GridColumnTypeEnum.LongDateTime, GridColumnTypeEnum.LongWeekDate, GridColumnTypeEnum.ShortWeekDate];\n            if (options.columns!.vrAny(k => dateTypes.includes(k.type!)))\n            {\n                let columnDateTypes = options.columns!.filter(k => dateTypes.includes(k.type!));\n                for (let column of columnDateTypes)\n                {\n                    for (let row of items)\n                    {\n                        if (row[column.field] != null)\n                        {\n                            let dateTime = new DateTime(row[column.field]);\n                            if (!this._vrDateTimeFields.includes(column.field) && dateTime.isCreatedByDateTime())\n                                this._vrDateTimeFields.push(column.field);\n\n                            row[column.field] = dateTime.toDate();\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    pageSize(pageSize?: number | boolean, update = false, triggerDataBound = false)\n    {\n        if (pageSize != null)\n        {\n            let options = this.getOptions();\n            if (pageSize === true)\n                pageSize = 50;\n\n            options.pageSize = pageSize;\n\n            if (pageSize === false)\n                this._pageSizeUnlimited = true;\n            else\n            {\n                this._pageSizeUnlimited = false;\n                this._actualPageSize = pageSize;\n\n                if (options.serverBinding !== false)\n                {\n                    let pageSelected = 0; // Get back to first page\n                    this._serverBindingPagination.indexFrom = pageSelected * pageSize;\n                    this._serverBindingPagination.indexTo = this._serverBindingPagination.indexFrom + pageSize - 1;\n                }\n\n                if (update)\n                {\n                    if (options.serverBinding !== false)\n                        this.rebind();\n                    else\n                        this.update(triggerDataBound);\n                }\n\n                let newPageSizeItem = { text: String(pageSize), value: String(pageSize), numberValue: pageSize };\n                let ddlPageSize = ControlManager.get<ComboBox>(this._elementId + \"_ddlPageSize\");\n                if (ddlPageSize != null)\n                {\n                    if (!ddlPageSize.items().vrAny(k => k.value == String(pageSize)))\n                        ddlPageSize.addItem(newPageSizeItem, true, false, { field: \"numberValue\" });\n\n                    ddlPageSize.value(String(pageSize), false);\n                }\n            }\n        }\n        return this._actualPageSize;\n    }\n\n    pageSelected(page?: number, update = true)\n    {\n        if (page != null)\n        {\n            let options = this.getOptions();\n            if (options.footer !== false)\n                puma(\"#\" + this._divFooter.id + \" button\").removeClass(\"p-grid-pageSelected\");\n\n            let buttonSelected = document.getElementById(this._elementId + \"_btnPage_\" + page);\n            if (buttonSelected != null)\n                buttonSelected.classList.add(\"p-grid-pageSelected\")\n\n            //#region Event\n            if (options.onPageSelected != null)\n            {\n                let event = new GridPageSelectedEvent();\n                event.sender = this;\n                event.pageSelected = page;\n                options.onPageSelected(event);\n\n                if (event.isDefaultPrevented())\n                    return this._actualPageSelected;\n            }\n            //#endregion\n\n            this._actualPageSelected = page;\n            if (update)\n            {\n                if (options.serverBinding !== false)\n                {\n                    let pageSelected = (this._actualPageSelected == 0) ? 0 : (this._actualPageSelected - 1);\n                    this._serverBindingPagination.indexFrom = pageSelected * this.pageSize();\n                    this._serverBindingPagination.indexTo = this._serverBindingPagination.indexFrom + this.pageSize() - 1;\n                    window.setTimeout(() => this.rebind());\n                }\n                else\n                    this.update();\n            }\n            return page;\n        }\n        return this._actualPageSelected;\n    }\n\n    checkboxesMode(mode?: GridCheckboxModeEnum)\n    {\n        let options = this.getOptions();\n        if (mode != null)\n            options.checkboxes = mode;\n\n        return options.checkboxes;\n    }\n\n    focus(field?: string)\n    {\n        let options = this.getOptions();\n        if (field != null && options.filterable)\n            puma(\"#\" + this._elementId + \"_StringFilter_\" + field).focus();\n    }\n\n    scrollTo(rowIndex: number)\n    {\n        let rowAtIndex = this.rows().find(k => k.index == rowIndex);\n        if (rowAtIndex != null)\n        {\n            let position = puma(rowAtIndex.element).position();\n            puma(this._divBody).scrollTop(position.top);\n        }\n    }\n\n    private isRepeater()\n    {\n        return puma(this.container()).hasClass(\"vrRepeaterContainer\");\n    }\n\n    private fixValueWithoutSpecialChars(value: string)\n    {\n        return String(value)\n            .replace(/%/, \"\").replace(/ /g, \"\").replace(/\\./g, \"\").replace(/-/g, \"\").replace(/\\//g, \"\").replace(/&/g, \"e\")\n            .replace(/\\(/g, \"\").replace(/\\)/g, \"\").replace(/,/g, \"\").replace(/\\[/g, \"\").replace(/\\]/g, \"\").replace(/:/g, \"\")\n            .replace(/'/g, \"\").replace(/@/g, \"\").replace(/\\s/g, \"\").replace(/€/g, \"\").replace(/∞/g, \"\").replace(/>/g, \"\")\n            .replace(/</g, \"\").replace(/\\+/g, \"\").replace(/\\*/g, \"\");\n    }\n\n    getOptions()\n    {\n        return (this._internalOptions != null) ? this._internalOptions : this.options<GridOptions>();\n    }\n\n    private recalculateHeightWidth()\n    {\n        this.recalculateFitSpacePercentage();\n        this.recalculateHeight();\n        this.recalculateWidth();\n        this.recalculateHeight();\n    }\n\n    recalculateWidth()\n    {\n        let options = this.getOptions();\n        let bodyJQuery = puma(this._divBody);\n        let divHeaderJQuery = puma(this._divHeader);\n        let divFilterJQuery = puma(this._divFilters);\n        let divTotalJQuery = puma(this._divTotals);\n\n        let bodyJQueryLocked = null;\n        let divHeaderJQueryLocked = null;\n        if (this.thereAreLockedColumns())\n        {\n            bodyJQueryLocked = puma(this._divBodyLocked);\n            divHeaderJQueryLocked = puma(this._divHeaderLocked);\n        }\n\n        if (bodyJQuery.css('overflow-y') == 'scroll' || bodyJQuery.css('overflow-y') == 'auto')\n        {\n            let minusWidth = (this._divBody.scrollHeight > this._divBody.clientHeight && this._divBody.clientHeight > 0) ? 19 : 2;\n            if (this.thereAreLockedColumns())\n                minusWidth += puma(this._divHeaderLocked).width() + 5;\n\n            //#region Structure\n            this._divHeader.style.cssText += \"width: Calc(100% - \" + minusWidth + \"px);\";\n            divHeaderJQuery.find(\"th[fitSpace='true']\").each((index: number, element: HTMLElement) =>\n            {\n                element.style.cssText += \"width: \" + this._fitSpaceColumnPercentage + \"%;\";\n                if (element.clientWidth == 0)\n                    element.style.cssText += \"width: 100px;\";\n            });\n\n            this._divFilters.style.cssText += \"width: Calc(100% - \" + minusWidth + \"px);\";\n            divFilterJQuery.find(\"td[fitSpace='true']\").each((index: number, element: HTMLElement) =>\n            {\n                element.style.cssText += \"width: \" + this._fitSpaceColumnPercentage + \"%;\";\n                if (element.clientWidth == 0)\n                    element.style.cssText += \"width: 100px;\";\n            });\n\n            if (this.thereAreLockedColumns())\n            {\n                bodyJQuery.width(\"Calc(100% - \" + (puma(this._divHeaderLocked).width() + 5) + \"px)\")\n                bodyJQueryLocked.width(puma(this._divHeaderLocked).width())\n            }\n            else\n                this._divBody.style.cssText += \"width: Calc(100% - 2px);\";\n\n            this._divTotals.style.cssText += \"width: Calc(100% - \" + minusWidth + \"px);\";\n            divTotalJQuery.find(\"td[fitSpace='true']\").each((index: number, element: HTMLElement) =>\n            {\n                element.style.cssText += \"width: \" + this._fitSpaceColumnPercentage + \"%;\";\n                if (element.clientWidth == 0)\n                    element.style.cssText += \"width: 100px;\";\n            });\n            //#endregion\n\n            //#region Manage spanFitSpace\n            if (this._divBody.scrollHeight > this._divBody.clientHeight && this._divBody.clientHeight > 0)\n            {\n                if (divHeaderJQuery.is(\":visible\"))\n                {\n                    this._spanFitHeaderSpace.style.cssText += \"top: \" + (divHeaderJQuery.position().top) + \"px; left: \" + (divHeaderJQuery.position().left + divHeaderJQuery.width()) + \"px\";\n                    puma(this._spanFitHeaderSpace).show();\n                }\n\n                if (options.filterable)\n                {\n                    this._spanFitFilterSpace.style.cssText += \"top: \" + (divFilterJQuery.position().top) + \"px; left: \" + (divFilterJQuery.position().left + divFilterJQuery.width()) + \"px\";\n                    puma(this._spanFitFilterSpace).show();\n                }\n                else\n                    puma(this._spanFitFilterSpace).hide();\n\n                if (this._showTotals && this.getAllItems().length > 0)\n                {\n                    this._spanFitTotalsSpace.style.cssText += \"top: \" + (divTotalJQuery.position().top) + \"px; left: \" + (divTotalJQuery.position().left + divTotalJQuery.width()) + \"px\";\n                    puma(this._spanFitTotalsSpace).show();\n                }\n                else\n                    puma(this._spanFitTotalsSpace).hide();\n            }\n            else\n            {\n                puma(this._spanFitHeaderSpace).hide();\n                puma(this._spanFitFilterSpace).hide();\n                puma(this._spanFitTotalsSpace).hide();\n            }\n            //#endregion\n        }\n        else\n        {\n            puma(this._spanFitHeaderSpace).hide();\n            puma(this._spanFitFilterSpace).hide();\n            puma(this._spanFitTotalsSpace).hide();\n        }\n\n        //#region Colgroup\n        if (options.groupable! || options.groupBy != null)\n        {\n            let i = 0;\n            bodyJQuery.find(\"table colgroup\").remove();\n            let colGroup = puma(\"<colgroup></colgroup>\").prependTo(bodyJQuery.find(\">table\"));\n\n            puma(this._divHeaderContainer).show();\n            divHeaderJQuery.show();\n\n            let colFragment = document.createDocumentFragment();\n            for (let column of Array.from<HTMLElement>(divHeaderJQuery.find(\">table tr:first-child th\")))\n            {\n                let field = column.getAttribute(\"field\")!;\n\n                let display = \"\";\n                if (column.offsetParent == null) // is hidden\n                    display = \"display: none;\";\n                else\n                    i++;\n\n                let width = column.offsetWidth;\n                if (i == 1)\n                    width -= 1;\n\n                if (field == \"vrGridCheckboxColumn\")\n                    width = 30;\n\n                let col = document.createElement(\"col\");\n                col.setAttribute(\"field\", field);\n                col.style.cssText += \"width: \" + width + \"px; \" + display + \";\";\n                colFragment.appendChild(col);\n            }\n            colGroup[0].appendChild(colFragment);\n\n            if (options.header === false)\n                divHeaderJQuery.hide();\n\n            if (this.thereAreLockedColumns())\n            {\n                let i = 0;\n                bodyJQueryLocked.find(\"table colgroup\").remove();\n                let colGroupLocked = puma(\"<colgroup></colgroup>\").prependTo(bodyJQueryLocked.find(\">table\"));\n\n                divHeaderJQueryLocked.show();\n\n                let colLockedFragment = document.createDocumentFragment();\n                for (let column of Array.from<HTMLElement>(divHeaderJQueryLocked.find(\">table tr:first-child th\")))\n                {\n                    let field = column.getAttribute(\"field\")!;\n\n                    let display = \"\";\n                    if (column.offsetParent == null) // is hidden\n                        display = \"display: none;\";\n                    else\n                        i++;\n\n                    let width = column.offsetWidth;\n                    if (i == 1)\n                        width -= 1;\n\n                    if (field == \"vrGridCheckboxColumn\")\n                        width = 30;\n\n                    let colLocked = document.createElement(\"col\");\n                    colLocked.setAttribute(\"field\", field);\n                    colLocked.style.cssText += \"width: \" + width + \"px; \" + display + \";\";\n                    colLockedFragment.appendChild(colLocked);\n                }\n                colGroupLocked[0].appendChild(colLockedFragment);\n\n                if (options.header === false)\n                    divHeaderJQueryLocked.hide();\n            }\n\n            if (options.header === false)\n                puma(this._divHeaderContainer).hide();\n        }\n        //#endregion\n    }\n\n    private recalculateFitSpacePercentage()\n    {\n        let options = this.getOptions();\n        let tableWidth = puma(this.element()).width();\n        let columnsWidthOccupied = 0;\n        let fitSpaceColumnsNumber = 0;\n\n        for (let column of options.columns!)\n        {\n            if (column.hidden == true)\n                continue;\n\n            if (this.thereAreLockedColumns() && column.type == GridColumnTypeEnum.EditButton)\n                continue;\n\n            if ((column.fitSpace == null || column.fitSpace == false))\n                columnsWidthOccupied += (column.width != null) ? column.width : ((column.type == GridColumnTypeEnum.EditButton) ? 32 : 100);\n            else\n                fitSpaceColumnsNumber++;\n        }\n\n        let remainingSpace = tableWidth - columnsWidthOccupied;\n        if (!this.thereAreLockedColumns() && options.checkboxes != GridCheckboxModeEnum.None)\n            remainingSpace -= 20;\n\n        if (options.groupBy != null && (options.groupBy as GridGroupBySettings).fields != null)\n            remainingSpace -= 20 * (options.groupBy as GridGroupBySettings).fields.length;\n\n        let fitSpaceColumnPercentage = (100 * (remainingSpace / fitSpaceColumnsNumber) / tableWidth);\n        this._fitSpaceColumnPercentage = fitSpaceColumnPercentage;\n    }\n\n    height(height?: number | string)\n    {\n        if (height != null)\n        {\n            let options = this.getOptions();\n            if (typeof (height) == \"number\" && height > 0)\n            {\n                puma(this._divBody).height(height);\n                puma(\"#\" + this.element().id + \"_grid_body_container\").height(height);\n\n                if (this._lblSticker != null)\n                {\n                    let headerHeight = (puma(this._divHeader).is(\":visible\")) ? 34 : 0;\n                    let filtersHeight = (options.filterable) ? 30 : 0;\n                    let totalsheight = (this._showTotals) ? 25 : 0;\n                    puma(this._lblSticker.container()).height(puma(this._divBody).height() + headerHeight + filtersHeight + totalsheight - 1);\n                }\n\n                if (options.lockable && this._divBody != null)\n                {\n                    if (this._divBody.scrollWidth > this._divBody.clientWidth && this._divBody.clientWidth > 0)\n                        puma(this._divBodyLocked).height(Number(height) - 17);\n                    else\n                        puma(this._divBodyLocked).height(height);\n                }\n            }\n        }\n        return puma(this._divBody).height();\n    }\n\n    recalculateHeight(afterFilter = false)\n    {\n        let options = this.getOptions();\n\n        let headerHeight = (puma(this._divHeader).is(\":visible\")) ? 34 : 0;\n        let filtersHeight = (options.filterable) ? 30 : 0;\n        let totalsheight = (this._showTotals) ? 25 : 0;\n\n        if ((typeof (options.height) == \"number\" && options.height! < 0) || options.height == GridHeightModeEnum.FitScreen)\n        {\n            let footerHeight = (options.footer !== false) ? 34 : 0;\n            let toolbarHeight = (options.toolbar != null) ? 34 : 0;\n            let diffHeaderElement = 4;\n            let diffHeight = headerHeight + filtersHeight + toolbarHeight + totalsheight + footerHeight + diffHeaderElement;\n\n            let containerOffset = puma(\"#\" + this._elementId + \"_divContainer\").offset();\n            let containerOffsetTop = (containerOffset != null) ? containerOffset.top : 0;\n            let height = document.body.offsetHeight - containerOffsetTop - diffHeight + \"px\";\n            puma(this._divBody).height(height);\n\n            let heightContainer = document.body.offsetHeight - containerOffsetTop - diffHeight + 2 + \"px\";\n            puma(\"#\" + this.element().id + \"_grid_body_container\").height(heightContainer);\n\n            if (options.lockable && this._divBody != null)\n            {\n                if (this._divBody.scrollWidth > this._divBody.clientWidth && this._divBody.clientWidth > 0)\n                    puma(this._divBodyLocked).height(height.vrGetNumericPart() - 17);\n                else\n                    puma(this._divBodyLocked).height(height);\n            }\n\n            if (this._lblSticker != null)\n                puma(this._lblSticker.container()).height(puma(this._divBody).height() + headerHeight + filtersHeight + totalsheight - 1);\n        }\n        else if (afterFilter && typeof (options.height) == \"number\")\n        {\n            if (puma(this._divFilters).height() > 32)\n                puma(this._divBody).height(options.height - 58.5);\n            else\n                puma(this._divBody).height(options.height - 31);\n\n            let height = puma(this._divBody).height();\n            puma(\"#\" + this.element().id + \"_grid_body_container\").height(height + 2);\n\n            if (this._lblSticker != null)\n                puma(this._lblSticker.container()).height(height + headerHeight + filtersHeight + totalsheight - 1);\n\n            if (options.lockable && this._divBody != null)\n            {\n                if (this._divBody.scrollWidth > this._divBody.clientWidth && this._divBody.clientWidth > 0)\n                    puma(this._divBodyLocked).height(Number(puma(this._divBody).height()) - 17);\n                else\n                    puma(this._divBodyLocked).height(puma(this._divBody).height());\n            }\n        }\n    }\n\n    private adjustTrHeight()\n    {\n        let options = this.getOptions();\n        if (this.thereAreLockedColumns())\n        {\n            let trLockedList = Array.from<HTMLElement>(puma(this._elementLocked).find(\">tbody tr\"));\n            let trList = Array.from<HTMLElement>(puma(this.element()).find(\">tbody tr\"));\n            for (let i = 0; i < trLockedList.length; i++)\n            {\n                let trLocked = trLockedList[i];\n                let tr = trList[i];\n                let heightToSet = (puma(trLocked).height() > puma(tr).height()) ? puma(trLocked).height() : puma(tr).height();\n                if (heightToSet < options.rowHeight!)\n                    heightToSet = options.rowHeight!;\n\n                trLocked.style.cssText += \"height: \" + heightToSet + \"px;\";\n                tr.style.cssText += \"height: \" + heightToSet + \"px;\";\n            }\n        }\n    }\n\n    //#region WebApi\n    private doWebApiCall(request: GridWebApiRequest, requestType: GridRequestTypeEnum, promiseCallback?: Function)\n    {\n        let that = this;\n        let options = this.getOptions();\n\n        let json: any = {};\n        json.AuthKey = request.authKey;\n\n        //#region Type\n        if (requestType == GridRequestTypeEnum.Delete)\n        {\n            if ((request as GridToolbarDeleteRequest).deletedValuesPropertyName == null)\n                (request as GridToolbarDeleteRequest).deletedValuesPropertyName = \"itemValues\";\n\n            if ((request as GridToolbarDeleteRequest).valuePropertyName == null)\n                (request as GridToolbarDeleteRequest).valuePropertyName = options.dataSourceFieldId!;\n\n            json[(request as GridToolbarDeleteRequest).deletedValuesPropertyName!] = this.getDeletedItemValues((request as GridToolbarDeleteRequest).valuePropertyName);\n        }\n        else if (requestType == GridRequestTypeEnum.Rebind || requestType == GridRequestTypeEnum.Excel)\n        {\n            if (requestType == GridRequestTypeEnum.Rebind)\n            {\n                if ((request as GridRebindRequest).itemsPropertyName == null)\n                    (request as GridRebindRequest).itemsPropertyName = \"items\";\n            }\n\n            //#region Server binding\n            if (options.serverBinding !== false)\n            {\n                //#region Fix data for server\n                for (const [key, value] of this._dictionaryFilterConditions.entries())\n                {\n                    if (value.dateFilterSettings != null)\n                    {\n                        value.dateFilterSettings.dateFrom = Date.vrConvertDateFromClient(value.dateFilterSettings.dateFrom);\n                        if (value.dateFilterSettings.dateTo != null)\n                            value.dateFilterSettings.dateTo = Date.vrConvertDateFromClient(value.dateFilterSettings.dateTo);\n                    }\n                }\n\n                for (const column of options.columns!)\n                {\n                    if (column.aggregate === true) \n                    {\n                        switch (column.type) \n                        {\n                            case GridColumnTypeEnum.Number: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Currency: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Duration: column.aggregate = GridAggregateMode.Sum; break;\n                            case GridColumnTypeEnum.Percentage: column.aggregate = GridAggregateMode.Average; break;\n                            default: column.aggregate = GridAggregateMode.Sum;\n                        }\n                    }\n                    column.aggregate = (column.aggregate == null || column.aggregate === false) ? GridAggregateMode.None : column.aggregate;\n                }\n                //#endregion\n\n                let gridServerBindingSettings = new VrGridServerBindingSettings();\n                gridServerBindingSettings.indexFrom = this._serverBindingPagination.indexFrom;\n                gridServerBindingSettings.indexTo = this._serverBindingPagination.indexTo;\n                gridServerBindingSettings.pageSize = this._actualPageSize;\n                gridServerBindingSettings.page = this._actualPageSelected;\n                gridServerBindingSettings.columns = options.columns;\n                gridServerBindingSettings.sortingInfo = this._actualSortingInfo;\n                gridServerBindingSettings.filters = Dictionary.fromMap(this._dictionaryFilterConditions);\n                gridServerBindingSettings.groupByFields = (options.groupBy == null) ? [] : ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field);\n                gridServerBindingSettings.excel = requestType == GridRequestTypeEnum.Excel;\n\n                if ((request as GridExcelRequest).fileName != null)\n                    gridServerBindingSettings.excelFileName = (request as GridExcelRequest).fileName;\n\n                json.serverBindingSettings = gridServerBindingSettings;\n            }\n            //#endregion\n        }\n        else if (requestType == GridRequestTypeEnum.Save)\n        {\n            for (let property in this._actualEditedItem)\n            {\n                let propertyValue = this._actualEditedItem[property];\n                if (Object.prototype.toString.call(propertyValue) === '[object Date]')\n                    this._actualEditedItem[property] = Date.vrConvertDateFromClient(propertyValue);\n            }\n\n            if ((request as GridSaveRequest).itemPropertyName == null)\n                (request as GridSaveRequest).itemPropertyName = \"item\";\n            json[(request as GridSaveRequest).itemPropertyName!] = this._actualEditedItem;\n        }\n        //#endregion\n\n        //#region Method\n        if (request.method != null)\n        {\n            if (!request.method!.startsWith(\"/api/\"))\n            {\n                if (request.method!.startsWith(\"/\"))\n                    request.method!.substring(1);\n\n                request.method = \"/api/\" + request.method;\n            }\n        }\n        //#endregion\n\n        //#region Paramaters\n        if (request.otherParameters != null)\n        {\n            let jsonParameters = Object.getOwnPropertyNames(request.otherParameters);\n            for (let param of jsonParameters)\n                json[param] = request.otherParameters[param];\n        }\n\n        if (request.parameters != null)\n        {\n            let parameters = request.parameters();\n            let jsonParameters = Object.getOwnPropertyNames(parameters);\n            for (let param of jsonParameters)\n                json[param] = parameters[param];\n        }\n        //#endregion\n\n        let jsonS = JSON.stringify(json);\n\n        //#region Loader\n        let loadingElement = request.loadingElement;\n        if (loadingElement == null)\n            loadingElement = true;\n\n        if (typeof (loadingElement) == \"boolean\")\n        {\n            if (loadingElement === false)\n                loadingElement = undefined;\n            else\n                loadingElement = this.container();\n        }\n\n        if (loadingElement != null)\n            showLoader((request as any).tempLoadingElement != null ? (request as any).tempLoadingElement : loadingElement, true, \"vrGridLoaderRebind\" + this._elementId);\n\n        (request as any).tempLoadingElement = undefined;\n        //#endregion\n\n        $.ajax({\n            type: \"POST\",\n            contentType: \"application/json\",\n            data: jsonS,\n            method: \"POST\",\n            processData: false,\n            dataType: \"json\",\n            url: request.method,\n            success: (response: any, textStatus: string, jqXHR: JQueryXHR) =>\n            {\n                hideLoader(\"vrGridLoaderRebind\" + this._elementId);\n\n                that._deletedItems = [];\n\n                if (response != null && (response.Success || response.success))\n                {\n                    //#region Success notification message\n                    let successMessage = request!.successNotificationMessage;\n                    successMessage = (successMessage == null) ? false : successMessage;\n\n                    if (typeof (successMessage) == \"string\")\n                        successMessage = successMessage;\n                    else if (successMessage == true)\n                    {\n                        if (requestType == GridRequestTypeEnum.Delete)\n                            successMessage = \"Eliminazione avvenuta correttamente\";\n                        else if (requestType == GridRequestTypeEnum.Save)\n                            successMessage = \"Salvataggio effettuato correttamente\";\n                    }\n\n                    if (typeof (successMessage) == \"string\")\n                        notify(successMessage);\n                    //#endregion\n\n                    //#region Rebind\n                    let rebindAfterSave = request!.rebindGridAfterSave;\n                    rebindAfterSave = (rebindAfterSave == null) ? false : rebindAfterSave;\n\n                    if (rebindAfterSave && requestType != GridRequestTypeEnum.Rebind)\n                        that.rebind();\n                    else\n                    {\n                        if (requestType == GridRequestTypeEnum.Save)\n                            that.updateRow(that._actualEditedItem);\n                        else if (requestType == GridRequestTypeEnum.RebindSpecificRows)\n                        {\n                            let specificItemIdListRequested: any[] = [];\n                            if (request.otherParameters != null)\n                                specificItemIdListRequested = request.otherParameters[(request as GridRebindRequest).specificItemIdListPropertyName!];\n\n                            let specificItems: any[] = response[(request as GridRebindRequest).itemsPropertyName!];\n                            if (specificItems != null && specificItems.length > 0)\n                            {\n                                let itemToRemoveIdList = specificItemIdListRequested.filter(k => !specificItems.map(k => k[options.dataSourceFieldId!]).includes(k));\n                                let itemsToAddIdList = specificItems.filter(k => !this.originalDataSource().map(j => j[options.dataSourceFieldId!]).includes(k[options.dataSourceFieldId!])).map(k => k[options.dataSourceFieldId!]);\n\n                                for (let specificItem of specificItems)\n                                {\n                                    let specificItemId = specificItem[options.dataSourceFieldId!];\n                                    if (itemToRemoveIdList.includes(specificItemId) || itemsToAddIdList.includes(specificItemId))\n                                        continue;\n\n                                    this.updateRow(specificItem, false);\n                                }\n\n                                for (let itemToRemoveId of itemToRemoveIdList)\n                                    this.deleteRow(itemToRemoveId, false);\n\n                                for (let itemToAddId of itemsToAddIdList)\n                                    this.addRow(specificItems.find(k => k[options.dataSourceFieldId!] == itemToAddId), false);\n                            }\n                            else\n                            {\n                                for (let itemToRemoveId of specificItemIdListRequested)\n                                    this.deleteRow(itemToRemoveId, false);\n                            }\n\n                            if (request.otherParameters[\"update\"])\n                            {\n                                if (this._actualSortingInfo != null)\n                                    this.applySorting(false);\n\n                                if (this._dictionaryFilterConditions.size > 0)\n                                    this.applyFilters(false, false);\n\n                                if (options.groupBy != null)\n                                    this.sortingGroupFields(this.dataSource());\n\n                                this.update(true, false);\n                            }\n                        }\n                    }\n                    //#endregion\n\n                    if (request!.callbackBeforeDatasourceChange != null)\n                        request!.callbackBeforeDatasourceChange(response);\n\n                    //#region Set data source if rebind\n                    if (requestType == GridRequestTypeEnum.Rebind && response[(request as GridRebindRequest).itemsPropertyName!] != null)\n                    {\n                        if (options.serverBinding !== false)\n                        {\n                            this._responseForServerBinding = response;\n\n                            let maxLength = this._responseForServerBinding[(options.serverBinding! as GridServerBindSettings).itemCountPropertyName!];\n                            let pageSelected = this.pageSelected();\n                            let numberOfPages = Math.trunc(maxLength / Number(options.pageSize!));\n                            if (maxLength % Number(options.pageSize!) > 0)\n                                numberOfPages += 1;\n\n                            if (pageSelected > numberOfPages)\n                                this.pageSelected(1, false);\n                        }\n\n                        let clearFilters = ((request as GridRebindRequest).clearFilters == null) ? false : (request as GridRebindRequest).clearFilters;\n\n                        let newDatasource = response[(request as GridRebindRequest).itemsPropertyName!];\n                        if (newDatasource.length == 0)\n                            this.clear(undefined, clearFilters);\n                        else\n                            that.dataSource(newDatasource, clearFilters);\n                    }\n                    //#endregion\n\n                    //#region Excel for Server binding\n                    if (requestType == GridRequestTypeEnum.Excel && options.serverBinding !== false)\n                    {\n                        let downloadUrl = response[(options.serverBinding as GridServerBindSettings).excelDownloadUrlPropertyName!];\n                        if (downloadUrl != null && downloadUrl.length > 0)\n                            location.replace(downloadUrl);\n                    }\n                    //#endregion\n\n                    if (that._wndAutoWindow != null)\n                        that._wndAutoWindow.close();\n\n                    if (request!.callback != null)\n                        request!.callback(response);\n\n                    if (options.onDataSourceChanged != null)\n                        options.onDataSourceChanged();\n\n                    if (promiseCallback != null)\n                        promiseCallback(response);\n                }\n                else\n                {\n                    let exception = (response.Exception || response.exception);\n                    let exceptionCode = (exception.Code || exception.code);\n                    if (response != null && exceptionCode == \"403\")\n                    {\n                        location.replace(\"/Default.aspx\");\n                        return;\n                    }\n\n                    //#region Error notification message\n                    let errorMessage = request!.errorNotificationMessage;\n                    errorMessage = (errorMessage == null) ? true : errorMessage;\n\n                    if (errorMessage == true || typeof (errorMessage) == \"string\")\n                        notifyError((typeof (errorMessage) == \"string\") ? errorMessage! : ((response != null) ? (response.ExceptionMessage! || response.exceptionMessage) : \"Errore nel salvataggio\"));\n                    //#endregion\n\n                    //#region Rebind\n                    let rebindAfterError = request!.rebindGridAfterError;\n                    rebindAfterError = (rebindAfterError == null) ? false : rebindAfterError;\n\n                    if (rebindAfterError && requestType != GridRequestTypeEnum.Rebind)\n                        that.rebind();\n                    //#endregion\n\n                    let closeWindowAfterError = request!.closeWindowAfterError;\n                    closeWindowAfterError = (closeWindowAfterError == null) ? false : closeWindowAfterError;\n                    if (that._wndAutoWindow != null && closeWindowAfterError)\n                        that._wndAutoWindow.close();\n\n                    if (request!.errorCallback != null)\n                        request!.errorCallback((response != null) ? (response.ExceptionMessage! || response.exceptionMessage) : \"Errore nel salvataggio\");\n                }\n            },\n            error: (response: JQueryXHR, textStatus: string, errorThrown: string) =>\n            {\n                hideLoader(\"vrGridLoaderRebind\" + this._elementId);\n\n                //#region Error notification message\n                let errorMessage = request!.errorNotificationMessage;\n                errorMessage = (errorMessage == null) ? true : errorMessage;\n\n                let message = \"Errore nel salvataggio\";\n                if (response.responseJSON != null)\n                    message = (response.responseJSON.errorMessage != null) ? response.responseJSON.errorMessage : ((response.responseJSON.Message || response.responseJSON.message) + \"<br />\" + (response.responseJSON.ExceptionMessage || response.responseJSON.exceptionMessage));\n                else if (response.responseText != null && response.responseText != \"\")\n                    message = response.responseText;\n                else if (response.statusText != null && response.statusText != \"\")\n                    message = response.statusText;\n                else\n                    message = \"Si è verificato un problema\";\n\n                if (response.status == 401)\n                    message = \"Auth key errata\";\n                else if (response.status == 404)\n                    message = \"Web Api non trovata\";\n                else if (response.status == 403)\n                {\n                    location.replace(\"/Default.aspx\");\n                    return;\n                }\n\n                let finalMessage = \"Errore nel salvataggio\";\n                if (errorMessage == true || typeof (errorMessage) == \"string\")\n                {\n                    finalMessage = (errorMessage == true) ? message : errorMessage;\n                    notifyError(finalMessage);\n                }\n                //#endregion\n\n                //#region Rebind\n                let rebindAfterError = request!.rebindGridAfterError;\n                rebindAfterError = (rebindAfterError == null) ? false : rebindAfterError;\n\n                if (rebindAfterError && requestType != GridRequestTypeEnum.Rebind)\n                    that.rebind();\n                //#endregion\n\n                let closeWindowAfterError = request!.closeWindowAfterError;\n                closeWindowAfterError = (closeWindowAfterError == null) ? false : closeWindowAfterError;\n                if (that._wndAutoWindow != null && closeWindowAfterError)\n                    that._wndAutoWindow.close();\n\n                if (request!.errorCallback != null)\n                    request!.errorCallback(finalMessage);\n            }\n        });\n    }\n    //#endregion\n\n    //#endregion    \n    enable(state?: boolean | string)\n    {\n        if (state == null)\n            state = true;\n\n        puma(\"#\" + puma(this.element()).attr(\"id\") + \"_divContainer\").find(\".grid_divTableDisabled\").remove();\n        if (state !== true)\n        {\n            let options = this.getOptions();\n            let message = (typeof (state) == \"string\") ? (\"<span>\" + state + \"</span>\") : \"\";\n            if (message == \"\" && typeof (options.enable) == \"string\")\n                message = \"<span>\" + options.enable + \"</span>\";\n\n            puma(\"<div class='grid_divTableDisabled'>\" + message + \"</div>\").vrAppendToPuma(\"#\" + puma(this.element()).attr(\"id\") + \"_divContainer\");\n        }\n    }\n    //#endregion\n\n    //#region Toolbar\n    private toolbarCustomLogic(toolbarItem: GridToolbarItem, toolbarClickEvent: GridToolbarClickEvent)\n    {\n        if (toolbarItem.onBeforeClick != null)\n        {\n            toolbarItem.onBeforeClick(toolbarClickEvent);\n            if (toolbarClickEvent.isDefaultPrevented)\n                return;\n        }\n\n        switch (toolbarItem.type)\n        {\n            case GridToolbarItemType.Add:\n                {\n                    if (toolbarItem.onClick == null)\n                        this.openAutoWindow();\n                }\n                break;\n            case GridToolbarItemType.Delete:\n                {\n                    let options = this.getOptions();\n                    let checkedItems = this.getCheckedItems();\n                    this._deletedItems.vrPushRange(checkedItems);\n                    toolbarClickEvent.deletedItems = this._deletedItems;\n\n                    this.deleteRows(checkedItems.map(k => k[options.dataSourceFieldId!]));\n                    this.clearSelection();\n\n                    //#region Delete request\n                    let deleteRequest = toolbarItem.deleteRequest;\n                    if (deleteRequest != null && options.mode == GridModeEnum.Sync)\n                        this.doWebApiCall(deleteRequest, GridRequestTypeEnum.Delete);\n                    else\n                    {\n                        this.update();\n                        if (options.onDataSourceChanged != null)\n                            options.onDataSourceChanged();\n                    }\n                    //#endregion\n                }\n                break;\n            case GridToolbarItemType.Rebind:\n                {\n                    this._deletedItems = [];\n                    this.rebind();\n                    this.clearSelection();\n                }\n                break;\n            case GridToolbarItemType.Excel:\n                {\n                    this.excelExport(toolbarItem.excelFileName);\n                }\n                break;\n            case GridToolbarItemType.ExcelWithHiddenColumns:\n                {\n                    this.excelExport(toolbarItem.excelFileName, true);\n                }\n                break;\n        }\n\n        if (toolbarItem.onClick != null)\n            toolbarItem.onClick(toolbarClickEvent);\n    }\n\n    //#region Excel\n    excelExport(fileName = \"Esportazione_excel\", exportHiddenColumns = false, download = true)\n    {\n        let promise = new Promise((callback: (e: ExcelExportPromise) => void) =>\n        {\n            let options = this.getOptions();\n\n            //#region Before excel export\n            if (options.onBeforeExcelExport != null)\n            {\n                let event = new GridBeforeExcelExportEvent();\n                event.sender = this;\n                event.fileName = fileName;\n                event.exportHiddenColumns = exportHiddenColumns;\n                options.onBeforeExcelExport(event);\n\n                if (event.isDefaultPrevented())\n                    return;\n            }\n            //#endregion\n\n            if (!options.serverBinding)\n                showLoader(this.container(), true, \"vrGridLoaderExcel\" + this._elementId);\n\n            window.setTimeout(() =>\n            {\n                if (!options.serverBinding)\n                {\n                    //#region Header rows\n                    let headerRow = new GridExcelRow();\n                    headerRow.cells = [];\n                    for (let column of options.columns!)\n                    {\n                        if (column.exportable !== true && ((!exportHiddenColumns && column.hidden == true\n                            && (options.groupBy == null\n                                || ((options.groupBy as GridGroupBySettings).fields != null && !((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(column.field))))\n                            || column.type == GridColumnTypeEnum.EditButton || column.type == GridColumnTypeEnum.Image\n                            || column.type == GridColumnTypeEnum.Button || column.type == GridColumnTypeEnum.Icon || column.exportable === false))\n                            continue;\n\n                        let excelCell = new GridExcelCell();\n                        excelCell.field = column.field;\n                        excelCell.title = column.title;\n                        excelCell.text = column.title;\n                        excelCell.bold = column.bold;\n                        excelCell.type = column.type;\n                        excelCell.width = column.width;\n                        excelCell.cellSettings = column.headerSettings;\n                        excelCell.hidden = column.hidden;\n                        excelCell.locked = column.locked;\n                        headerRow.cells.push(excelCell);\n                    }\n                    //#endregion\n\n                    //#region Content rows\n                    let contentRows: GridExcelRow[] = [];\n                    this.fixDatasourceWithDate(this.dataSource());\n                    for (let item of this.dataSource())\n                    {\n                        let contentRow = new GridExcelRow();\n                        contentRow.cells = [];\n\n                        for (let column of options.columns!)\n                        {\n                            if (column.exportable !== true && ((!exportHiddenColumns && column.hidden == true\n                                && (options.groupBy == null\n                                    || ((options.groupBy as GridGroupBySettings).fields != null && !((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(column.field))))\n                                || column.type == GridColumnTypeEnum.EditButton || column.type == GridColumnTypeEnum.Image\n                                || column.type == GridColumnTypeEnum.Button || column.type == GridColumnTypeEnum.Icon\n                                || column.exportable === false))\n                                continue;\n\n                            let textHTML = (item[column.field] == null) ? \"\" : String(item[column.field]);\n                            let textAlign = GridAlignEnum.Left;\n\n                            //#region Type\n                            switch (column.type)\n                            {\n                                //#region Date, DateTime, Time\n                                case GridColumnTypeEnum.Date:\n                                case GridColumnTypeEnum.DateTime:\n                                case GridColumnTypeEnum.Time:\n                                case GridColumnTypeEnum.LongDate:\n                                case GridColumnTypeEnum.LongDateTime:\n                                case GridColumnTypeEnum.LongWeekDate:\n                                case GridColumnTypeEnum.ShortWeekDate:\n                                    {\n                                        textAlign = GridAlignEnum.Center;\n                                        let dateModeEnum: DateModeEnum = DateModeEnum.Date;\n\n                                        if (column.type == GridColumnTypeEnum.Date) dateModeEnum = DateModeEnum.Date;\n                                        else if (column.type == GridColumnTypeEnum.DateTime) dateModeEnum = DateModeEnum.DateTime;\n                                        else if (column.type == GridColumnTypeEnum.Time) dateModeEnum = DateModeEnum.Time;\n                                        else if (column.type == GridColumnTypeEnum.LongDate) dateModeEnum = DateModeEnum.LongDate;\n                                        else if (column.type == GridColumnTypeEnum.LongDateTime) dateModeEnum = DateModeEnum.LongDateTime;\n                                        else if (column.type == GridColumnTypeEnum.LongWeekDate) dateModeEnum = DateModeEnum.LongWeekDate;\n                                        else if (column.type == GridColumnTypeEnum.ShortWeekDate) dateModeEnum = DateModeEnum.ShortWeekDate;\n\n                                        textHTML = (textHTML == \"\") ? \"\" : new Date(new Date(textHTML)).vrToItalyString(dateModeEnum, column.showSeconds);\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region Number, Currency, Percentage, Duration\n                                case GridColumnTypeEnum.Number:\n                                case GridColumnTypeEnum.Currency:\n                                case GridColumnTypeEnum.Percentage:\n                                case GridColumnTypeEnum.Duration:\n                                    {\n                                        textAlign = GridAlignEnum.Right;\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region Custom\n                                case GridColumnTypeEnum.Custom:\n                                    {\n                                        textAlign = GridAlignEnum.Center;\n                                        if (column.customSettings != null)\n                                        {\n                                            try\n                                            {\n                                                let settings = column.customSettings({ dataItem: item, field: column.field, sender: this });\n                                                if (settings && settings.template !== \"\" && textHTML == \"\")\n                                                    textHTML = settings.template;\n                                            }\n                                            catch (e) { }\n                                        }\n                                        else\n                                            textHTML = puma(textHTML).text();\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region Label\n                                case GridColumnTypeEnum.Label:\n                                    {\n                                        textAlign = GridAlignEnum.Center;\n                                        if (column.labelSettings != null)\n                                        {\n                                            try\n                                            {\n                                                let settings = column.labelSettings({ dataItem: item, field: column.field, sender: this });\n                                                textHTML = (settings.text == null) ? \"\" : settings.text;\n                                            }\n                                            catch (e) { }\n                                        }\n                                        else\n                                            textHTML = puma(textHTML).text();\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region String\n                                case GridColumnTypeEnum.String:\n                                    {\n                                        textAlign = GridAlignEnum.Left;\n                                        textHTML = puma(\"<span>\" + textHTML + \"</span>\").text();\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region Password\n                                case GridColumnTypeEnum.PasswordViewable:\n                                    {\n                                        textAlign = GridAlignEnum.Left;\n                                        textHTML = puma(\"<span>\" + textHTML + \"</span>\").text();\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region CheckBox\n                                case GridColumnTypeEnum.Checkbox:\n                                case GridColumnTypeEnum.Boolean:\n                                    {\n                                        textAlign = GridAlignEnum.Center;\n                                        textHTML = (item[column.field] == true) ? \"true\" : \"false\";\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region ComboBox, DropDownList, DropDownTree\n                                case GridColumnTypeEnum.ComboBox:\n                                case GridColumnTypeEnum.DropDownList:\n                                case GridColumnTypeEnum.DropDownTree:\n                                case GridColumnTypeEnum.DropDownTreeCheckboxes:\n                                    {\n                                        textAlign = GridAlignEnum.Left;\n                                        let itemValue = item[column.displayField!];\n                                        if (itemValue != null)\n                                            textHTML = itemValue.toString();\n                                        else\n                                            textHTML = \"\";\n                                    }\n                                    break;\n                                //#endregion\n\n                                //#region Color\n                                case GridColumnTypeEnum.Color:\n                                    {\n                                        textAlign = GridAlignEnum.Center;\n                                    }\n                                    break;\n                                //#endregion\n                            }\n                            //#endregion\n\n                            if (column.cellSettings == null)\n                                column.cellSettings = new GridHeaderAndCellSettings();\n\n                            if (column.cellSettings.textAlign == null)\n                                column.cellSettings.textAlign = textAlign;\n\n                            let excelCell = new GridExcelCell();\n                            excelCell.field = column.field;\n                            excelCell.title = column.title;\n                            excelCell.text = textHTML;\n                            excelCell.bold = column.bold;\n                            excelCell.type = column.type;\n                            excelCell.width = column.width;\n                            excelCell.cellSettings = column.cellSettings;\n                            excelCell.decimalDigits = column.decimalDigits;\n                            excelCell.roundingSettings = (column.roundingSettings != null) ? column.roundingSettings : options.roundingSettings;\n                            excelCell.hidden = column.hidden;\n                            excelCell.locked = column.locked;\n\n                            //#region Aggregate mode\n                            if (column.aggregate === true)\n                            {\n                                switch (column.type)\n                                {\n                                    case GridColumnTypeEnum.Number: column.aggregate = GridAggregateMode.Sum; break;\n                                    case GridColumnTypeEnum.Currency: column.aggregate = GridAggregateMode.Sum; break;\n                                    case GridColumnTypeEnum.Duration: column.aggregate = GridAggregateMode.Sum; break;\n                                    case GridColumnTypeEnum.Percentage: column.aggregate = GridAggregateMode.Average; break;\n                                    default: column.aggregate = GridAggregateMode.Sum;\n                                }\n                            }\n                            excelCell.aggregate = (column.aggregate == null || column.aggregate === false) ? GridAggregateMode.None : column.aggregate;\n                            //#endregion\n\n                            //#region Background color\n                            let backgroundColor = \"\";\n                            let color = \"\";\n                            if (column.cellSettings != null)\n                            {\n                                if (column.cellSettings.backgroundColor != null)\n                                    backgroundColor = column.cellSettings.backgroundColor;\n\n                                if (column.cellSettings.color != null)\n                                    color = column.cellSettings.color;\n                            }\n\n                            if (options.rowColorProperty != null && item[options.rowColorProperty] != null && item[options.rowColorProperty] !== \"\")\n                                backgroundColor = item[options.rowColorProperty];\n\n                            excelCell.backgroundColor = backgroundColor;\n                            excelCell.color = color;\n                            //#endregion\n\n                            contentRow.cells.push(excelCell);\n                        }\n                        contentRows.push(contentRow);\n                    }\n                    //#endregion\n\n                    //#region Footer rows\n                    let footerRow = new GridExcelRow();\n                    footerRow.cells = [];\n                    for (let td of Array.from<HTMLElement>(puma(this._divTotals).find(\"td\")))\n                    {\n                        let field = puma(td).attr(\"field\");\n                        if (field == null)\n                            continue;\n\n                        let column = options.columns!.find(k => k.field == field);\n                        if (column == null || (column != null && column.exportable !== true))\n                        {\n                            if (column == null || (!exportHiddenColumns && column.hidden == true\n                                && (options.groupBy == null\n                                    || ((options.groupBy as GridGroupBySettings).fields != null && !((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field).includes(column.field))))\n                                || column.type == GridColumnTypeEnum.EditButton || column.type == GridColumnTypeEnum.Image\n                                || column.type == GridColumnTypeEnum.Button || column.type == GridColumnTypeEnum.Icon || column.exportable === false)\n                                continue;\n                        }\n\n                        let excelCell = new GridExcelCell();\n                        excelCell.field = column.field;\n                        excelCell.title = column.title;\n                        excelCell.text = String(Number(td.innerHTML.replace(\"€\", \"\").replace(\"%\", \"\").replace(\".\", \"\").replace(\",\", \".\")));\n                        excelCell.bold = column.bold;\n                        excelCell.type = column.type;\n                        excelCell.width = column.width;\n                        excelCell.decimalDigits = column.decimalDigits;\n                        excelCell.roundingSettings = (column.roundingSettings != null) ? column.roundingSettings : options.roundingSettings;\n                        excelCell.hidden = column.hidden;\n                        excelCell.locked = column.locked;\n\n                        //#region Aggregate mode\n                        if (column.aggregate === true)\n                        {\n                            switch (column.type)\n                            {\n                                case GridColumnTypeEnum.Number: column.aggregate = GridAggregateMode.Sum; break;\n                                case GridColumnTypeEnum.Currency: column.aggregate = GridAggregateMode.Sum; break;\n                                case GridColumnTypeEnum.Duration: column.aggregate = GridAggregateMode.Sum; break;\n                                case GridColumnTypeEnum.Percentage: column.aggregate = GridAggregateMode.Average; break;\n                                default: column.aggregate = GridAggregateMode.Sum;\n                            }\n                        }\n                        excelCell.aggregate = (column.aggregate == null || column.aggregate === false) ? GridAggregateMode.None : column.aggregate;\n                        //#endregion\n\n                        footerRow.cells.push(excelCell);\n                    }\n                    //#endregion\n\n                    //#region Generate Excel\n                    if (options.excel != null && options.excel.fileName != null) fileName = options.excel.fileName;\n\n                    let generateExcelRequest = new GenerateExcelRequest();\n                    generateExcelRequest.headerRow = headerRow;\n                    generateExcelRequest.contentRows = contentRows;\n                    generateExcelRequest.footerRow = footerRow;\n                    generateExcelRequest.excelFileName = fileName;\n                    generateExcelRequest.AuthKey = \"10(P9m+U3a@Mtt-Oeo\";\n                    generateExcelRequest.exportHiddenColumns = exportHiddenColumns;\n\n                    if (options.groupBy != null)\n                    {\n                        let groupByFields = (options.groupBy as GridGroupBySettings).fields;\n                        generateExcelRequest.groupBy = groupByFields as GridGroupByItem[];\n                    }\n\n                    if (download)\n                    {\n                        //#region Download Excel directly\n                        let jsonString = JSON.stringify(generateExcelRequest);\n\n                        //#region Multipart\n                        let formDataMultipart = null;\n                        formDataMultipart = new FormData();\n                        formDataMultipart.append(\"file\", new Blob([jsonString], { type: \"application/json\" }));\n                        //#endregion\n\n                        $.ajax(\n                            {\n                                type: \"POST\",\n                                beforeSend: (xhr: any) =>\n                                {\n                                    //#region Header parameters\n                                    xhr.setRequestHeader(\"Accept-Language\", \"it\");\n                                    xhr.setRequestHeader(\"AuthKey\", \"10(P9m+U3a@Mtt-Oeo\");\n                                    //#endregion\n                                },\n                                contentType: false,\n                                data: formDataMultipart,\n                                method: \"POST\",\n                                processData: false,\n                                dataType: \"JSON\",\n                                url: \"/api/UtilityWebApi/GenerateExcel\",\n                                success: (response: GenerateExcelResponse, textStatus: string, jqXHR: JQueryXHR) =>\n                                {\n                                    hideLoader(\"vrGridLoaderExcel\" + this._elementId);\n\n                                    //#region After excel export\n                                    if (options.onAfterExcelExport != null)\n                                    {\n                                        let event = new GridAfterExcelExportEvent();\n                                        event.sender = this;\n                                        event.headerRow = headerRow;\n                                        event.contentRows = contentRows;\n                                        event.footerRow = footerRow;\n                                        event.excelFileName = fileName;\n                                        event.exportHiddenColumns = exportHiddenColumns;\n\n                                        if (options.groupBy != null)\n                                        {\n                                            let groupByFields = (options.groupBy as GridGroupBySettings).fields;\n                                            event.groupBy = (groupByFields != null) ? (groupByFields as GridGroupByItem[]).map(k => k.field) : null;\n                                        }\n\n                                        options.onAfterExcelExport(event);\n\n                                        if (event.isDefaultPrevented())\n                                            return;\n                                    }\n                                    //#endregion\n\n                                    if (response.downloadUrl != null && response.downloadUrl.length > 0)\n                                        location.replace(response.downloadUrl);\n\n                                    if (!(response as any).Success)\n                                        notifyError((response as any).ErrorMessage);\n                                },\n                                error: (response: JQueryXHR, textStatus: string, errorThrown: string) =>\n                                {\n                                    hideLoader();\n                                    alert(\"Errore nell'esportazione Excel. Contattare l'assistenza. <br /><br />\" + response);\n                                }\n                            });\n                        //#endregion\n                    }\n                    else\n                        hideLoader(\"vrGridLoaderExcel\" + this._elementId);\n\n                    let excelExportPromise = new ExcelExportPromise();\n                    excelExportPromise.fileName = fileName;\n                    excelExportPromise.headerRow = headerRow;\n                    excelExportPromise.contentRows = contentRows;\n                    excelExportPromise.footerRow = footerRow;\n                    if (options.groupBy != null)\n                        excelExportPromise.groupByFields = (options.groupBy as GridGroupBySettings).fields as GridGroupByItem[];\n\n                    callback(excelExportPromise);\n                }\n                else\n                {\n                    if (options.excel != null)\n                    {\n                        if (options.excel.fileName == null) options.excel.fileName = fileName;\n                        this.doWebApiCall(options.excel, GridRequestTypeEnum.Excel);\n                    }\n                }\n                //#endregion\n            }, 200);\n        });\n        return promise;\n    }\n    //#endregion\n\n    //#region Footer\n    visibleFooter(state?: boolean)\n    {\n        if (state != null)\n        {\n            if (state) puma(this._divFooter).show();\n            else puma(this._divFooter).hide();\n        }\n        return puma(this._divFooter).is(\":visible\");\n    }\n\n    showFooter()\n    {\n        this.visibleFooter(true);\n    }\n\n    hideFooter()\n    {\n        this.visibleFooter(false);\n    }\n\n    footer()\n    {\n        return this._divFooter;\n    }\n    //#endregion\n\n    //#region Toolbar\n    visibleToolbar(state?: boolean)\n    {\n        if (state != null)\n        {\n            if (state) puma(this._divToolbar).show();\n            else puma(this._divToolbar).hide();\n        }\n        return puma(this._divToolbar).is(\":visible\");\n    }\n\n    showToolbar()\n    {\n        this.visibleToolbar(true);\n    }\n\n    hideToolbar()\n    {\n        this.visibleToolbar(false);\n    }\n\n    toolbar()\n    {\n        return this._divToolbar;\n    }\n\n    toolbarItem<T extends VrControl>(value: string)\n    {\n        return ControlManager.get<T>(\"grid-\" + value + \"_\" + this._elementId);\n    }\n\n    visibleToolbarItem(value: string, state?: boolean)\n    {\n        let toolbarItem = this.toolbarItem(value);\n        if (toolbarItem != null)\n        {\n            if (state != null)\n                toolbarItem.visible(state)\n\n            return toolbarItem.visible();\n        }\n        return false;\n    }\n\n    showToolbarItem<T extends VrControl>(value: string)\n    {\n        let toolbarItem = this.toolbarItem<T>(value);\n        if (toolbarItem != null)\n            toolbarItem.show();\n    }\n\n    hideToolbarItem<T extends VrControl>(value: string)\n    {\n        let toolbarItem = this.toolbarItem<T>(value);\n        if (toolbarItem != null)\n            toolbarItem.hide();\n    }\n\n    enabledToolbarItem(value: string, state?: boolean)\n    {\n        let toolbarItem = this.toolbarItem(value);\n        if (toolbarItem != null)\n        {\n            if (state != null)\n                toolbarItem.enabled(state)\n\n            return toolbarItem.enabled();\n        }\n        return false;\n    }\n\n    enableToolbarItem<T extends VrControl>(value: string)\n    {\n        let toolbarItem = this.toolbarItem<T>(value);\n        if (toolbarItem != null)\n            toolbarItem.enable();\n    }\n\n    disableToolbarItem<T extends VrControl>(value: string)\n    {\n        let toolbarItem = this.toolbarItem<T>(value);\n        if (toolbarItem != null)\n            toolbarItem.disable();\n    }\n\n    removeToolbarItem(value: string)\n    {\n        let toolbarItem = this.toolbarItem(value);\n        if (toolbarItem != null)\n            puma(toolbarItem.container()).remove();\n    }\n\n    addToolbarItems(toolbarItems: GridToolbarItem[])\n    {\n        for (let toolbarItem of toolbarItems)\n            this.addToolbarItem(toolbarItem);\n    }\n\n    addToolbarItem(toolbarItem: GridToolbarItem)\n    {\n        if (toolbarItem.visible == null) toolbarItem.visible = true;\n        if (toolbarItem.type == null) toolbarItem.type = GridToolbarItemType.Custom;\n\n        //#region Toolbar control settings\n        let text = \"\";\n        let iconClass: IconClass | undefined = undefined;\n        let buttonClass = \"\";\n        let enabled = toolbarItem.enable;\n        let vrButton = false;\n        if (toolbarItem.css == null) toolbarItem.css = \"\";\n        if (toolbarItem.cssContainer == null) toolbarItem.cssContainer = \"\";\n        let toolbarItemValue = (toolbarItem.value == null) ? ((toolbarItem.text != null) ? toolbarItem.text.replace(/[^a-z0-9\\s]/gi, \"\").replace(/[_\\s]/g, \"\") : \"noValue\") : toolbarItem.value;\n\n        //#region Toolbar item type\n        switch (toolbarItem.type)\n        {\n            case GridToolbarItemType.Add:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"Aggiungi\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : IconClassicLight.Plus;\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-add\";\n                    vrButton = true;\n                }\n                break;\n            case GridToolbarItemType.Custom:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : undefined;\n                    buttonClass = \"grid-\" + toolbarItemValue;\n                    vrButton = true;\n                }\n                break;\n            case GridToolbarItemType.SplitButton:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : undefined;\n                    vrButton = false;\n                }\n                break;\n            case GridToolbarItemType.Switch:\n            case GridToolbarItemType.ButtonGroup:\n            case GridToolbarItemType.CheckBox:\n            case GridToolbarItemType.ComboBox:\n            case GridToolbarItemType.DatePicker:\n            case GridToolbarItemType.Label:\n            case GridToolbarItemType.TextBox:\n                {\n                    vrButton = false;\n                }\n                break;\n            case GridToolbarItemType.Delete:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"Elimina\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : IconClassicRegular.Xmark;\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-delete\";\n                    vrButton = true;\n                }\n                break;\n            case GridToolbarItemType.Excel:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"Excel\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : IconClassicLight.FileExcel;\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-excel\";\n                    vrButton = true;\n                    toolbarItem.backgroundColor = \"#008a00\";\n                    toolbarItem.textColor = \"#FFF\";\n                }\n                break;\n            case GridToolbarItemType.ExcelWithHiddenColumns:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"Excel\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : IconClassicLight.FileExcel;\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-excelHiddenColumns\";\n                    vrButton = true;\n                    toolbarItem.backgroundColor = \"#008a00\";\n                    toolbarItem.textColor = \"#FFF\";\n                }\n                break;\n            case GridToolbarItemType.Separator:\n                {\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-separator\";\n                    enabled = false;\n                    vrButton = true;\n                }\n                break;\n            case GridToolbarItemType.Rebind:\n                {\n                    text = (toolbarItem.text != null) ? toolbarItem.text : \"Aggiorna\";\n                    iconClass = (toolbarItem.icon != null) ? toolbarItem.icon : IconClassicLight.Refresh;\n                    buttonClass = (toolbarItem.value != null) ? \"grid-\" + toolbarItem.value : \"grid-rebind\";\n                    vrButton = true;\n                }\n                break;\n        }\n        //#endregion\n\n        //#endregion\n\n        if (vrButton)\n        {\n            //#region Create button\n            createButton(\n                {\n                    icon: iconClass,\n                    imageUrl: toolbarItem.imageUrl,\n                    enable: enabled,\n                    text: text,\n                    colorSettings: { background: toolbarItem.backgroundColor, textColor: toolbarItem.textColor },\n                    visible: toolbarItem.visible,\n                    cssContainer: toolbarItem.cssContainer,\n                    css: toolbarItem.css,\n                    mode: (toolbarItem.primary === true) ? ButtonModeEnum.Primary : undefined,\n                    classContainer: \"grid-toolbarItemsContainer \" + ((toolbarItem.classContainer != null) ? toolbarItem.classContainer : \"\"),\n                    class: ((toolbarItem.type == GridToolbarItemType.Separator) ? \"grid-separator\" : \"\") + \" grid-toolbarItems \" + buttonClass,\n                    badgeSettings: toolbarItem.badge,\n                    onClick: (e) =>\n                    {\n                        //#region Delete\n                        if (toolbarItem.type == GridToolbarItemType.Delete)\n                        {\n                            let checkedValues = this.getCheckedValues();\n                            if (checkedValues.length == 0)\n                            {\n                                notifyWarning(\"Selezionare almeno una riga per proseguire\");\n                                return;\n                            }\n                            else\n                            {\n                                if (toolbarItem.confirmationMessage == null)\n                                {\n                                    if (checkedValues.length == 1) toolbarItem.confirmationMessage = \"Proseguendo, verrà eliminato l'elemento selezionato. Continuare?\";\n                                    else if (checkedValues.length > 1) toolbarItem.confirmationMessage = \"Proseguendo, verranno eliminati gli elementi selezionati. Continuare?\";\n                                }\n                            }\n                        }\n                        //#endregion\n\n                        //#region Event\n                        let toolbarClickEvent = new GridToolbarClickEvent();\n                        toolbarClickEvent.sender = e.sender;\n                        toolbarClickEvent.type = toolbarItem.type!;\n                        //#endregion\n\n                        //#region Confirmation message\n                        if (toolbarItem.confirmationMessage != null && toolbarItem.confirmationMessage.length > 0)\n                        {\n                            confirm(toolbarItem.confirmationMessage).then(() =>\n                            {\n                                this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                            });\n                        }\n                        else\n                            this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                        //#endregion\n                    }\n                }, this._divToolbar, null, buttonClass + \"_\" + this._elementId);\n            //#endregion\n        }\n        else\n        {\n            //#region SplitButton\n            if (toolbarItem.type == GridToolbarItemType.SplitButton)\n            {\n                let value = (toolbarItem.value != null) ? toolbarItem.value : \"splitButton\";\n                if (toolbarItem.value == null && toolbarItem.text != null)\n                    value = toolbarItem.text.replace(/[^a-z0-9\\s]/gi, \"\").replace(/[_\\s]/g, \"\") + \"splitButton\";\n\n                if (toolbarItem.splitButtonOptions == null) toolbarItem.splitButtonOptions = new SplitButtonOptions();\n                if (toolbarItem.splitButtonItems != null) toolbarItem.splitButtonOptions.items = toolbarItem.splitButtonItems;\n                if (toolbarItem.splitButtonOptions.separator == null) toolbarItem.splitButtonOptions.separator = false;\n\n                let itemClass = \"grid-\" + value;\n                createSplitButton(\n                    {\n                        text: text,\n                        icon: iconClass,\n                        enable: enabled,\n                        imageUrl: toolbarItem.imageUrl,\n                        items: toolbarItem.splitButtonOptions.items,\n                        visible: toolbarItem.visible,\n                        separator: toolbarItem.splitButtonOptions.separator,\n                        colorSettings: toolbarItem.splitButtonOptions.colorSettings,\n                        popupSettings: toolbarItem.splitButtonOptions.popupSettings,\n                        tooltip: toolbarItem.splitButtonOptions.tooltip,\n                        hoverMode: toolbarItem.splitButtonOptions.hoverMode,\n                        modal: toolbarItem.splitButtonOptions.modal,\n                        showDefault: toolbarItem.splitButtonOptions.showDefault,\n                        cssContainer: toolbarItem.cssContainer + \" vertical-align: top;\",\n                        css: toolbarItem.css,\n                        classContainer: \"grid-toolbarItemsContainer \" + ((toolbarItem.classContainer != null) ? toolbarItem.classContainer : \"\"),\n                        class: \"grid-toolbarItems grid-splitButton \" + itemClass,\n                        onSelect: (e) =>\n                        {\n                            if (toolbarItem.splitButtonOptions!.onSelect != null)\n                                toolbarItem.splitButtonOptions?.onSelect(e);\n                        },\n                        onClick: (toolbarItem.onClick == null) ? undefined : (e) =>\n                        {\n                            //#region Event\n                            let toolbarClickEvent = new GridToolbarClickEvent();\n                            toolbarClickEvent.sender = e.sender;\n                            toolbarClickEvent.type = toolbarItem.type!;\n                            //#endregion\n\n                            //#region Confirmation message\n                            if (toolbarItem.confirmationMessage != null && toolbarItem.confirmationMessage.length > 0)\n                            {\n                                confirm(toolbarItem.confirmationMessage).then(() =>\n                                {\n                                    this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                                });\n                            }\n                            else\n                                this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                            //#endregion\n                        }\n                    }, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region ButtonGroup\n            if (toolbarItem.type == GridToolbarItemType.ButtonGroup)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"buttonGroup\");\n                createButtonGroup(\n                    {\n                        enable: enabled,\n                        selectionMode: SelectionModeEnum.Single,\n                        items: toolbarItem.buttonGroupItems!,\n                        visible: toolbarItem.visible,\n                        cssContainer: \"top: -1px; \" + toolbarItem.cssContainer,\n                        css: toolbarItem.css,\n                        classContainer: \"grid-toolbarItemsContainer \" + toolbarItem.classContainer,\n                        class: \"grid-toolbarItems grid-buttonGroup \" + itemClass,\n                        width: \"auto\",\n                        onSelect: (e) => \n                        {\n                            //#region Event\n                            let toolbarClickEvent = new GridToolbarClickEvent();\n                            toolbarClickEvent.sender = e.sender;\n                            toolbarClickEvent.type = toolbarItem.type!;\n                            //#endregion\n\n                            //#region Confirmation message\n                            if (toolbarItem.confirmationMessage != null && toolbarItem.confirmationMessage.length > 0)\n                            {\n                                confirm(toolbarItem.confirmationMessage).then(() =>\n                                {\n                                    this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                                });\n                            }\n                            else\n                                this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                            //#endregion\n                        }\n                    }, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region CheckBox\n            if (toolbarItem.type == GridToolbarItemType.CheckBox)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"checkbox\");\n                createCheckBox(\n                    {\n                        enable: enabled,\n                        text: toolbarItem.text,\n                        visible: toolbarItem.visible,\n                        cssContainer: \"top: 3px; \" + toolbarItem.cssContainer,\n                        css: toolbarItem.css,\n                        classContainer: \"grid-toolbarItemsContainer \" + toolbarItem.classContainer,\n                        class: \"grid-toolbarItems grid-checkBox \" + itemClass,\n                        onCheck: (e) => \n                        {\n                            //#region Event\n                            let toolbarClickEvent = new GridToolbarClickEvent();\n                            toolbarClickEvent.sender = e.sender;\n                            toolbarClickEvent.type = toolbarItem.type!;\n                            //#endregion\n\n                            //#region Confirmation message\n                            if (toolbarItem.confirmationMessage != null && toolbarItem.confirmationMessage.length > 0)\n                            {\n                                confirm(toolbarItem.confirmationMessage).then(() =>\n                                {\n                                    this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                                });\n                            }\n                            else\n                                this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                            //#endregion\n                        }\n                    }, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region Label\n            if (toolbarItem.type == GridToolbarItemType.Label)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"label\");\n                createLabel(\n                    {\n                        enable: enabled,\n                        text: toolbarItem.text,\n                        visible: toolbarItem.visible,\n                        cssContainer: toolbarItem.cssContainer,\n                        css: toolbarItem.css,\n                        classContainer: \"grid-toolbarItemsContainer \" + toolbarItem.classContainer,\n                        class: \"grid-toolbarItems grid-label \" + itemClass,\n                        colorSettings:\n                        {\n                            background: toolbarItem.backgroundColor,\n                            textColor: toolbarItem.textColor\n                        },\n                        onClick: (e) => \n                        {\n                            //#region Event\n                            let toolbarClickEvent = new GridToolbarClickEvent();\n                            toolbarClickEvent.sender = e.sender;\n                            toolbarClickEvent.type = toolbarItem.type!;\n                            //#endregion\n\n                            //#region Confirmation message\n                            if (toolbarItem.confirmationMessage != null && toolbarItem.confirmationMessage.length > 0)\n                            {\n                                confirm(toolbarItem.confirmationMessage).then(() =>\n                                {\n                                    this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                                });\n                            }\n                            else\n                                this.toolbarCustomLogic(toolbarItem, toolbarClickEvent);\n                            //#endregion\n                        }\n                    }, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region ComboBox\n            if (toolbarItem.type == GridToolbarItemType.ComboBox)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"comboBox\");\n\n                if (toolbarItem.comboBoxOptions == null) toolbarItem.comboBoxOptions = new ComboBoxOptions();\n                toolbarItem.comboBoxOptions.classContainer = \"grid-toolbarItemsContainer \" + toolbarItem.comboBoxOptions.classContainer;\n                toolbarItem.comboBoxOptions.class = \"grid-toolbarItems grid-comboBox \" + itemClass + \" \" + toolbarItem.comboBoxOptions.class;\n                if (toolbarItem.comboBoxOptions.visible == null) toolbarItem.comboBoxOptions.visible = toolbarItem.visible;\n                if (toolbarItem.comboBoxOptions.css == null) toolbarItem.comboBoxOptions.css = toolbarItem.css;\n                if (toolbarItem.comboBoxOptions.cssContainer == null) toolbarItem.comboBoxOptions.cssContainer = toolbarItem.cssContainer + \";\";\n                toolbarItem.comboBoxOptions.cssContainer += \"vertical-align: top;\";\n                if (toolbarItem.comboBoxOptions.enable == null) toolbarItem.comboBoxOptions.enable = enabled;\n\n                createComboBox(toolbarItem.comboBoxOptions, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region DatePicker\n            if (toolbarItem.type == GridToolbarItemType.DatePicker)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"datePicker\");\n\n                if (toolbarItem.datePickerOptions == null) toolbarItem.datePickerOptions = new DatePickerOptions();\n                toolbarItem.datePickerOptions.classContainer = \"grid-toolbarItemsContainer \" + toolbarItem.datePickerOptions.classContainer;\n                toolbarItem.datePickerOptions.class = \"grid-toolbarItems grid-datePicker \" + itemClass + \" \" + toolbarItem.datePickerOptions.class;\n                if (toolbarItem.datePickerOptions.visible == null) toolbarItem.datePickerOptions.visible = toolbarItem.visible;\n                if (toolbarItem.datePickerOptions.css == null) toolbarItem.datePickerOptions.css = toolbarItem.css;\n                if (toolbarItem.datePickerOptions.cssContainer == null) toolbarItem.datePickerOptions.cssContainer = toolbarItem.cssContainer;\n                toolbarItem.datePickerOptions.cssContainer += \"top: -1px; \" + toolbarItem.datePickerOptions.cssContainer;\n                if (toolbarItem.datePickerOptions.enable == null) toolbarItem.datePickerOptions.enable = enabled;\n\n                createDatePicker(toolbarItem.datePickerOptions, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region TextBox\n            if (toolbarItem.type == GridToolbarItemType.TextBox)\n            {\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"textBox\");\n\n                if (toolbarItem.textBoxOptions == null) toolbarItem.textBoxOptions = new TextBoxOptions();\n                toolbarItem.textBoxOptions.classContainer = \"grid-toolbarItemsContainer \" + toolbarItem.textBoxOptions.classContainer;\n                toolbarItem.textBoxOptions.class = \"grid-toolbarItems grid-textBox \" + itemClass + \" \" + toolbarItem.textBoxOptions.class;\n                if (toolbarItem.textBoxOptions.visible == null) toolbarItem.textBoxOptions.visible = toolbarItem.visible;\n                if (toolbarItem.textBoxOptions.css == null) toolbarItem.textBoxOptions.css = toolbarItem.css;\n                if (toolbarItem.textBoxOptions.cssContainer == null) toolbarItem.textBoxOptions.cssContainer = toolbarItem.cssContainer;\n                toolbarItem.textBoxOptions.cssContainer += \"top: -1px; \" + toolbarItem.textBoxOptions.cssContainer;\n                if (toolbarItem.textBoxOptions.enable == null) toolbarItem.textBoxOptions.enable = enabled;\n\n                createTextBox(toolbarItem.textBoxOptions, this._divToolbar, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n\n            //#region Switch\n            else if (toolbarItem.type == GridToolbarItemType.Switch)\n            {\n                if (toolbarItem.switchSettings == null)\n                {\n                    toolbarItem.switchSettings = new GridToolbarSwitchSettings();\n                    toolbarItem.switchSettings.labelOff = \"\";\n                    toolbarItem.switchSettings.labelOn = \"\";\n                }\n\n                if (toolbarItem.switchSettings.checked == null) toolbarItem.switchSettings.checked = false;\n                let itemClass = \"grid-\" + ((toolbarItem.value != null) ? toolbarItem.value : \"switch\");\n                puma(this._divToolbar).vrAppendPuma(\"<div id='\" + itemClass + \"_\" + this._elementId + \"' class='grid-toolbarItems-switch'></div>\");\n                createSwitch(\n                    {\n                        labelOff: toolbarItem.switchSettings!.labelOff,\n                        labelOn: toolbarItem.switchSettings!.labelOn,\n                        checked: toolbarItem.switchSettings.checked,\n                        cssContainer: \"top: -2px; \" + toolbarItem.cssContainer,\n                        css: toolbarItem.css,\n                        classContainer: \"grid-toolbarItemsContainer \" + toolbarItem.classContainer,\n                        visible: toolbarItem.visible,\n                        enable: enabled,\n                        onChange: (e) =>\n                        {\n                            if (toolbarItem.switchSettings!.onCheck != null)\n                            {\n                                let tableSwitchEvent = new GridToolbarSwitchEvent();\n                                tableSwitchEvent.checked = e.checked;\n                                toolbarItem.switchSettings!.onCheck(tableSwitchEvent);\n                            }\n                        }\n                    }, null, null, itemClass + \"_\" + this._elementId);\n            }\n            //#endregion\n        }\n    }\n    //#endregion\n\n    //#endregion\n\n    //#region Auto Window\n    private createAutoWindow()\n    {\n        if (this._wndAutoWindow != null)\n            return;\n\n        let options = this.getOptions();\n\n        //#region Default options\n        if (options.autoWindowSettings == null)\n            options.autoWindowSettings = new GridAutoWindowSettings();\n\n        if (options.autoWindowSettings.options == null)\n            options.autoWindowSettings.options = new GridAutoWindowOption();\n\n        if (options.autoWindowSettings.options.width == null) options.autoWindowSettings.options.width = 400;\n        if (options.autoWindowSettings.options.titleNew == null) options.autoWindowSettings.options.titleNew = \"Nuovo\";\n        if (options.autoWindowSettings.options.titleEdit == null) options.autoWindowSettings.options.titleEdit = \"Modifica\";\n        //#endregion\n\n        //#region Create window\n        this._wndAutoWindow = createWindow(\n            {\n                addToControlList: false,\n                classContainer: this.element().id + \"_wndUtility\",\n                width: options.autoWindowSettings.options.width,\n                height: options.autoWindowSettings.options.height,\n                title: options.autoWindowSettings.options.titleNew,\n                onBeforeClose: (e) =>\n                {\n                    //#region OnBeforeClose event\n                    if (options.autoWindowSettings!.onBeforeClose != null)\n                    {\n                        let event = new AutowindowBeforeCloseEvent();\n                        event.sender = this;\n                        event.window = this._wndAutoWindow;\n                        event.dataItem = this._actualEditedItem;\n                        event.columns = options.columns;\n                        options.autoWindowSettings!.onBeforeClose(event);\n\n                        if (event.isDefaultPrevented())\n                            return;\n                    }\n                    //#endregion\n                },\n                onClose: (e) =>\n                {\n                    puma(this._wndAutoWindow.container()).remove();\n                    (this._wndAutoWindow as any) = null;\n\n                    //#region OnAfterClose event\n                    if (options.autoWindowSettings!.onAfterClose != null)\n                    {\n                        let event = new AutowindowAfterCloseEvent();\n                        event.sender = this;\n                        event.window = this._wndAutoWindow;\n                        event.dataItem = this._actualEditedItem;\n                        event.columns = options.columns;\n                        options.autoWindowSettings!.onAfterClose(event);\n\n                        if (event.isDefaultPrevented())\n                            return;\n                    }\n                    //#endregion\n\n                    this._actualEditedItem = null;\n                },\n                footer:\n                    [\n                        {\n                            type: WindowFooterItemTypeEnum.Close\n                        },\n                        {\n                            type: WindowFooterItemTypeEnum.Ok, onClick: (e) =>\n                            {\n                                //#region Confirmation message\n                                if (options.autoWindowSettings!.options!.confirmationMessage != null\n                                    && options.autoWindowSettings!.options!.confirmationMessage.length > 0)\n                                {\n                                    confirm(options.autoWindowSettings!.options!.confirmationMessage).then(() =>\n                                    {\n                                        this.saveAutoWindow();\n                                    });\n                                }\n                                else\n                                    this.saveAutoWindow();\n                                //#endregion\t\t\t\t\t\t\t\t\n                            }\n                        }\n                    ]\n            });\n        puma(this._wndAutoWindow.element()).addClass(\"grid_autoWindow\");\n        //#endregion\n\n        this.createControlsAutoWindow(options);\n    }\n\n    private createControlsAutoWindow(options: GridOptions)\n    {\n        let columnsOrdered = [];\n        let autoWindowId = this._wndAutoWindow.element().id;\n\n        //#region Checkboxes after all\n        for (let column of options.columns!.slice(1).reverse())\n        {\n            if (column.hidden)\n                continue;\n\n            if (column.type == GridColumnTypeEnum.Checkbox || column.type == GridColumnTypeEnum.Boolean)\n                columnsOrdered.unshift(column);\n            else\n                columnsOrdered.push(column);\n        }\n        //#endregion\n\n        for (let column of columnsOrdered.reverse())\n        {\n            let label = (column.title == null) ? column.field : column.title;\n            let tooltip = (column.cellSettings != null && column.cellSettings.tooltip != null) ? column.cellSettings.tooltip : undefined;\n            if (tooltip === true)\n                tooltip = label;\n            else if (tooltip === false)\n                tooltip = undefined;\n            else if (typeof (tooltip) == \"function\")\n                tooltip = undefined;\n\n            //#region Type\n            switch (column.type)\n            {\n                //#region CheckBox\n                case GridColumnTypeEnum.Checkbox:\n                case GridColumnTypeEnum.Boolean:\n                    {\n                        let checkBox = createCheckBox(\n                            {\n                                label: label,\n                                tooltip: tooltip\n                            }, autoWindowId, null, this._elementId + \"_checkBox_\" + column.field);\n\n                        puma(checkBox.element()).parent().css(\"margin-top\", \"10px\");\n                        puma(checkBox.element()).parent().css(\"display\", \"inline-block\");\n                        puma(checkBox.element()).parent().css(\"margin-right\", \"5px\");\n                    }\n                    break;\n                //#endregion\n\n                //#region String\n                case GridColumnTypeEnum.String:\n                    {\n                        let textBox = createTextBox(\n                            {\n                                label: label,\n                                width: \"100%\",\n                                tooltip: tooltip\n                            }, autoWindowId, null, this._elementId + \"_textBox_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region Password\n                case GridColumnTypeEnum.PasswordViewable:\n                    {\n                        let txtPasswordViewable = createTextBox({\n                            label: label,\n                            width: \"100%\",\n                            mode: TextModeEnum.PasswordViewable,\n                            tooltip: tooltip\n                        }, autoWindowId, null, this._elementId + \"_textBox_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region Date, DateTime, Time\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        let datePicker = createDatePicker(\n                            {\n                                label: label,\n                                width: \"100%\",\n                                tooltip: tooltip\n                            }, autoWindowId, null, this._elementId + \"_datePicker_\" + column.field);\n                    }\n                    break;\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.LongDateTime:\n                    {\n                        let dateTimePicker = createDatePicker(\n                            {\n                                mode: DateModeEnum.DateTime,\n                                label: label,\n                                width: \"100%\",\n                                tooltip: tooltip\n                            }, autoWindowId, null, this._elementId + \"_dateTimePicker_\" + column.field);\n                    }\n                    break;\n                case GridColumnTypeEnum.Time:\n                    {\n                        let timePicker = createDatePicker(\n                            {\n                                mode: DateModeEnum.Time,\n                                label: label,\n                                width: \"100%\",\n                                tooltip: tooltip\n                            }, autoWindowId, null, this._elementId + \"_timePicker_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region ComboBox, DropDownList, DropDownTree\n                case GridColumnTypeEnum.DropDownList:\n                    {\n                        if (column.dataItems == null)\n                            throw new Error(\"Property 'dataItems' of column '\" + column.field + \"' is null; please, consider to fill it with an array of dropDownListItem[]\");\n\n                        let dropDownList = createComboBox(\n                            {\n                                mode: ComboBoxTypeEnum.DropDown,\n                                label: label,\n                                width: \"100%\",\n                                items: column.dataItems,\n                                nullable: column.ddlNullable,\n                                clearButton: column.ddlNullable,\n                                tooltip: tooltip,\n                                filter: column.filterable\n                            }, autoWindowId, null, this._elementId + \"_dropDownList_\" + column.field);\n                    }\n                    break;\n                case GridColumnTypeEnum.DropDownTree:\n                case GridColumnTypeEnum.DropDownTreeCheckboxes:\n                    {\n                        if (column.dataItems == null)\n                            throw new Error(\"Property 'dataItems' of column '\" + column.field + \"' is null; please, consider to fill it with an array of dropDownTreeItem[]\");\n\n                        for (let item of column.dataItems!)\n                        {\n                            if (item.expanded == null)\n                                item.expanded = true;\n                        }\n\n                        let dropDownTree = createComboBox(\n                            {\n                                label: label,\n                                width: \"100%\",\n                                items: column.dataItems,\n                                checkboxes: (column.type == GridColumnTypeEnum.DropDownTreeCheckboxes),\n                                clearButton: column.ddlNullable,\n                                tooltip: tooltip,\n                                filter: column.filterable\n                            }, autoWindowId, null, this._elementId + \"_dropDownTree_\" + column.field);\n                    }\n                    break;\n                case GridColumnTypeEnum.ComboBox:\n                    {\n                        if (column.dataItems == null)\n                            throw new Error(\"Property 'dataItems' of column '\" + column.field + \"' is null; please, consider to fill it with an array of comboBoxItem[]\");\n\n                        let comboBox = createComboBox(\n                            {\n                                label: label,\n                                width: \"100%\",\n                                items: column.dataItems,\n                                tooltip: tooltip,\n                                clearButton: column.ddlNullable,\n                                filter: column.filterable\n                            }, autoWindowId, null, this._elementId + \"_comboBox_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region Number, Currency, Percentage, Duration\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Percentage:\n                case GridColumnTypeEnum.Duration:\n                    {\n                        let type = TextModeEnum.Numeric;\n                        if (column.type == GridColumnTypeEnum.Currency) type = TextModeEnum.Currency;\n                        else if (column.type == GridColumnTypeEnum.Percentage) type = TextModeEnum.Percentage;\n\n                        let numericTextBox = createTextBox(\n                            {\n                                label: label,\n                                width: \"100%\",\n                                mode: type,\n                                tooltip: tooltip,\n                                roundingSettings: (column.roundingSettings != null) ? column.roundingSettings : options.roundingSettings\n                            }, autoWindowId, null, this._elementId + \"_numericTextBox_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region Color\n                case GridColumnTypeEnum.Color:\n                    {\n                        let colorPicker = createColorPicker({\n                            label: label,\n                            width: \"100%\",\n                            cssContainer: \"align-items: flex-start;\",\n                            addToControlList: true\n                        }, autoWindowId, null, this._elementId + \"_colorPicker_\" + column.field);\n                    }\n                    break;\n                //#endregion\n\n                //#region Color\n                case GridColumnTypeEnum.Icon:\n                    {\n                        let iconItems: ComboBoxItem[] = [];\n                        for (let value of Object.values(IconClassicLight))\n                            iconItems.push({ text: value, value: value });\n\n                        let comboIcons = createComboBox({\n                            label: label,\n                            width: \"100%\",\n                            cssContainer: \"margin-right: 5px;\",\n                            items: iconItems,\n                            tooltip: tooltip,\n                            clearButton: true,\n                            placeholder: \"Scrivi per cercare un'icona...\",\n                            template: (e) => { return \"<i class='\" + e.dataItem.value + \"'></i>\" },\n                            onAfterOpen: (e) => comboIcons.text(\"\"),\n                            onAfterChange: (e) => \n                            {\n                                comboIcons.text(\"\");\n                                if (e.value == null) comboIcons.icon(IconClassicLight.Pumo)\n                                else comboIcons.icon(e.value);\n                            },\n                            icon: IconClassicLight.Pumo\n                        }, autoWindowId, null, this._elementId + \"_comboIcons_\" + column.field);\n                    }\n                    break;\n                //#endregion\n            }\n            //#endregion\n        }\n    }\n\n    openAutoWindow(dataItem?: any)\n    {\n        let options = this.getOptions();\n        if (options.autoWindowSettings != null || !options.hideEditButton)\n            this.createAutoWindow();\n\n        if (this._wndAutoWindow == null)\n            return;\n\n        //#region OnBeforeOpen event\n        if (options.autoWindowSettings!.onBeforeOpen != null)\n        {\n            let event = new AutowindowBeforeOpenEvent();\n            event.sender = this;\n            event.window = this._wndAutoWindow;\n            event.dataItem = dataItem;\n            event.columns = options.columns;\n            options.autoWindowSettings!.onBeforeOpen(event);\n\n            if (event.isDefaultPrevented())\n                return;\n        }\n        //#endregion\n\n        //#region Main options\n        let title = (dataItem != null) ? options.autoWindowSettings!.options!.titleEdit : options.autoWindowSettings!.options!.titleNew;\n        this._wndAutoWindow.title(title);\n        this._wndAutoWindow.open();\n\n        if (options.autoWindowSettings!.options!.height == null)\n        {\n            puma(this._wndAutoWindow.element()).css(\"height\", \"auto\");\n            puma(this._wndAutoWindow.element()).parent().css(\"height\", \"auto\");\n            this._wndAutoWindow.center();\n            puma(this._wndAutoWindow.element()).css(\"overflow-y\", \"auto\");\n        }\n        //#endregion\n\n        //#region OnAfterOpen event\n        if (options.autoWindowSettings!.onAfterOpen != null)\n        {\n            let event = new AutowindowAfterOpenEvent();\n            event.sender = this;\n            event.window = this._wndAutoWindow;\n            event.dataItem = dataItem;\n            event.columns = options.columns;\n            options.autoWindowSettings!.onAfterOpen(event);\n\n            if (event.isDefaultPrevented())\n                return;\n        }\n        //#endregion\n\n        let index = 0;\n        this._actualEditedItem = dataItem;\n        for (let column of options.columns!.slice(1))\n        {\n            if (column.hidden && !column.editable)\n                continue;\n\n            let columnValue = (dataItem != null) ? dataItem[column.field] : null;\n\n            //#region Type\n            switch (column.type)\n            {\n                //#region CheckBox\n                case GridColumnTypeEnum.Checkbox:\n                case GridColumnTypeEnum.Boolean:\n                    {\n                        let checkBox = ControlManager.get<CheckBox>(this._elementId + \"_checkBox_\" + column.field);\n                        checkBox.clear();\n\n                        if (columnValue != null)\n                            checkBox.checked(columnValue);\n                        else if (column.defaultValue != null)\n                            checkBox.checked(column.defaultValue);\n                        else if (column.field == \"Active\" || column.field == \"IsActive\")\n                            checkBox.checked(true);\n\n                        if (index == 0)\n                            checkBox.focus();\n\n                        if (column.editable == false)\n                            checkBox.enabled(false);\n                        else\n                            checkBox.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region String\n                case GridColumnTypeEnum.String:\n                    {\n                        let textBox = ControlManager.get<TextBox>(this._elementId + \"_textBox_\" + column.field);\n                        textBox.clear();\n\n                        if (columnValue != null)\n                            textBox.value(columnValue);\n                        else if (column.defaultValue != null)\n                            textBox.value(column.defaultValue);\n\n                        if (index == 0)\n                            textBox.focus();\n\n                        if (column.editable == false)\n                            textBox.enabled(false);\n                        else\n                            textBox.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region Password\n                case GridColumnTypeEnum.PasswordViewable:\n                    {\n                        let textBox = ControlManager.get<TextBox>(this._elementId + \"_textBox_\" + column.field);\n                        textBox.clear();\n\n                        if (columnValue != null)\n                            textBox.value(columnValue);\n                        else if (column.defaultValue != null)\n                            textBox.value(column.defaultValue);\n\n                        if (index == 0)\n                            textBox.focus();\n\n                        if (column.editable == false)\n                            textBox.enabled(false);\n                        else\n                            textBox.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region Date, DateTime, Time\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        let datePicker = ControlManager.get<DatePicker>(this._elementId + \"_datePicker_\" + column.field);\n                        datePicker.clear();\n\n                        if (columnValue != null)\n                            datePicker.value(new Date(columnValue));\n                        else if (column.defaultValue != null)\n                            datePicker.value(new Date(column.defaultValue));\n\n                        if (index == 0)\n                            datePicker.focus();\n\n                        if (column.editable == false)\n                            datePicker.enabled(false);\n                        else\n                            datePicker.enabled(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.LongDateTime:\n                    {\n                        let dateTimePicker = ControlManager.get<DatePicker>(this._elementId + \"_dateTimePicker_\" + column.field);\n                        dateTimePicker.clear();\n\n                        if (columnValue != null)\n                            dateTimePicker.value(new Date(columnValue));\n                        else if (column.defaultValue != null)\n                            dateTimePicker.value(new Date(column.defaultValue));\n\n                        if (index == 0)\n                            dateTimePicker.focus();\n\n                        if (column.editable == false)\n                            dateTimePicker.enabled(false);\n                        else\n                            dateTimePicker.enabled(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.Time:\n                    {\n                        let timePicker = ControlManager.get<DatePicker>(this._elementId + \"_timePicker_\" + column.field);\n                        timePicker.clear();\n\n                        if (columnValue != null)\n                            timePicker.value(columnValue);\n                        else if (column.defaultValue != null)\n                            timePicker.value(new Date(column.defaultValue));\n\n                        if (index == 0)\n                            timePicker.focus();\n\n                        if (column.editable == false)\n                            timePicker.enabled(false);\n                        else\n                            timePicker.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region ComboBox, DropDownList, DropDownTree\n                case GridColumnTypeEnum.DropDownList:\n                    {\n                        let dropDownList = ControlManager.get<ComboBox>(this._elementId + \"_dropDownList_\" + column.field);\n                        dropDownList.clearItems();\n                        dropDownList.items(column.dataItems);\n\n                        if (columnValue != null)\n                            dropDownList.value(columnValue);\n                        else if (column.defaultValue != null)\n                            dropDownList.value(column.defaultValue);\n\n                        if (column.editable == false)\n                            dropDownList.enabled(false);\n                        else\n                            dropDownList.enabled(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.DropDownTree:\n                case GridColumnTypeEnum.DropDownTreeCheckboxes:\n                    {\n                        let dropDownTree = ControlManager.get<ComboBox>(this._elementId + \"_dropDownTree_\" + column.field);\n                        dropDownTree.clearItems();\n                        dropDownTree.items(column.dataItems);\n\n                        if (columnValue != null)\n                        {\n                            let value = this._actualEditedItem[column.field];\n                            if (typeof (value) === \"string\")\n                                value = value.split(\",\");\n                            else if (!Array.isArray(value))\n                                value = [value];\n\n                            dropDownTree.value(value);\n                        }\n                        else if (column.defaultValue != null)\n                        {\n                            let value = column.defaultValue;\n                            if (typeof (value) === \"string\")\n                                value = value.split(\",\");\n                            else if (!Array.isArray(value))\n                                value = [value];\n\n                            dropDownTree.value((typeof (value) === \"string\") ? value.split(\",\") : [value]);\n                        }\n\n                        if (column.editable == false)\n                            dropDownTree.enabled(false);\n                        else\n                            dropDownTree.enabled(true);\n                    }\n                    break;\n                case GridColumnTypeEnum.ComboBox:\n                    {\n                        let comboBox = ControlManager.get<ComboBox>(this._elementId + \"_comboBox_\" + column.field);\n                        comboBox.clearItems();\n                        comboBox.items(column.dataItems);\n\n                        if (columnValue != null)\n                            comboBox.value(columnValue);\n                        else if (column.defaultValue != null)\n                            comboBox.value(column.defaultValue);\n\n                        if (column.editable == false)\n                            comboBox.enabled(false);\n                        else\n                            comboBox.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region Number, Currency, Percentage, Duration\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Percentage:\n                case GridColumnTypeEnum.Duration:\n                    {\n                        let numericTextBox = ControlManager.get<TextBox>(this._elementId + \"_numericTextBox_\" + column.field);\n\n                        numericTextBox.clear();\n                        if (columnValue != null)\n                            numericTextBox.value(columnValue);\n                        else if (column.defaultValue != null)\n                            numericTextBox.value(column.defaultValue);\n\n                        if (index == 0)\n                            numericTextBox.focus();\n\n                        if (column.editable == false)\n                            numericTextBox.enabled(false);\n                        else\n                            numericTextBox.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region Color\n                case GridColumnTypeEnum.Color:\n                    {\n                        let colorPicker = ControlManager.get<ColorPicker>(this._elementId + \"_colorPicker_\" + column.field);\n                        colorPicker.clear();\n\n                        if (columnValue != null)\n                            colorPicker.value(columnValue);\n                        else if (column.defaultValue != null)\n                            colorPicker.value(column.defaultValue);\n\n                        if (column.editable == false)\n                            colorPicker.enabled(false);\n                        else\n                            colorPicker.enabled(true);\n                    }\n                    break;\n                //#endregion\n\n                //#region Icon\n                case GridColumnTypeEnum.Icon:\n                    {\n                        let comboIcons = ControlManager.get<ComboBox>(this._elementId + \"_comboIcons_\" + column.field);\n                        comboIcons.clear();\n\n                        if (columnValue != null)\n                            comboIcons.value(columnValue);\n                        else if (column.defaultValue != null)\n                            comboIcons.value(column.defaultValue);\n\n                        comboIcons.icon(comboIcons.value<string>());\n\n                        if (column.editable == false || column.editable == null)\n                        {\n                            comboIcons.enabled(false);\n                            comboIcons.hide();\n                        }\n                        else\n                            comboIcons.enabled(true);\n                    }\n                    break;\n                //#endregion\n            }\n            //#endregion\n\n            index++;\n        }\n    }\n\n    private saveAutoWindow()\n    {\n        let options = this.getOptions();\n\n        //#region Get edited item\n        if (this._actualEditedItem == null)\n            this._actualEditedItem = {};\n\n        let oldItem = jQuery.extend(true, {}, this._actualEditedItem);\n        for (let column of options.columns!.slice(1))\n        {\n            if (column.hidden)\n                continue;\n\n            //#region Type\n            switch (column.type)\n            {\n                //#region CheckBox\n                case GridColumnTypeEnum.Checkbox:\n                case GridColumnTypeEnum.Boolean:\n                    {\n                        let checkBox = ControlManager.get<CheckBox>(this._elementId + \"_checkBox_\" + column.field);\n                        this._actualEditedItem[column.field] = checkBox.checked();\n                    }\n                    break;\n                //#endregion\n\n                //#region String\n                case GridColumnTypeEnum.String:\n                    {\n                        let textBox = ControlManager.get<TextBox>(this._elementId + \"_textBox_\" + column.field);\n                        this._actualEditedItem[column.field] = textBox.value();\n                    }\n                    break;\n                //#endregion\n\n                //#region Password\n                case GridColumnTypeEnum.PasswordViewable:\n                    {\n                        let txtPassword = ControlManager.get<TextBox>(this._elementId + \"_textBox_\" + column.field);\n                        this._actualEditedItem[column.field] = txtPassword.value();\n                    }\n                    break;\n                //#endregion\n\n                //#region Date, DateTime, Time\n                case GridColumnTypeEnum.Date:\n                case GridColumnTypeEnum.LongDate:\n                case GridColumnTypeEnum.LongWeekDate:\n                case GridColumnTypeEnum.ShortWeekDate:\n                    {\n                        let datePicker = ControlManager.get<DatePicker>(this._elementId + \"_datePicker_\" + column.field);\n                        this._actualEditedItem[column.field] = datePicker.value();\n                    }\n                    break;\n                case GridColumnTypeEnum.DateTime:\n                case GridColumnTypeEnum.LongDateTime:\n                    {\n                        let dateTimePicker = ControlManager.get<DatePicker>(this._elementId + \"_dateTimePicker_\" + column.field);\n                        this._actualEditedItem[column.field] = dateTimePicker.value();\n                    }\n                    break;\n                case GridColumnTypeEnum.Time:\n                    {\n                        let timePicker = ControlManager.get<DatePicker>(this._elementId + \"_timePicker_\" + column.field);\n                        this._actualEditedItem[column.field] = timePicker.value();\n                    }\n                    break;\n                //#endregion\n\n                //#region ComboBox, DropDownList, DropDownTree\n                case GridColumnTypeEnum.DropDownList:\n                    {\n                        let dropDownList = ControlManager.get<ComboBox>(this._elementId + \"_dropDownList_\" + column.field);\n                        this._actualEditedItem[column.field] = dropDownList.value();\n                        this._actualEditedItem[column.displayField!] = dropDownList.text();\n                    }\n                    break;\n                case GridColumnTypeEnum.DropDownTree:\n                    {\n                        let dropDownTree = ControlManager.get<ComboBox>(this._elementId + \"_dropDownTree_\" + column.field);\n                        this._actualEditedItem[column.field] = dropDownTree.value();\n                        this._actualEditedItem[column.displayField!] = dropDownTree.text();\n                    }\n                    break;\n                case GridColumnTypeEnum.DropDownTreeCheckboxes:\n                    {\n                        let dropDownTree = ControlManager.get<ComboBox>(this._elementId + \"_dropDownTree_\" + column.field);\n                        this._actualEditedItem[column.field] = dropDownTree.getCheckedValues();\n                        this._actualEditedItem[column.displayField!] = dropDownTree.getCheckedItems().map(k => k.text).vrToCommaSeparatedList();\n                    }\n                    break;\n                case GridColumnTypeEnum.ComboBox:\n                    {\n                        let comboBox = ControlManager.get<ComboBox>(this._elementId + \"_comboBox_\" + column.field);\n                        this._actualEditedItem[column.field] = comboBox.value();\n                        this._actualEditedItem[column.displayField!] = comboBox.text();\n                    }\n                    break;\n                //#endregion\n\n                //#region Number, Currency, Percentage, Duration\n                case GridColumnTypeEnum.Number:\n                case GridColumnTypeEnum.Currency:\n                case GridColumnTypeEnum.Percentage:\n                case GridColumnTypeEnum.Duration:\n                    {\n                        let numericTextBox = ControlManager.get<TextBox>(this._elementId + \"_numericTextBox_\" + column.field);\n                        this._actualEditedItem[column.field] = numericTextBox.value();\n                    }\n                    break;\n                //#endregion\n\n                //#region Color\n                case GridColumnTypeEnum.Color:\n                    {\n                        let colorPicker = ControlManager.get<ColorPicker>(this._elementId + \"_colorPicker_\" + column.field);\n                        this._actualEditedItem[column.field] = colorPicker.value();\n                    }\n                    break;\n                //#endregion\n\n                //#region Icon\n                case GridColumnTypeEnum.Icon:\n                    {\n                        let comboIcons = ControlManager.get<ComboBox>(this._elementId + \"_comboIcons_\" + column.field);\n                        this._actualEditedItem[column.field] = comboIcons.value();\n                        this._actualEditedItem[column.displayField!] = comboIcons.text();\n                    }\n                    break;\n                //#endregion\n            }\n            //#endregion\n        }\n        //#endregion\n\n        //#region OnBeforeSave event\n        if (options.autoWindowSettings!.onBeforeSave != null)\n        {\n            let event = new AutowindowBeforeSaveEvent();\n            event.sender = this;\n            event.window = this._wndAutoWindow;\n            event.dataItem = this._actualEditedItem;\n            event.columns = options.columns;\n            options.autoWindowSettings!.onBeforeSave(event);\n\n            if (event.isDefaultPrevented())\n                return;\n        }\n        //#endregion\n\n        //#region Save request\n        let saveRequest = options.autoWindowSettings!.save;\n        if (saveRequest != null)\n        {\n            if (options.mode == GridModeEnum.Sync)\n                this.doWebApiCall(saveRequest, GridRequestTypeEnum.Save);\n            else\n            {\n                if (saveRequest.callback != null)\n                    saveRequest.callback({ actualItem: this._actualEditedItem, oldItem: oldItem });\n\n                this._wndAutoWindow.close();\n            }\n        }\n        else\n        {\n            if (options.columns!.vrAny(k => k != null && k.type == GridColumnTypeEnum.Percentage && k.ignoreFactor != true))\n            {\n                for (let property of Object.getOwnPropertyNames(this._actualEditedItem))\n                {\n                    let column = options.columns!.find(k => k.field == property);\n                    if (column != null && column.type == GridColumnTypeEnum.Percentage && column.ignoreFactor != true)\n                        this._actualEditedItem[property] *= 100;\n                }\n            }\n\n            this.updateRow(this._actualEditedItem);\n\n            //#region OnAfterSave event\n            if (options.autoWindowSettings!.onAfterSave != null)\n            {\n                let event = new AutowindowAfterSaveEvent();\n                event.sender = this;\n                event.window = this._wndAutoWindow;\n                event.dataItem = this._actualEditedItem;\n                event.columns = options.columns;\n                options.autoWindowSettings!.onAfterSave(event);\n\n                if (event.isDefaultPrevented())\n                    return;\n            }\n            //#endregion\n\n            this._wndAutoWindow.close();\n\n            if (options.onDataSourceChanged != null)\n                options.onDataSourceChanged();\n        }\n        //#endregion        \n    }\n    //#endregion\n\n    //#region Layout\n    private createWindowLayout()\n    {\n        if (this._wndLayout != null)\n            return;\n\n        let options = this.getOptions();\n        if (typeof (options.layoutSettings) === \"boolean\")\n            return;\n\n        this._wndLayout = createWindow(\n            {\n                addToControlList: false,\n                width: 500,\n                height: 300,\n                title: \"Gestisci layout\",\n                classContainer: this.element().id + \"_wndUtility\",\n                onClose: (e) =>\n                {\n                    puma(this._wndLayout.container()).remove();\n                    (this._wndLayout as any) = null;\n                },\n                footer:\n                    [\n                        { type: WindowFooterItemTypeEnum.Close },\n                        {\n                            type: WindowFooterItemTypeEnum.Custom, text: \"Layout base\", mode: ButtonModeEnum.Primary,\n                            align: WindowFooterItemAlignEnum.Left, onClick: (e) =>\n                            {\n                                this._actualLayout = null;\n                                this.changeLayout(true, this._originalOptionsForLayout);\n                            }\n                        },\n                        {\n                            type: WindowFooterItemTypeEnum.Custom, text: \"Carica\", mode: ButtonModeEnum.Primary,\n                            onClick: (e) =>\n                            {\n                                let checkedItems = this._grdLayout.getCheckedItems();\n                                if (checkedItems.length == 0)\n                                {\n                                    notifyWarning(\"Selezionare almeno un layout\");\n                                    return;\n                                }\n\n                                let checkedItem = checkedItems[0];\n                                if (this._actualLayout == null || (this._actualLayout != null && checkedItem.id != this._actualLayout.id))\n                                    this.loadLayout(checkedItem.layoutName);\n                            }\n                        }\n                    ]\n            });\n\n        puma(this._wndLayout.element()).vrAppendPuma(\"<div id='\" + this._elementId + \"_divWindowLayoutContainer' class='vrContainer'></div>\");\n        let divContainer = puma(\"#\" + this._elementId + \"_divWindowLayoutContainer\")[0];\n        puma(\"<table id='\" + this._elementId + \"_tblLayout'></table>\").vrAppendToPuma(divContainer);\n\n        //#region Grid layout\n        this._grdLayout = createGrid(\n            {\n                addToControlList: false,\n                footer: false,\n                pageSize: 500,\n                filterable: false,\n                checkboxes: GridCheckboxModeEnum.SingleCheck,\n                height: 144,\n                groupBy: null,\n                groupable: false,\n                rebind:\n                {//**********************TODO//**********************\n                    authKey: \"10(P9m+U3a@Mtt-Oeo\", method: \"/api/GridLayoutPersisterWebApi/GetLayoutList\",\n                    itemsPropertyName: \"tableLayoutList\", parameters: () =>\n                    {\n                        let options = this.getOptions();\n                        if (typeof (options.layoutSettings) === \"boolean\")\n                            return;\n\n                        return { pageName: window.location.href, gridName: options!.layoutSettings!.name }\n                    },\n                    callback: (response: any) =>\n                    {\n                        if (this._actualLayout != null)\n                            this.selectRowInternal(String(this._actualLayout.id), false, { fromCheckboxInput: false, fromGroupOrRow: true, fromMethodCall: false, shiftKey: false });\n                    }\n                },\n                autoWindowSettings:\n                {\n                    save:\n                    {\n                        authKey: \"10(P9m+U3a@Mtt-Oeo\", method: \"/api/GridLayoutPersisterWebApi/EditLayout\",\n                        rebindGridAfterSave: true\n                    }\n                },\n                toolbar:\n                    [\n                        {\n                            type: GridToolbarItemType.Custom, icon: IconClassicRegular.Xmark, text: \"Elimina\",\n                            confirmationMessage: \"Confermi di voler eliminare questo layout?\",\n                            onClick: (e) =>\n                            {\n                                let checkedItem = this._grdLayout.getCheckedItems()[0];\n                                this._grdLayout.deleteRow(checkedItem.id);\n\n                                let loadOriginalLayout = (this._actualLayout != null && checkedItem.id == this._actualLayout!.id);\n                                this.clearLayout(checkedItem.layoutName, loadOriginalLayout);\n\n                                if (this._grdLayout.getAllItems().length == 0)\n                                {\n                                    //#region Settings\n                                    ControlManager.get<SplitButton>(this._elementId + \"_spbSettings\").hideItem(\"manageLayout\");\n                                    window.setTimeout(() => this._wndLayout.close(), 300);\n                                    //#endregion\n                                }\n                            }\n                        },\n                        {\n                            type: GridToolbarItemType.Custom, icon: IconClassicLight.Plus, text: \"Crea nuovo\",\n                            onClick: (e) =>\n                            {\n                                prompt(\"Assegna un nome a questo layout\", { title: \"Nuovo layout\" }).then((value) =>\n                                {\n                                    this.saveLayout(value, () => this._grdLayout.rebind());\n                                });\n                            }\n                        }\n                    ],\n                columns:\n                    [\n                        { type: GridColumnTypeEnum.String, title: \"Nome\", field: \"layoutName\", fitSpace: true },\n                        {\n                            type: GridColumnTypeEnum.DateTime, title: \"Ultima modifica\", field: \"layoutLastEditDate\",\n                            width: 200, editable: false, headerSettings: { textAlign: GridAlignEnum.Center }\n                        }\n                    ]\n            }, null, null, this._elementId + \"_tblLayout\");\n        //#endregion\n    }\n\n    private openWindowLayout()\n    {\n        this.createWindowLayout();\n        this._wndLayout.open();\n        this._grdLayout.rebind();\n    }\n\n    private doWebApiCallLayout<T>(layoutOperationType: GridLayoutOperationTypeEnum, request: any, callBack?: (e: T) => void)\n    {\n        let url = \"\";\n        switch (layoutOperationType)\n        {\n            case GridLayoutOperationTypeEnum.Save: url = \"/api/GridLayoutPersisterWebApi/SaveLayout\"; break;\n            case GridLayoutOperationTypeEnum.Load: url = \"/api/GridLayoutPersisterWebApi/LoadLayout\"; break;\n            case GridLayoutOperationTypeEnum.Clear: url = \"/api/GridLayoutPersisterWebApi/ClearLayout\"; break;\n            case GridLayoutOperationTypeEnum.Get: url = \"/api/GridLayoutPersisterWebApi/GetLayoutList\"; break;\n        }\n\n        //#region Call\n        request.AuthKey = \"10(P9m+U3a@Mtt-Oeo\";\n        $.ajax({\n            type: \"POST\",\n            contentType: \"application/json\",\n            data: JSON.stringify(request),\n            method: \"POST\",\n            processData: false,\n            async: !(layoutOperationType == GridLayoutOperationTypeEnum.Get),\n            dataType: \"json\",\n            url: url,\n            success: function (response: T, textStatus: string, jqXHR: JQueryXHR)\n            {\n                if (callBack != null)\n                    callBack(response);\n            }\n        });\n        //#endregion\n    }\n\n    //#region SaveLayout\n    saveLayout(layoutName: string, callBack?: Function)\n    {\n        let options = this.getOptions();\n        if (typeof (options.layoutSettings) === \"boolean\")\n            return;\n\n        if (layoutName == \"\")\n        {\n            notify(\"Inserire un nome del layout\");\n            return;\n        }\n\n        //#region LayoutJson\n        let layoutJson = new GridLayoutStructure();\n        layoutJson.filterConditions = Array.from(this._dictionaryFilterConditions.entries());\n\n        if (options.groupBy != null)\n        {\n            if ((options.groupBy as GridGroupBySettings).fields != null)\n            {\n                layoutJson.groupBy = new GridGroupBySettings();\n                layoutJson.groupBy.fields = (options.groupBy as GridGroupBySettings).fields;\n                layoutJson.groupBy.internalSortBy = (options.groupBy as GridGroupBySettings).internalSortBy;\n                layoutJson.groupBy.sortBy = (options.groupBy as GridGroupBySettings).sortBy;\n            }\n        }\n\n        layoutJson.pageSize = ((typeof (options.pageSize) == \"boolean\") || this._pageSizeUnlimited) ? 50 : options.pageSize!;\n        layoutJson.sortingInfo = this._actualSortingInfo;\n\n        let index = 0;\n        let layoutColumns: GridLayoutColumn[] = [];\n        for (let column of options.columns!)\n        {\n            let layoutColumn = new GridLayoutColumn();\n            layoutColumn.field = column.field;\n            layoutColumn.fitSpace = column.fitSpace;\n            layoutColumn.hidden = column.hidden;\n            layoutColumn.locked = column.locked;\n            layoutColumn.index = index;\n\n            let width = (column.width != null) ? (column.width) : ((column.type == GridColumnTypeEnum.EditButton) ? 32 : 100);\n            layoutColumn.width = width;\n\n            layoutColumns.push(layoutColumn);\n            index++;\n        }\n        layoutJson.columns = layoutColumns;\n        //#endregion\n\n        //#region Call\n        let saveLayoutRequest = new SaveLayoutRequest();\n        saveLayoutRequest.layoutJson = JSON.stringify(layoutJson);\n        saveLayoutRequest.pageName = window.location.href;\n        saveLayoutRequest.gridName = options.layoutSettings!.name;\n        saveLayoutRequest.layoutName = layoutName;\n\n        this.doWebApiCallLayout(GridLayoutOperationTypeEnum.Save, saveLayoutRequest, (response: any) =>\n        {\n            //#region Settings\n            if (this._actualLayout == null)\n            {\n                ControlManager.get<SplitButton>(this._elementId + \"_spbSettings\").showItem(\"manageLayout\");\n                let topSettingsBtnPosition = 0;\n                if (options.groupable) topSettingsBtnPosition = -127;\n                else topSettingsBtnPosition = -95;\n\n                puma(`<style>.vrContainer .grid_spbSettings .k-animation-container\n\t\t\t\t\t{\n\t\t\t\t\t\ttop: ` + topSettingsBtnPosition + `px !important;\n\t\t\t\t\t}</style>`).vrAppendToPuma(\"head\");\n            }\n            //#endregion\n            //**********************TODO//**********************\n            if (saveLayoutRequest.layoutPropertyName == null)\n                saveLayoutRequest.layoutPropertyName = \"tableLayout\";\n\n            this._actualLayout = response[saveLayoutRequest.layoutPropertyName];\n            notify(\"Layout salvato correttamente\");\n\n            if (callBack != null)\n                callBack();\n        });\n        //#endregion\n    }\n    //#endregion\n\n    //#region ClearLayout\n    private clearLayout(layoutName: string, updateDataSource = false)\n    {\n        let options = this.getOptions();\n        if (typeof (options.layoutSettings) === \"boolean\")\n            return;\n\n        //#region Call\n        let clearLayoutRequest = new ClearLayoutRequest();\n        clearLayoutRequest.pageName = window.location.href;\n        clearLayoutRequest.gridName = options.layoutSettings!.name!;\n        clearLayoutRequest.layoutName = layoutName;\n\n        this.doWebApiCallLayout<ClearLayoutResponse>(GridLayoutOperationTypeEnum.Clear, clearLayoutRequest, (response) =>\n        {\n            if (updateDataSource)\n            {\n                this._actualLayout = null;\n                this.changeLayout(true, this._originalOptionsForLayout);\n            }\n        });\n        //#endregion\n    }\n    //#endregion\n\n    //#region LoadLayout\n    customLayouts()\n    {\n        return this._customLayouts;\n    }\n\n    activeLayout()\n    {\n        return this._actualLayout;\n    }\n\n    private loadLayout(layoutName: string)\n    {\n        let options = this.getOptions();\n        if (typeof (options.layoutSettings) === \"boolean\")\n            return;\n\n        //#region Call\n        let loadLayoutRequest = new LoadLayoutRequest();\n        loadLayoutRequest.pageName = window.location.href;\n        loadLayoutRequest.gridName = options.layoutSettings!.name;\n        loadLayoutRequest.layoutName = layoutName;\n\n        this.doWebApiCallLayout<LoadLayoutResponse>(GridLayoutOperationTypeEnum.Load, loadLayoutRequest, (response) =>\n        {\n            if (response.tableLayout != null && response.tableLayout.layoutJson != null)\n            {\n                this._actualLayout = response.tableLayout;\n                this.changeLayout(true);\n                notify(\"Layout caricato correttamente\");\n                this._wndLayout.close();\n            }\n            else\n                notify(\"Errore nel caricamento del layout\");\n        });\n        //#endregion\n    }\n\n    private changeLayout(updateDataSource = false, layoutJson?: GridLayoutStructure)\n    {\n        if (this._actualLayout != null || layoutJson != null)\n        {\n            let options = this.getOptions();\n            let json = (layoutJson != null) ? layoutJson : JSON.parse(this._actualLayout!.layoutJson) as GridLayoutStructure;\n\n            let editButtonColumnIndex = json.columns.findIndex(k => k.field.toLowerCase() == \"editbutton\");\n            let editButtonColumn = json.columns[editButtonColumnIndex];\n            if (editButtonColumn != null)\n                editButtonColumn.field = \"editButton\";\n\n            //#region GroupBy\n            if (options.groupable! && options.groupBy != null)\n            {\n                let oldGroupByList = [];\n                if ((options.groupBy as GridGroupBySettings).fields != null)\n                {\n                    for (let group of ((options.groupBy as GridGroupBySettings).fields as GridGroupByItem[]).map(k => k.field))\n                        oldGroupByList.push(group);\n                }\n\n                for (let groupRemoved of oldGroupByList)\n                    this.removeGroup(groupRemoved, false);\n            }\n\n            if (json.groupBy != null)\n            {\n                let groupByFields: GridGroupByItem[] = [];\n                if (Array.isArray(json.groupBy))\n                {\n                    for (let groupByField of json.groupBy)\n                        groupByFields.push({ field: UtilityManager.duplicate(groupByField) });\n\n                    options.groupBy = new GridGroupBySettings();\n                    options.groupBy.fields = UtilityManager.duplicate(groupByFields);\n                }\n                else\n                {\n                    groupByFields = UtilityManager.duplicate(json.groupBy.fields as GridGroupByItem[]);\n                    options.groupBy = UtilityManager.duplicate(json.groupBy);\n                }\n\n                if (groupByFields != null)\n                    this.addGroups(groupByFields, updateDataSource);\n            }\n            //#endregion\n\n            //#region PageSize\n            if (json.pageSize != null)\n            {\n                if (typeof (json.pageSize) == \"boolean\")\n                    options.pageSize = 50;\n                else if (typeof (json.pageSize) == \"number\")\n                    options.pageSize = json.pageSize;\n                else\n                    options.pageSize = (json.pageSize.value == null) ? 50 : json.pageSize.value;\n\n                if (updateDataSource)\n                {\n                    let ddlPageSize = ControlManager.get<ComboBox>(this._elementId + \"_ddlPageSize\");\n                    if (!ddlPageSize.items().map(k => k.value).includes(String(options.pageSize)))\n                    {\n                        let items = ddlPageSize.items();\n                        items.push({ text: String(options.pageSize), value: String(options.pageSize) });\n                        ddlPageSize.items(items);\n                    }\n                    ddlPageSize.value(String(options.pageSize), true);\n                }\n            }\n            //#endregion\n\n            //#region Filtering\n            this.clearFilters(false);\n            if (json.filterConditions != null && json.filterConditions.length > 0)\n            {\n                let dictionaryFilterConditions = new Map<string, GridFilterSettings>();\n                for (let filterCondition of json.filterConditions)\n                    dictionaryFilterConditions.set(filterCondition[0], filterCondition[1]);\n\n                this._dictionaryFilterConditions = dictionaryFilterConditions;\n            }\n            //#endregion\n\n            //#region Sorting\n            this.removeSort(false);\n            if (json.sortingInfo != null)\n                this._actualSortingInfo = json.sortingInfo;\n            //#endregion\n\n            //#region Columns\n            if (json.columns != null)\n            {\n                for (let jsonColumn of json.columns)\n                {\n                    let optionsColumn = options.columns!.find(k => k.field == jsonColumn.field);\n                    if (optionsColumn != null)\n                    {\n                        let optionsColumnIndex = options.columns!.indexOf(optionsColumn);\n                        (options.columns![optionsColumnIndex] as any).index = jsonColumn.index;\n\n                        if (jsonColumn.fitSpace !== true)\n                            options.columns![optionsColumnIndex].width = jsonColumn.width;\n\n                        //#region Header columns width\n                        if (jsonColumn.fitSpace !== true)\n                        {\n                            let thHeader = puma(this._divHeader).find(\"th[field='\" + jsonColumn.field + \"']\")[0];\n                            if (options.lockable && thHeader == null)\n                                thHeader = puma(this._divHeaderLocked).find(\"th[field='\" + jsonColumn.field + \"']\")[0];\n\n                            thHeader.style.width = jsonColumn.width + \"px\";\n\n                            if (options.filterable)\n                            {\n                                let tdFilter = puma(this._divFilters).find(\"td[field='\" + jsonColumn.field + \"']\")[0];\n                                if (options.lockable && tdFilter == null)\n                                    tdFilter = puma(this._divFiltersLocked).find(\"td[field='\" + jsonColumn.field + \"']\")[0];\n\n                                tdFilter.style.width = jsonColumn.width + \"px\";\n                            }\n\n                            if (this._showTotals)\n                            {\n                                let tdTotals = puma(this._divTotals).find(\"td[field='\" + jsonColumn.field + \"']\")[0];\n                                if (options.lockable && tdTotals == null)\n                                    tdTotals = puma(this._divTotalsLocked).find(\"td[field='\" + jsonColumn.field + \"']\")[0];\n\n                                tdTotals.style.width = jsonColumn.width + \"px\";\n                            }\n                        }\n                        //#endregion\n\n                        if (jsonColumn.hidden)\n                            this.hideColumn(jsonColumn.field, false);\n                        else\n                            this.showColumn(jsonColumn.field, false);\n\n                        if (jsonColumn.locked)\n                            this.lockColumn(jsonColumn.field, false);\n                        else\n                            this.unlockColumn(jsonColumn.field, false);\n                    }\n                }\n                options.columns!.vrSortAsc(\"index\");\n\n                //#region Order columns\n                let lastIndex = puma(this._divHeader).find(\"table th:last-child\").index();\n                for (let column of options.columns!)\n                {\n                    //#region Header\n                    let headerTh = puma(this._divHeader).find(\"table th[field='\" + column.field + \"']\")[0];\n                    puma(puma(this._divHeader).find(\"table th\")[lastIndex]).vrAfterPuma(headerTh);\n                    //#endregion\n\n                    //#region Filters\n                    if (options.filterable)\n                    {\n                        let filtersTd = puma(this._divFilters).find(\"table td[field='\" + column.field + \"']\")[0];\n                        puma(puma(this._divFilters).find(\"table td\")[lastIndex]).vrAfterPuma(filtersTd);\n                    }\n                    //#endregion\n\n                    //#region Totals\n                    if (this._showTotals)\n                    {\n                        let totalsTd = puma(this._divTotals).find(\"table td[field='\" + column.field + \"']\")[0];\n                        puma(puma(this._divTotals).find(\"table td\")[lastIndex]).vrAfterPuma(totalsTd);\n                    }\n                    //#endregion\n\n                    //#region Groups\n                    if (options.groupable)\n                    {\n                        let colGroupCol = puma(this._divBody).find(\"colgroup col[field='\" + column.field + \"']\")[0];\n                        puma(puma(this._divBody).find(\"colgroup col\")[lastIndex]).vrAfterPuma(colGroupCol);\n                    }\n                    //#endregion\n                }\n                //#endregion\n\n                this.recalculateFitSpacePercentage();\n                this.recalculateWidth();\n            }\n            //#endregion\n\n            if (updateDataSource)\n            {\n                hideLoader(\"vrGridLoaderLayout\" + this._elementId);\n                if (this._originalDataSource.length > 2000)\n                    showLoader(this.container(), true, \"vrGridLoaderLayout\" + this._elementId);\n\n                window.setTimeout(() =>\n                {\n                    puma(this.element()).find(\"tbody\").remove();\n                    this.dataSource(this._originalDataSource);\n                    hideLoader(\"vrGridLoaderLayout\" + this._elementId);\n                }, 50);\n            }\n        }\n    }\n    //#endregion\n\n    //#endregion\n\n    //#endregion\n}\n//#endregion\n\n//#region Classes\n\n//#region Common\nclass GridWebApiRequest\n{\n    authKey?: string;\n    method?: string;\n    successNotificationMessage?: boolean | string;\n    errorNotificationMessage?: boolean | string;\n    rebindGridAfterSave?: boolean;\n    rebindGridAfterError?: boolean;\n    closeWindowAfterError?: boolean;\n    otherParameters?: any;\n    loadingElement?: boolean | HTMLElement | JQuery | string;\n\n    callback?: (response?: any) => void;\n    callbackBeforeDatasourceChange?: (response?: any) => void;\n    errorCallback?: (message?: string) => void;\n    parameters?: () => any;\n}\n\nenum GridRequestTypeEnum\n{\n    Delete = 0,\n    Rebind = 1,\n    Save = 2,\n    Excel = 3,\n    RebindSpecificRows = 4\n}\n//#endregion\n\n//#region Header columns\nexport class GridHeaderAndCellSettings\n{\n    textAlign?: GridAlignEnum;\n    backgroundColor?: string;\n    color?: string;\n    tooltip?: boolean | string | ((e: GridTooltipEvent) => string);\n    css?: string;\n}\n\nexport class GridHeaderSettings extends GridHeaderAndCellSettings\n{\n    icon?: IconClass;\n}\n\nexport class GridCellSettings extends GridHeaderAndCellSettings\n{\n    zeroIfNull?: boolean;\n}\n//#endregion\n\n//#region Controls settings\nclass GridControlData\n{\n    GridControlsSettings: GridControlsSettings;\n    columnType: GridColumnTypeEnum;\n}\n\nexport class GridControlsSettings\n{\n    onClick?: (e: GridControlsClickEvent) => void;\n    confirmationMessage?: string;\n    value?: string;\n    css?: string;\n    class?: string;\n    visible?: boolean;\n    enabled?: boolean;\n    tooltip?: string;\n}\n\nexport class GridCustomSettings extends GridControlsSettings\n{\n    template: string;\n    filterFields?: string[];\n}\n\nexport class GridIconSettings extends GridControlsSettings\n{\n    icon?: IconClass;\n    imageUrl?: string;\n    color?: string;\n}\n\nexport class GridImageSettings extends GridControlsSettings\n{\n    imageUrl?: string;\n    base64Bytes?: string;\n}\n\nexport class GridLabelSettings extends GridControlsSettings\n{\n    text?: string;\n    underlineMode?: GridLabelUnderlineMode;\n    bold?: boolean;\n    color?: string;\n    noBr?: boolean | number;\n    icon?: IconClass;\n}\n//#endregion\n\n//#region Rebind\nexport class GridRebindRequest extends GridWebApiRequest\n{\n    itemsPropertyName?: string;\n    rebindAtStartup?: boolean;\n    clearFilters?: boolean;\n    specificItemIdListPropertyName?: string;\n}\n\nclass GridSearchingInfo\n{\n    public field: string;\n    public text: string;\n}\n\nclass VrGridServerBindingSettings\n{\n    indexFrom?: number;\n    indexTo?: number;\n    columns?: GridColumn[];\n    sortingInfo?: GridSortingInfo | null;\n    filters?: Dictionary<string, GridFilterSettings>;\n    groupByFields?: string[] | null;\n    excel?: boolean;\n    excelFileName: string | undefined;\n    pageSize: number;\n    page: number;\n}\n\nclass GridServerBindPagination\n{\n    indexFrom?: number;\n    indexTo?: number;\n}\n//#endregion\n\n//#regon Excel\nexport class GridExcelRequest extends GridWebApiRequest\n{\n    fileName?: string;\n}\n//#endregion\n\n//#region Events\nclass GridControlsClickEvent\n{\n    dataItem: any;\n}\n\nexport class GridTemplateEvent\n{\n    dataItem: any;\n    className?: string;\n    element?: HTMLTableCellElement;\n    empty?: boolean;\n    field: string;\n    sender: Grid;\n}\n\nexport class GridTooltipEvent\n{\n    dataItem: any;\n    element?: HTMLTableCellElement;\n    empty: boolean;\n}\n\nexport class GridOnDataBoundEvent\n{\n    sender: Grid;\n}\n\nexport class GridOnRowDataBoundEvent\n{\n    sender: Grid;\n    rowElement: HTMLTableRowElement;\n    dataItem: any;\n    realDataItem: any;\n    empty?: boolean;\n}\n\nexport class GridSelectRowEvent\n{\n    sender: Grid;\n    rowElement: HTMLTableRowElement;\n    dataItem: any;\n    checked: boolean;\n    empty: boolean;\n    index: number;\n    shiftKey: boolean;\n    fromCheckbox: boolean;\n}\n\nexport class GridSelectAllRowsEvent\n{\n    sender: Grid;\n    checked: boolean;\n}\n\nexport class GridUnselectRowEvent\n{\n    sender: Grid;\n    rowElement: HTMLTableRowElement;\n    dataItem: any;\n}\n\nexport class GridUnselectAllRowsEvent\n{\n    sender: Grid;\n}\n\nexport class GridToolbarClickEvent\n{\n    sender: any;\n    type: GridToolbarItemType;\n    isDefaultPrevented: boolean;\n    deletedItems?: any[];\n\n    preventDefault()\n    {\n        this.isDefaultPrevented = true;\n    }\n}\n//#endregion\n\n//#region Toolbar\nexport class GridToolbarSwitchSettings\n{\n    labelOff?: string;\n    labelOn?: string;\n    checked?: boolean;\n    onCheck?: (e: GridToolbarSwitchEvent) => void;\n}\n\nclass GridToolbarSwitchEvent\n{\n    checked: boolean;\n}\n\nexport class GridToolbarDeleteRequest extends GridWebApiRequest\n{\n    deletedValuesPropertyName?: string;\n    valuePropertyName?: string;\n}\n//#endregion\n\n//#region Footer\nexport class GridFooterSettings\n{\n    maxVisiblePages?: number;\n    totalElements?: boolean | ((e: GridTotalElementTemplateEvent) => string | number);\n    showPagination?: boolean;\n    showPageSize?: boolean;\n    showSettings?: boolean;\n    cartSettings?: GridCartSettings;\n}\n\nclass GridTotalElementTemplateEvent\n{\n    firstIndex?: number;\n    lastIndex?: number;\n    dataItems: any[];\n    pageSelected: number;\n    numberOfPages: number;\n}\n\nexport class GridPageSettings\n{\n    value?: number;\n    otherValues: number[];\n}\n//#endregion\n\n//#region Totals\nclass TotalsGroupItem\n{\n    groupValue: string;\n    dataItems: any[];\n}\n\nclass TotalsResult\n{\n    field: string;\n    total: number;\n    decimalDigits?: number;\n    roundingSettings?: NumberFormatRoundingSettings;\n    type: GridColumnTypeEnum;\n    milesSeparator?: boolean;\n}\n//#endregion\n\n//#region Excel\nexport class GridExcelRow\n{\n    cells: GridExcelCell[];\n}\n\nexport class ExcelExportPromise\n{\n    fileName: string;\n    headerRow: GridExcelRow;\n    contentRows: GridExcelRow[];\n    footerRow: GridExcelRow;\n    groupByFields: GridGroupByItem[];\n}\n\nclass GridExcelCell\n{\n    title: string | undefined;\n    field: string;\n    text?: string;\n    bold?: boolean;\n    type?: GridColumnTypeEnum;\n    width?: number;\n    cellSettings?: GridHeaderAndCellSettings;\n    aggregate?: GridAggregateMode;\n    decimalDigits?: number;\n    hidden?: boolean;\n    locked?: boolean;\n    backgroundColor: string;\n    color: string;\n    roundingSettings?: NumberFormatRoundingSettings;\n}\n\nclass GenerateExcelRequest\n{\n    public headerRow: GridExcelRow;\n    public contentRows: GridExcelRow[];\n    public footerRow: GridExcelRow;\n    public excelFileName: string;\n    public AuthKey: string;\n    public groupBy?: GridGroupByItem[] | null;\n    public exportHiddenColumns: boolean;\n}\n\nclass GenerateExcelResponse\n{\n    public downloadUrl: string;\n}\n//#endregion\n\n//#region Sorting\nclass GridSortingInfo\n{\n    field: string;\n    mode: GridSortDirectionEnum;\n}\n//#endregion\n\n//#region Auto window\nclass GridAutoWindowSettings\n{\n    save?: GridSaveRequest;\n    options?: GridAutoWindowOption;\n\n    onBeforeOpen?: (e: AutowindowBeforeOpenEvent) => void;\n    onAfterOpen?: (e: AutowindowAfterOpenEvent) => void;\n    onBeforeSave?: (e: AutowindowBeforeSaveEvent) => void;\n    onAfterSave?: (e: AutowindowAfterSaveEvent) => void;\n    onBeforeClose?: (e: AutowindowBeforeCloseEvent) => void;\n    onAfterClose?: (e: AutowindowAfterCloseEvent) => void;\n}\n\nclass GridAutoWindowOption\n{\n    titleNew?: string;\n    titleEdit?: string;\n    height?: number | string;\n    width?: number | string;\n    showSaveButton?: boolean;\n    showCancelButton?: boolean;\n    textSaveButton?: string;\n    textCancelButton?: string;\n    confirmationMessage?: string;\n}\n\nclass GridSaveRequest extends GridWebApiRequest\n{\n    itemPropertyName?: string;\n}\n\nclass AutoWindowEvent extends VrControlsEvent\n{\n    sender: Grid;\n    window: Window;\n    dataItem: any;\n    columns?: GridColumn[];\n}\n\nclass AutowindowBeforeOpenEvent extends AutoWindowEvent { }\nclass AutowindowAfterOpenEvent extends AutoWindowEvent { }\nclass AutowindowBeforeSaveEvent extends AutoWindowEvent { }\nclass AutowindowAfterSaveEvent extends AutoWindowEvent { }\nclass AutowindowBeforeCloseEvent extends AutoWindowEvent { }\nclass AutowindowAfterCloseEvent extends AutoWindowEvent { }\n//#endregion\n\n//#region Grid actions (Show/Hide and GroupBy)\nenum GridActionEnum\n{\n    ShowHide,\n    GroupBy,\n    LockUnlock\n}\n//#endregion\n\n//#region Filtering\nexport class GridFilterSettings\n{\n    type: GridColumnTypeEnum;\n\n    dateFilterSettings?: GridDateFilterSettings | null;\n    numberFilterSettings?: GridNumberFilterSettings | null;\n    checkboxFilterSettings?: GridCheckboxFilterSettings | null;\n    stringFilterSettings?: GridStringFilterSettings | null;\n}\n\nclass GridDateFilterSettings\n{\n    filterTypeEnum: GridDateFilterTypeEnum;\n    dateFrom: Date;\n    dateTo?: Date | null;\n    specificValues: any[];\n}\n\nclass GridNumberFilterSettings\n{\n    filterTypeEnum: GridNumberFilterTypeEnum;\n    numberFrom: number;\n    numberTo?: number | null;\n    specificValues: any[];\n}\n\nclass GridCheckboxFilterSettings\n{\n    value: boolean;\n}\n\nclass GridStringFilterSettings\n{\n    text: string;\n    filterTypeEnum: GridStringFilterTypeEnum;\n    specificValues: any[];\n}\n//#endregion\n\n//#region Drag&Drop\nclass DragSupportEvent\n{\n    onDragged?: null | ((e: DragEveryEvent) => void);\n    onDragging?: null | ((e: DragEveryEvent) => void);\n}\n\nclass DragEveryEvent\n{\n    left: number;\n    top: number;\n    element: HTMLElement;\n}\n\nclass GridColumnPosition\n{\n    left: number;\n    right: number;\n    field: string;\n    index: number;\n    th: HTMLElement;\n}\n//#endregion\n\n//#region GroupBy\nclass GridChildrenGroupRows\n{\n    children: HTMLElement[];\n    groupRows: HTMLElement[];\n    allRows: HTMLElement[];\n}\n//#endregion\n\n//#region Layout\nclass GridLayoutSettings\n{\n    //*****************TODO*************************** */\n    name?: string;\n    get?: GetLayoutListRequest;\n    save?: SaveLayoutRequest;\n    load?: LoadLayoutRequest;\n}\n\nclass GridLayoutStructure\n{\n    filterConditions?: any[] | null;\n    groupBy?: GridGroupBySettings | null;\n    pageSize?: number | boolean | GridPageSettings;\n    sortingInfo?: GridSortingInfo | null;\n    columns: GridLayoutColumn[];\n}\n\nclass GridLayoutColumn\n{\n    width?: number;\n    fitSpace?: boolean;\n    hidden?: boolean;\n    locked?: boolean;\n    index: number;\n    field: string;\n}\n\nclass SaveLayoutRequest\n{\n    public method: string;\n    public authKey?: string;\n    public layoutJson?: string;\n    public pageName?: string;\n    public gridName?: string;\n    public layoutName?: string;\n    public layoutPropertyName?: string;\n}\n\nclass LoadLayoutRequest\n{\n    public method: string;\n    public authKey?: string;\n    public pageName?: string;\n    public gridName?: string;\n    public layoutName?: string;\n    public layoutPropertyName?: string;\n}\n\nclass LoadLayoutResponse\n{\n    public tableLayout: GridLayout;\n}\n\nclass ClearLayoutRequest\n{\n    public AuthKey: string;\n    public pageName: string;\n    public gridName: string;\n    public layoutName: string;\n}\n\nclass ClearLayoutResponse\n{\n\n}\n\nclass GetLayoutListRequest\n{\n    public method: string;\n    public authKey?: string;\n    public pageName?: string;\n    public gridName?: string;\n    public layoutsPropertyName?: string;\n}\n\nclass GridLayout\n{\n    layoutName: string;\n    layoutLastEditDate: Date;\n    id: number;\n    layoutJson: string;\n}\n\nenum GridLayoutOperationTypeEnum\n{\n    Save,\n    Load,\n    Clear,\n    Get\n}\n//#endregion\n\nclass TempRebindInfo\n{\n    yPosition: number;\n    checkedValues: string[];\n    page: number;\n}\n\nexport class GridRow \n{\n    element: HTMLElement;\n    cells: HTMLElement[];\n    index: number;\n    dataItemId: string;\n    id: string;\n\n    findControl<T extends VrControl>(uniqueName: string)\n    {\n        let controlElement = puma(this.element).find(\"*[uniqueName='\" + uniqueName + \"']\")[0];\n        if (controlElement != null)\n            return ControlManager.get<T>(controlElement.id);\n        else\n            return null;\n    }\n}\n//#endregion"],"names":["groupByFields","e","GridControlData","k","groupByFieldValue","td","tdExpandCollapse","tdGroupByName","divGroupByName","dataItemId","dataItem","i","rows","div","field","options"],"mappings":"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"}