{"version":3,"file":"textbox.js","sources":["../../../../src/ui/controls/textbox.ts"],"sourcesContent":["import { VrControl, VrControlOptions, VrControlsEvent } from \"../common\";\nimport { ControlTypeEnum, TextAlignEnum, TextModeEnum, TextTransformModeEnum, PositionEnum, ErrorModeEnum, ErrorPositionEnum, ErrorHideModeEnum, puma, IconClassicLight, IconClass, KeyEnum, icon, TextBoxLengthSettings, NumberFormatRoundingSettings, NumberFormatSettings, RoundingModeEnum, TextBoxValidationSettings, TextBoxValidationErrorEnum, TextBoxRegexSettings, TextBoxAutoCompleteEnum } from \"../vr\";\nimport { UtilityManager } from \"../../managers/utilityManager\";\nimport { DeviceManager } from \"../../../src/managers/deviceManager\";\n\n//#region Options\nexport class TextBoxOptions extends VrControlOptions\n{\n    value?: string | number;\n    placeholder?: string;\n    readOnly?: boolean;\n    rows?: number;\n    decimals?: number;\n    zeros?: number;\n    align?: TextAlignEnum;\n    mode?: TextModeEnum;\n    inputMode?: TextTransformModeEnum;\n    icon?: IconClass;\n    imageUrl?: string;\n    bold?: boolean;\n    nullable?: boolean;\n    growWithContent?: boolean;\n    tooltip?: string;\n    roundingSettings?: NumberFormatRoundingSettings;\n    validation?: TextBoxValidationSettings;\n    autocomplete?: TextBoxAutoCompleteEnum | string;\n\n    onChanged?(e: TextBoxChangeEvent): void;\n    onKeyUp?(e: TextBoxKeyUpEvent): void;\n    onKeyDown?(e: TextBoxKeyDownEvent): void;\n    onEnterKey?(e: TextBoxEnterKeyEvent): void;\n    onFocus?(e: TextBoxFocusEvent): void;\n    onBlur?(e: TextBoxBlurEvent): void;\n    onPaste?(e: TextBoxPasteEvent): void;\n}\n//#endregion\n\n//#region Control\nexport class TextBox extends VrControl\n{\n    private _numberValue: number | null;\n    private _hideErrorMode: ErrorHideModeEnum;\n    private _keyDownCanceled: boolean;\n    private _originalHeight: number;\n    private _oldValue: string | number | null;\n    private _originalMarginBottom: number;\n    private _passwordViewableIcon: HTMLElement;\n\n    constructor(element: HTMLElement, options?: TextBoxOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new TextBoxOptions();\n\n        if (options.mode == null) options.mode = TextModeEnum.Text;\n        if (options.inputMode == null) options.inputMode = TextTransformModeEnum.Default;\n        if (options.rows == null) options.rows = 2;\n        if (options.width == null) options.width = 200;\n        if (options.bold == null) options.bold = false;\n        if (options.nullable == null) options.nullable = true;\n        if (options.growWithContent == null) options.growWithContent = false;\n        if (options.autocomplete == null) options.autocomplete = TextBoxAutoCompleteEnum.Off;\n\n        if (options.decimals == null) \n        {\n            if (options.mode == TextModeEnum.Numeric)\n                options.decimals = 0;\n            else if (options.mode == TextModeEnum.Currency || options.mode == TextModeEnum.Percentage)\n                options.decimals = 2;\n        }\n\n        if (options.align == null) \n        {\n            if (options.mode == TextModeEnum.Numeric || options.mode == TextModeEnum.Percentage || options.mode == TextModeEnum.Currency)\n                options.align = TextAlignEnum.Right;\n            else\n                options.align = TextAlignEnum.Left;\n        }\n\n        //#region Validation\n        if (options.validation == null) options.validation = new TextBoxValidationSettings();\n        if (options.validation.error == null) options.validation.error = TextBoxValidationErrorEnum.Flashing;\n        if (options.validation.minValue == null) options.validation.minValue = Number.MIN_SAFE_INTEGER;\n        if (options.validation.maxValue == null) options.validation.maxValue = Number.MAX_SAFE_INTEGER;\n\n        if (options.validation.minLength == null) options.validation.minLength = new TextBoxLengthSettings();\n        if (typeof (options.validation.minLength) == \"number\")\n        {\n            let minLength = options.validation.minLength;\n            options.validation.minLength = new TextBoxLengthSettings();\n            options.validation.minLength.value = minLength;\n        }\n        if (options.validation.minLength.substituteChar == null) options.validation.minLength.substituteChar = \"X\";\n\n        if (options.validation.maxLength == null) options.validation.maxLength = new TextBoxLengthSettings();\n        if (typeof (options.validation.maxLength) == \"number\")\n        {\n            let maxLength = options.validation.maxLength;\n            options.validation.maxLength = new TextBoxLengthSettings();\n            options.validation.maxLength.value = maxLength;\n        }\n\n        if (options.validation.regex != null)\n        {\n            if (typeof (options.validation.regex) == \"string\") \n            {\n                let value = options.validation.regex;\n                options.validation.regex = new TextBoxRegexSettings();\n                options.validation.regex.value = value;\n            }\n\n            if (options.validation.regex.checkOnKeyUp == null && options.validation.regex.checkOnValue == null\n                && options.validation.regex.checkOnKeyDown == null && options.validation.regex.checkOnBlur == null)\n                options.validation.regex.checkOnKeyDown = true;\n\n            if (options.validation.regex.value == null)\n            {\n                if (options.validation.regex.onlyNumbers === true)\n                    options.validation.regex.value = \"^\\\\d*$\";\n                else if (options.validation.regex.onlyCharacters === true)\n                    options.validation.regex.value = \"^[a-zA-Z]+$\";\n                else if (options.validation.regex.onlyUpperCase === true)\n                    options.validation.regex.value = \"^[A-Z]+$\";\n                else if (options.validation.regex.onlyLowerCase === true)\n                    options.validation.regex.value = \"^[a-z]+$\";\n            }\n        }\n        //#endregion\n\n        //#region Mode\n        switch (options.mode)\n        {\n            case TextModeEnum.Text: puma(element).attr(\"type\", \"text\"); break;\n            case TextModeEnum.Link: puma(element).attr(\"type\", \"url\"); break;\n            case TextModeEnum.Phone: puma(element).attr(\"type\", \"tel\"); break;\n            case TextModeEnum.Search: puma(element).attr(\"type\", \"search\"); break;\n            case TextModeEnum.Mail: puma(element).attr(\"type\", \"email\"); break;\n            case TextModeEnum.Password: puma(element).attr(\"type\", \"password\"); break;\n            case TextModeEnum.PasswordViewable: puma(element).attr(\"type\", \"text\"); break;\n            case TextModeEnum.Numeric:\n            case TextModeEnum.Percentage:\n            case TextModeEnum.Currency:\n                puma(element).attr(\"type\", \"number\");\n                break;\n            case TextModeEnum.MultiLine:\n                {\n                    let textArea = document.createElement(\"textarea\");\n                    textArea.id = element.id;\n                    puma(textArea).addClass(\"vrTextArea\");\n                    puma(textArea).attr(\"autocomplete\", options.autocomplete);\n\n                    //#region Rows for height\n                    if (options.height == null)\n                        puma(textArea).height(38 + (20 * (options.rows - 1)));\n                    //#endregion\n\n                    textArea.style.cssText += \"-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;\";\n                    textArea.style.cssText += \"border-radius: 4px; border-color: #d9d9d9; font-size: 16px; color: #000; padding: 5px; padding-left: 10px; padding-right: 10px; resize: none;\";\n\n                    puma(element).vrAfterPuma(textArea);\n                    puma(element).hide();\n                    element = textArea;\n                }\n                break;\n        }\n\n        if (!DeviceManager.isMobile() && options.mode != TextModeEnum.Password)\n            puma(element).attr(\"type\", \"text\");\n\n        puma(element).attr(\"autocomplete\", options.autocomplete);\n        //#endregion\n\n        element.style.cssText += \"padding-left: 10px; padding-right: 10px;\";\n        super(element, options, ControlTypeEnum.TextBox);\n        this._numberValue = null;\n\n        //#region Password Viewable\n        if (options.mode == TextModeEnum.PasswordViewable)\n        {\n            this.viewPassword(false);\n            this._passwordViewableIcon = icon(IconClassicLight.EyeSlash, this.container(), { css: \"position: absolute; right: 5px; bottom: 7px; font-size: 14px; opacity: 0.8; cursor: pointer;\" })\n            puma(this._passwordViewableIcon).on(\"click\", (e: JQuery.ClickEvent) =>\n            {\n                this.viewPassword(this.viewPassword());\n            });\n        }\n        //#endregion\n\n        if (options.height != null && options.mode == TextModeEnum.MultiLine)\n            puma(this.element()).height(Number(options.height) - 12);\n\n        this._originalHeight = puma(this.element()).outerHeight();\n        this._originalMarginBottom = puma(this.container()).css(\"margin-bottom\").getNumericPart();\n\n        //#region Text/Placeholder & Max/Min Length\n        if (options.value != null)\n            this.value(options.value, false);\n\n        if (options.placeholder != null)\n            this.placeholder(options.placeholder);\n\n        if (options.validation.minLength != null)\n            puma(this.element()).attr(\"minlength\", options.validation.minLength.value);\n\n        if (options.validation.maxLength != null)\n            puma(this.element()).attr(\"maxlength\", options.validation.maxLength.value);\n        //#endregion\n\n        //#region Tooltip\n        if (options.tooltip != null)\n            puma(this.element()).attr(\"title\", options.tooltip);\n        //#endregion\n\n        //#region Enable/Readonly\n        if (options.readOnly === true)\n            puma(this.element()).attr(\"readonly\", \"readonly\");\n\n        if (options.readOnly === true || options.enable === false)\n            puma(this.element()).attr(\"tabIndex\", \"-1\");\n        //#endregion\n\n        //#region Bold\n        if (options.bold === true)\n            this.element().style.cssText += \"font-weight: 500;\";\n        //#endregion\n\n        //#region Align and Input mode\n        puma(this.element()).css(\"text-align\", options.align);\n        puma(this.element()).css(\"text-transform\", options.inputMode);\n        //#endregion\n\n        //#region Icon/ImageUrl\n        if (options.icon != null)\n        {\n            puma(this.element()).vrBeforePuma(\"<i class='\" + options.icon + \"' style='position: absolute; margin-left: 6px; color: #A9A9A9;'></i>\");\n            this.element().style.cssText += \"text-indent: 15px;\";\n        }\n        else if (options.imageUrl != null)\n            this.element().style.cssText += \"background-image: url(\" + options.imageUrl + \"); background-position: 4px 5px; background-repeat: no-repeat; text-indent: 13px;\";\n\n        if (options.mode != TextModeEnum.MultiLine && options.label != null && options.labelSettings!.position == PositionEnum.Top && (options.icon == null || options.imageUrl == null))\n            this.element().style.cssText += \"padding-left: 0px !important; width: calc(100% - 12px) !important;\";\n        //#endregion\n\n        //#region Events\n        puma(this.element()).keyup((e: JQuery.KeyUpEvent) =>\n        {\n            if (this._keyDownCanceled)\n            {\n                e.preventDefault();\n                return;\n            }\n\n            let value = puma(e.currentTarget).val();\n            this.autoSize();\n\n            if (e.key != KeyEnum.Tab)\n            {\n                let validateRegex = (options!.validation!.regex != null && (options!.validation!.regex as TextBoxRegexSettings).checkOnKeyUp);\n                this.validate(value, false, validateRegex);\n            }\n\n            if (options!.onKeyUp != null)\n            {\n                let event = new TextBoxKeyUpEvent();\n                event.sender = this;\n                event.value = (this.isNumericTextBox()) ? this._numberValue : value;\n                event.key = e.key;\n                event.shiftKey = e.key == KeyEnum.Shift;\n                event.altKey = e.key == KeyEnum.ArrowLeft;\n                event.ctrlKey = e.key == KeyEnum.Control;\n                event.enterKey = e.key == KeyEnum.Enter;\n                event.backSpaceKey = e.key == KeyEnum.Backspace;\n                event.tabKey = e.key == KeyEnum.Tab;\n\n                let validForNumeric = [\",\", \".\", \"-\", \"+\"];\n                event.validForNumeric = (!isNaN(Number(e.key)) || validForNumeric.includes(e.key));\n                options!.onKeyUp(event);\n\n                if (event.isDefaultPrevented())\n                    e.preventDefault();\n            }\n        });\n\n        puma(this.element()).keydown((e: KeyboardEvent) =>\n        {\n            puma(this.element()).removeClass(\"errorInput\");\n            this._keyDownCanceled = false;\n            if (this._hideErrorMode == ErrorHideModeEnum.OnAction)\n                this.hideError();\n\n            //#region Check\n            if (e.key != KeyEnum.Backspace && e.key != KeyEnum.ArrowRight && e.key != KeyEnum.ArrowLeft\n                && e.key != KeyEnum.ArrowUp && e.key != KeyEnum.ArrowDown && e.key != KeyEnum.Tab)\n            {\n                if (this.isNumericTextBox() && isNaN(Number(e.key)) && e.key != \"-\" && e.key != \".\" && e.key != \",\" && !e.ctrlKey)\n                {\n                    UtilityManager.interval(() => puma(this.element()).toggleClass(\"errorInput\"), 200, 800, () => puma(this.element()).removeClass(\"errorInput\"));\n                    e.preventDefault();\n                    return;\n                }\n\n                if (options!.validation!.regex != null\n                    && (options!.validation!.regex as TextBoxRegexSettings).value != null\n                    && (options!.validation!.regex as TextBoxRegexSettings).value != \"\"\n                    && (options!.validation!.regex as TextBoxRegexSettings).checkOnKeyDown)\n                {\n                    let regex = new RegExp((options!.validation!.regex as TextBoxRegexSettings).value!, (options!.validation!.regex as TextBoxRegexSettings).flags);\n                    if (!regex.test(e.key))\n                    {\n                        UtilityManager.interval(() => puma(this.element()).toggleClass(\"errorInput\"), 200, 800, () => puma(this.element()).removeClass(\"errorInput\"));\n                        e.preventDefault();\n                        return;\n                    }\n                }\n            }\n            //#endregion\n\n            if (options!.onEnterKey != null && e.key == KeyEnum.Enter)\n            {\n                let enterKeyEvent = new TextBoxEnterKeyEvent();\n                enterKeyEvent.sender = this;\n                enterKeyEvent.value = this.value();\n                options!.onEnterKey(enterKeyEvent);\n            }\n\n            if (options!.onKeyDown != null)\n            {\n                let event = new TextBoxKeyDownEvent();\n                event.sender = this;\n                event.key = e.key;\n                event.shiftKey = e.shiftKey;\n                event.altKey = e.altKey;\n                event.ctrlKey = e.ctrlKey;\n                event.enterKey = e.key == KeyEnum.Enter;\n                event.backSpaceKey = e.key == KeyEnum.Backspace;\n                event.tabKey = e.key == KeyEnum.Tab;\n\n                let value = puma(e.currentTarget).val();\n                event.value = (this.isNumericTextBox()) ? this._numberValue : value;\n\n                let validForNumeric = [\",\", \".\", \"-\", \"+\"];\n                event.validForNumeric = (!isNaN(Number(e.key)) || validForNumeric.includes(e.key));\n                options!.onKeyDown(event);\n\n                if (event.isDefaultPrevented())\n                {\n                    this._keyDownCanceled = true;\n                    e.preventDefault();\n                }\n            }\n        });\n\n        puma(this.element()).focusin((e: JQuery.FocusInEvent) =>\n        {\n            puma(this.element()).removeClass(\"errorInput\");\n            if (this._hideErrorMode == ErrorHideModeEnum.OnFocus)\n                this.hideError();\n\n            if (this.isNumericTextBox())\n            {\n                let value = \"\";\n                if (this._numberValue != null)\n                    value = this.formatValue(String(this._numberValue));\n\n                (this.element() as HTMLInputElement).value = value;\n                puma(this.element()).select();\n            }\n\n            if (options!.onFocus != null)\n            {\n                let event = new TextBoxFocusEvent();\n                event.sender = this;\n                options!.onFocus(event);\n            }\n        });\n\n        puma(this.element()).blur((e: JQuery.BlurEvent) =>\n        {\n            let options = this.getOptions();\n\n            if (this.isNumericTextBox())\n                this.value(this._numberValue);\n            else\n            {\n                let validateRegex = (options!.validation!.regex != null && (options!.validation!.regex as TextBoxRegexSettings).checkOnBlur);\n                let realValue = this.validate(undefined, true, validateRegex);\n                (this.element() as HTMLInputElement).value = realValue;\n            }\n\n            if (options!.onBlur != null)\n            {\n                let event = new TextBoxBlurEvent();\n                event.sender = this;\n                event.target = e.target;\n                event.relatedTarget = e.relatedTarget;\n                event.value = this.value();\n                options!.onBlur(event);\n            }\n        });\n\n        puma(this.element()).on(\"paste\", (e: any) =>\n        {\n            let pastedValue = e.originalEvent.clipboardData.getData(\"text\");\n\n            if (options!.onPaste != null)\n            {\n                let event = new TextBoxPasteEvent();\n                event.sender = this;\n                event.pastedValue = pastedValue;\n                event.value = this.value() + pastedValue;\n                options!.onPaste(event);\n            }\n        })\n        //#endregion\n    }\n\n    //#region Methods\n\n    //#region Text/Placeholder\n    value<T extends string | number | null>(value?: string | number | null, triggerChange: boolean = true): T\n    {\n        let options = this.options<TextBoxOptions>();\n        if (value === null)\n        {\n            if (options.nullable)\n            {\n                this._numberValue = null;\n                (this.element() as HTMLInputElement).value = \"\";\n                return <T>null;\n            }\n            else if (this.isNumericTextBox())\n                value = 0;\n        }\n\n        if (value != null)\n        {\n            let validateRegex = (options!.validation!.regex != null && (options!.validation!.regex as TextBoxRegexSettings).checkOnValue);\n            let realValue = this.validate(String(value), true, validateRegex);\n            (this.element() as HTMLInputElement).value = realValue;\n            this.autoSize();\n\n            if (triggerChange)\n                this.change();\n\n            this._oldValue = (this.isNumericTextBox()) ? UtilityManager.duplicate(this._numberValue) : (this.element() as HTMLInputElement).value;\n        }\n\n        if (this.isNumericTextBox())\n            return <T>this._numberValue;\n        else\n            return <T>(this.element() as HTMLInputElement).value;\n    }\n\n    private validate(value?: string, format = true, validateRegex = false)\n    {\n        let options = this.getOptions();\n        puma(this.element()).removeClass(\"errorInput\");\n\n        if (value == null) value = String(this.value());\n        let realValue = value;\n\n        let error = false;\n        let numericValue: number | null = 0;\n        if (this.isNumericTextBox())\n        {\n            if (value == \"\")\n                this._numberValue = null;\n            else\n            {\n                let isNegative = value.startsWith(\"-\");\n                value = value.replace(\",\", \".\");\n\n                if (value.includes(\"e-\"))\n                    numericValue = Number(value);\n                else\n                    numericValue = value.vrGetNumericPart();\n\n                //#region Min/Max value\n                if (format && numericValue < options.validation!.minValue!)\n                {\n                    numericValue = options.validation!.minValue!;\n                    error = true;\n                }\n\n                if (numericValue! > options.validation!.maxValue!)\n                {\n                    numericValue = options.validation!.maxValue!;\n                    error = true;\n                }\n                //#endregion\n\n                if (isNaN(Number(numericValue)))\n                {\n                    if (isNegative)\n                        numericValue = null;\n                    else\n                    {\n                        numericValue = 0;\n                        error = true;\n                    }\n                }\n\n                this._numberValue = numericValue;\n            }\n        }\n\n        //#region Zeros\n        if (options.zeros != null)\n            realValue = String(realValue).padStart(options.zeros, \"0\");\n        //#endregion\n\n        //#region Min/Max length\n        if (options.validation!.minLength != null)\n        {\n            let minLengthSettings = (options.validation!.minLength as TextBoxLengthSettings);\n            if (format && realValue.length < minLengthSettings.value)\n            {\n                realValue = realValue.padEnd(minLengthSettings.value, minLengthSettings.substituteChar);\n                error = true;\n            }\n        }\n\n        if (options.validation!.maxLength != null)\n        {\n            let maxLengthSettings = (options.validation!.maxLength as TextBoxLengthSettings);\n            if (realValue.length > maxLengthSettings.value)\n            {\n                realValue = realValue.substring(0, maxLengthSettings.value);\n                error = true;\n            }\n        }\n        //#endregion\n\n        //#region Regex\n        if (validateRegex\n            && (options!.validation!.regex as TextBoxRegexSettings).value != null\n            && (options!.validation!.regex as TextBoxRegexSettings).value != \"\"\n            && value != \"\" && value != null)\n        {\n            let regex = new RegExp((options!.validation!.regex as TextBoxRegexSettings).value!, (options!.validation!.regex as TextBoxRegexSettings).flags);\n            if (!regex.test(value))\n            {\n                realValue = \"\";\n                error = true;\n            }\n        }\n        //#endregion\n\n        if (this.isNumericTextBox())\n            realValue = (format) ? this.formatValue(String(numericValue)) : String(numericValue);\n\n        if (error)\n        {\n            switch (options.validation!.error)\n            {\n                case TextBoxValidationErrorEnum.None: { } break;\n                case TextBoxValidationErrorEnum.Flashing: UtilityManager.interval(() => puma(this.element()).toggleClass(\"errorInput\"), 200, 800, () => puma(this.element()).removeClass(\"errorInput\")); break;\n                case TextBoxValidationErrorEnum.Stable: puma(this.element()).addClass(\"errorInput\"); break;\n            }\n        }\n        return realValue;\n    }\n\n    placeholder(value?: string): string\n    {\n        if (value != null)\n            (this.element() as HTMLInputElement).placeholder = value;\n\n        return (this.element() as HTMLInputElement).placeholder;\n    }\n    //#endregion\n\n    type(type: TextModeEnum): void\n    {\n        let options = this.getOptions();\n        options.mode = type;\n\n        if (options.decimals == null) \n        {\n            if (options.mode == TextModeEnum.Numeric)\n                options.decimals = 0;\n            else if (options.mode == TextModeEnum.Currency || options.mode == TextModeEnum.Percentage)\n                options.decimals = 2;\n        }\n\n        if (options.align == null) \n        {\n            if (options.mode == TextModeEnum.Numeric || options.mode == TextModeEnum.Percentage || options.mode == TextModeEnum.Currency)\n                options.align = TextAlignEnum.Right;\n            else\n                options.align = TextAlignEnum.Left;\n        }\n    }\n\n    getOptions(): TextBoxOptions\n    {\n        return this.options<TextBoxOptions>();\n    }\n\n    clear(triggerChange = false): void\n    {\n        let options = this.getOptions();\n        if (options.nullable && this.isNumericTextBox())\n            this.value(null, false);\n        else\n        {\n            this._numberValue = null;\n            (this.element() as HTMLInputElement).value = \"\";\n        }\n\n        if (triggerChange)\n            this.change();\n    }\n\n    isEmpty(): boolean\n    {\n        if (this.isNumericTextBox())\n            return this._numberValue == null;\n        else\n            return (this.element() as HTMLInputElement).value === \"\";\n    }\n\n    private autoSize()\n    {\n        let options = this.getOptions();\n        if (options.growWithContent === true && options.mode == TextModeEnum.MultiLine)\n        {\n            let heightContainer = this.element().clientHeight;\n            if (options.labelSettings != null && (options.labelSettings.position == PositionEnum.Top || options.labelSettings.position == PositionEnum.Bottom))\n                heightContainer += puma(this.container()).find(\".vrLabelContainer\").height();\n\n            this.element().style.height = \"1px\";\n            this.container().style.height = heightContainer + \"px\";\n            let newHeight = 25 + this.element().scrollHeight;\n            if (newHeight > this._originalHeight)\n                this.element().style.height = (25 + this.element().scrollHeight) + \"px\";\n            else\n                this.element().style.height = this._originalHeight + \"px\";\n\n            this.container().style.height = \"auto\";\n        }\n    }\n\n    private isNumericTextBox(): boolean\n    {\n        let options = this.options<TextBoxOptions>();\n        let mode = options.mode;\n        return (mode == TextModeEnum.Numeric || mode == TextModeEnum.Percentage || mode == TextModeEnum.Currency);\n    }\n\n    viewPassword(state?: boolean)\n    {\n        if (state != null)\n        {\n            puma(this._passwordViewableIcon).removeClass(IconClassicLight.EyeSlash);\n            puma(this._passwordViewableIcon).removeClass(IconClassicLight.Eye);\n\n            if (state) \n            {\n                puma(this.element()).removeClass(\"noViewablePassword\");\n                puma(this._passwordViewableIcon).addClass(IconClassicLight.Eye);\n            }\n            else \n            {\n                puma(this.element()).addClass(\"noViewablePassword\");\n                puma(this._passwordViewableIcon).addClass(IconClassicLight.EyeSlash);\n            }\n        }\n        return this.element().classList.contains(\"noViewablePassword\");\n    }\n\n    //#region Caret\n    caretPosition()\n    {\n        return (this.element() as HTMLInputElement).selectionStart!;\n    }\n\n    insertTextAtCursor(text: string)\n    {\n        this.appendText(text, this.caretPosition());\n    }\n\n    insertTextAtPosition(text: string, position: number)\n    {\n        this.appendText(text, position);\n    }\n\n    appendText(text: string, position?: number)\n    {\n        let element = this.element() as HTMLInputElement;\n        if (position == null)\n            position = element.value.length;\n\n        this.value(element.value.substring(0, position)\n            + text\n            + element.value.substring(element.selectionEnd!, element.value.length));\n\n        element.selectionStart = this.caretPosition() + text.length;\n        element.selectionEnd = this.caretPosition() + text.length;\n        this.focus();\n    }\n    //#endregion\n\n    //#region Error management\n    error(text?: string, mode?: ErrorModeEnum, position?: ErrorPositionEnum, hideMode?: ErrorHideModeEnum): void\n    {\n        let options = this.options<TextBoxOptions>();\n        if (mode == null) mode = ErrorModeEnum.Tooltip;\n        if (position == null) position = ErrorPositionEnum.Right;\n        if (hideMode == null) hideMode = ErrorHideModeEnum.OnAction;\n        if (text == null) text = \"\";\n\n        puma(this.element()).addClass(\"vrTextBoxError\");\n        this._hideErrorMode = hideMode;\n\n        let errorIcon = puma(this.container()).find(\".vrTextBoxErrorIcon\")[0];\n        if (errorIcon == null)\n            errorIcon = puma(\"<i class='\" + IconClassicLight.TriangleExclamation + \" vrTextBoxErrorIcon'></i>\").vrInsertAfterPuma(this.element())[0];\n\n        puma(errorIcon).hide();\n\n        if (this.label() != null)\n            errorIcon.style.cssText += \"top: 24px;\";\n        else\n            errorIcon.style.cssText += \"top: 5px;\";\n\n        if (mode == ErrorModeEnum.Tooltip)\n        {\n            //#region Tooltip\n            let spanError = puma(\"<span class='vrTextBoxErrorTooltip vrErrorTooltip'>\" + text + \"</span>\").vrAppendToPuma(errorIcon);\n            if (position == ErrorPositionEnum.Right)\n                puma(spanError).addClass(\"vrTextBoxErrorTooltipRight\");\n            else if (position == ErrorPositionEnum.Bottom)\n            {\n                puma(spanError).addClass(\"vrTextBoxErrorTooltipBottom\");\n                puma(errorIcon).hover(() => \n                {\n                    if (text == \"\")\n                        puma(spanError).hide();\n                    else\n                        puma(spanError)[0].style.cssText += \"display: inline-block; left: -\" + ((puma(spanError).outerWidth() / 2) - 7) + \"px;\"\n                });\n            }\n            //#endregion\n        }\n        else if (mode == ErrorModeEnum.Overlay)\n        {\n            //#region Overlay\n            let spanError = puma(this.container()).find(\".vrTextBoxErrorOverlay\")[0];\n            if (spanError == null)\n                spanError = puma(\"<span class='vrTextBoxErrorOverlay'>\" + text + \"</span>\").vrInsertAfterPuma(this.element())[0];\n            puma(spanError).show();\n\n            if (position == ErrorPositionEnum.Right)\n                puma(spanError).addClass(\"vrTextBoxErrorOverlayRight\");\n            else if (position == ErrorPositionEnum.Bottom)\n            {\n                let labelWidth = (options.label != null && (options.labelSettings!.position == PositionEnum.Left || options.labelSettings!.position == PositionEnum.Right)) ? puma(this.label()).width() : 0;\n                puma(spanError).addClass(\"vrTextBoxErrorOverlayBottom\");\n                puma(spanError)[0].style.cssText += \"left: Calc(50% - \" + ((puma(spanError).width() / 2) - (labelWidth / 2)) + \"px);\";\n            }\n\n            puma(spanError).html(text);\n            //#endregion\n        }\n        else if (mode == ErrorModeEnum.Solid)\n        {\n            //#region Solid\n            let spanError = puma(this.container()).find(\".vrTextBoxErrorSolid\")[0];\n            if (spanError == null)\n                spanError = puma(\"<span class='vrTextBoxErrorSolid'>\" + text + \"</span>\").vrInsertAfterPuma(this.element())[0];\n            puma(spanError).show();\n\n            position = ErrorPositionEnum.Bottom;\n            puma(spanError).addClass(\"vrTextBoxErrorSolidBottom\");\n            puma(spanError).html(text);\n\n            let labelWidth = (options.label != null && (options.labelSettings!.position == PositionEnum.Left || options.labelSettings!.position == PositionEnum.Right)) ? puma(this.label()).width() : 0;\n            puma(spanError)[0].style.cssText += \"left: Calc(50% - \" + ((puma(spanError).width() / 2) - (labelWidth / 2)) + \"px);\";\n            puma(this.container())[0].style.cssText += \"margin-bottom: \" + (puma(spanError).height() + 20) + \"px;\";\n            //#endregion\n        }\n    }\n\n    hideError(): void\n    {\n        if (puma(this.element()).hasClass(\"vrTextBoxError\"))\n        {\n            puma(this.element()).removeClass(\"vrTextBoxError\");\n            puma(this.container()).find(\".vrTextBoxErrorIcon\").hide();\n            puma(this.container()).find(\".vrTextBoxErrorTooltip\").hide();\n            puma(this.container()).find(\".vrTextBoxErrorOverlay\").hide();\n            puma(this.container()).find(\".vrTextBoxErrorSolid\").hide();\n            puma(this.container()).css({ \"margin-bottom\": this._originalMarginBottom + \"px\" });\n        }\n    }\n\n    hasError()\n    {\n        return (puma(this.element()).hasClass(\"vrTextBoxError\"));\n    }\n\n    private formatValue(value: string)\n    {\n        let options = this.getOptions();\n\n        let decimals = options.decimals;\n        let formatSettings = new NumberFormatSettings(options.roundingSettings);\n        formatSettings.minimumFractionDigits = decimals;\n        formatSettings.maximumFractionDigits = decimals;\n\n        if (options.roundingSettings != null)\n        {\n            if (options.roundingSettings.minimumFractionDigits != null) formatSettings.minimumFractionDigits = options.roundingSettings.minimumFractionDigits;\n            if (options.roundingSettings.maximumFractionDigits != null) formatSettings.maximumFractionDigits = options.roundingSettings.maximumFractionDigits\n\n            if (options.roundingSettings.roundingMode == RoundingModeEnum.None)\n            {\n                if (options.roundingSettings.maximumFractionDigits == null)\n                    formatSettings.maximumFractionDigits = 8;\n            }\n        }\n\n        switch (options.mode)\n        {\n            case TextModeEnum.Numeric: value = Number(value).toFixed(decimals); break;\n            case TextModeEnum.Currency: value = Number(value).vrToCurrencyString(formatSettings); break;\n            case TextModeEnum.Percentage: value = (Number(value) / 100).vrToPercentageString(formatSettings); break;\n        }\n        return value;\n    }\n    //#endregion\n\n    //#endregion\n\n    //#region Events\n    change(): void\n    {\n        let changeCallBack = this.options<TextBoxOptions>().onChanged;\n        if (changeCallBack != null)\n        {\n            let changeEvent = new TextBoxChangeEvent();\n            changeEvent.sender = this;\n            changeEvent.value = this.value();\n            changeEvent.oldValue = this._oldValue;\n            changeCallBack(changeEvent);\n        }\n    }\n    //#endregion\n}\n\nexport class TextBoxMultiline extends TextBox { }\nexport class TextBoxNumeric extends TextBox { }\nexport class TextBoxPassword extends TextBox { }\nexport class TextBoxCurrency extends TextBox { }\nexport class TextBoxPercentage extends TextBox { }\n//#endregion\n\n//#region EventClasses\nexport class TextBoxEvent extends VrControlsEvent\n{\n    sender: TextBox;\n    value: string | number | null;\n}\n\nclass TextBoxChangeEvent extends TextBoxEvent\n{\n    oldValue: string | number | null;\n}\n\nclass TextBoxFocusEvent extends TextBoxEvent\n{\n}\n\nclass TextBoxBlurEvent extends TextBoxEvent\n{\n    target: HTMLElement;\n    relatedTarget?: EventTarget | null;\n}\n\nclass TextBoxPasteEvent extends TextBoxEvent\n{\n    pastedValue: string;\n}\n\nclass TextBoxKeyUpPressEvent extends TextBoxEvent\n{\n    key: string;\n    shiftKey: boolean;\n    altKey: boolean;\n    ctrlKey: boolean;\n    enterKey: boolean;\n    backSpaceKey: boolean;\n    tabKey: boolean;\n}\n\nclass TextBoxKeyUpEvent extends TextBoxKeyUpPressEvent\n{\n    validForNumeric: boolean;\n}\n\nclass TextBoxKeyDownEvent extends TextBoxKeyUpPressEvent\n{\n    validForNumeric: boolean;\n}\n\nclass TextBoxEnterKeyEvent extends TextBoxEvent\n{\n}\n//#endregion"],"names":["options"],"mappings":"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"}