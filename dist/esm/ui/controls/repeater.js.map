{"version":3,"file":"repeater.js","sources":["../../../../src/ui/controls/repeater.ts"],"sourcesContent":["import { VrControlOptions, VrControl } from \"../common\";\nimport { ControlTypeEnum, GridToolbarItem, GridHeightModeEnum, GridCheckboxModeEnum, GridModeEnum, createGrid, GridColumnTypeEnum, puma, GridAlignEnum, createLabel, TextAlignEnum, GridSortDirectionEnum, GridGroupBySettings, ControlPositionEnum, GridGroupByItem, GridSortSettings, GridPageSelectedEvent, GridScrollEvent, GridBeforeExcelExportEvent, GridAfterExcelExportEvent } from \"../vr\";\nimport { GridRebindRequest, GridFooterSettings, GridOnDataBoundEvent, GridOnRowDataBoundEvent, GridSelectRowEvent, GridSelectAllRowsEvent, GridUnselectRowEvent, GridUnselectAllRowsEvent, GridTemplateEvent, GridCustomSettings, Grid, GridFilterSettings, GridRow, GridPageSettings } from \"./grid\";\nimport { Button } from \"./button\";\nimport { SplitButton } from \"./splitButton\";\nimport { Switch } from \"./switch\";\nimport { UtilityManager } from \"../../../src/managers/utilityManager\";\n\n//#region Options\nexport class RepeaterOptions extends VrControlOptions\n{\n    toolbar?: GridToolbarItem[];\n    declare height?: string | number | GridHeightModeEnum;\n    dataSource?: any[];\n    rebind?: GridRebindRequest;\n    checkboxes?: boolean | GridCheckboxModeEnum;\n    dataSourceFieldId?: string;\n    rowHeight?: number;\n    hideEditButton?: boolean;\n    mode?: GridModeEnum;\n    filterable?: boolean;\n    pageSize?: number | boolean | GridPageSettings;\n    footer?: boolean | GridFooterSettings;\n    padding?: number | PaddingSettings;\n    alternateRowColors?: boolean | string;\n    hoverRowColor?: boolean;\n    customFilterProperties?: string[];\n    emptyMessage?: string;\n    groupBy?: string[] | GridGroupBySettings | null;\n    title?: string | boolean;\n    groupable?: boolean;\n    rowColorProperty?: string;\n    rowTextColorProperty?: string;\n\n    template?: (templateEvent: GridTemplateEvent) => string;\n    onDataSourceChanged?: () => void;\n    onDataBound?: (e: GridOnDataBoundEvent) => void;\n    onRowDataBound?: (e: RepeaterOnRowDataBoundEvent) => void | string;\n    onSelectRow?: (e: GridSelectRowEvent) => void;\n    onSelectAllRows?: (e: GridSelectAllRowsEvent) => void;\n    onPageSelected?: (e: GridPageSelectedEvent) => void;\n    onScroll?: (e: GridScrollEvent) => void;\n    onBeforeExcelExport?: (e: GridBeforeExcelExportEvent) => void;\n    onAfterExcelExport?: (e: GridAfterExcelExportEvent) => void;\n}\n//#endregion\n\n//#region Control\nexport class Repeater extends VrControl\n{\n    private _grid: Grid;\n\n    constructor(element: HTMLElement, options?: RepeaterOptions | null)\n    {\n        //#region Options\n        if (options == null)\n            options = new RepeaterOptions();\n\n        options.hideEditButton = true;\n        if (options.pageSize == null) options.pageSize = false;\n        if (options.alternateRowColors == null) options.alternateRowColors = true;\n\n        if (options.footer == null || options.footer === true) options.footer = new GridFooterSettings();\n        if (options.footer !== false)\n        {\n            if (options.footer.showPagination == null) options.footer.showPagination = true;\n            if (options.footer.showSettings == null) options.footer.showSettings = false;\n            if (options.pageSize === false) options.pageSize = 50;\n        }\n\n        if (options.padding == null) options.padding = 10;\n        if (typeof (options.padding) != \"number\")\n        {\n            if (options.padding.left == null) options.padding.left = 10;\n            if (options.padding.top == null) options.padding.top = 10;\n            if (options.padding.right == null) options.padding.right = 10;\n            if (options.padding.bottom == null) options.padding.bottom = 10;\n        }\n\n        if (options.emptyMessage == null) options.emptyMessage = \"Nessun risultato\";\n        if (options.title == null) options.title = false;\n        if (options.title === true) options.title = \"\";\n        //#endregion\n\n        let internalHeight = UtilityManager.duplicate(options.height);\n        options.height = undefined;\n\n        let datasource = options.dataSource;\n        options.dataSource = undefined;\n\n        super(element, options, ControlTypeEnum.Repeater);\n\n        this.container().id = this.container().id + \"_Repeater\";\n\n        //#region Repeater\n        this._grid = createGrid(\n            {\n                addToControlList: options.addToControlList,\n                toolbar: options.toolbar,\n                classContainer: \"vrRepeaterContainer\",\n                columns: [\n                    {\n                        field: \"custom\" + this.element().id, type: GridColumnTypeEnum.Custom, cellSettings: { textAlign: GridAlignEnum.Left },\n                        filterable: true, customFilterProperties: options.customFilterProperties, fitSpace: true, title: (options.title !== false) ? options.title : \"\",\n                        customSettings: (e) =>\n                        {\n                            //#region Padding\n                            if (typeof (options!.padding) == \"number\")\n                                e.element!.style.cssText += \"padding: \" + options!.padding + \"px;\";\n                            else\n                                e.element!.style.cssText += \"padding-left: \" + options!.padding!.left + \"px; padding-top: \" + options!.padding!.top + \"px; padding-right: \" + options!.padding!.right + \"px; padding-bottom: \" + options!.padding!.bottom + \"px;\";\n                            //#endregion\n\n                            if (options!.template != null)\n                                return { template: options!.template(e) };\n                            else\n                                return undefined;\n                        }\n                    }\n                ],\n                height: internalHeight,\n                rebind: options.rebind,\n                checkboxes: options.checkboxes,\n                dataSourceFieldId: options.dataSourceFieldId,\n                rowHeight: options.rowHeight,\n                hideEditButton: options.hideEditButton,\n                mode: options.mode,\n                filterable: options.filterable,\n                pageSize: options.pageSize,\n                footer: options.footer,\n                header: options.title !== false,\n                alternateRowColors: options.alternateRowColors,\n                hoverRowColor: options.hoverRowColor,\n                multilineRows: true,\n                resizable: false,\n                reorderable: false,\n                groupable: true,\n                rowColorProperty: options.rowColorProperty,\n                rowTextColorProperty: options.rowTextColorProperty,\n                groupBy: options.groupBy,\n                layoutSettings: false,\n                tooltip: false,\n                onDataSourceChanged: options.onDataSourceChanged,\n                onDataBound: options.onDataBound,\n                onRowDataBound: (e) =>\n                {\n                    //#region Empty\n                    puma(this.element()).find(\".toRemove\").parent().remove();\n                    if (e.empty)\n                    {\n                        puma(e.rowElement).empty();\n                        createLabel(\n                            {\n                                text: options!.emptyMessage,\n                                fontSize: 14,\n                                width: \"100%\",\n                                align: TextAlignEnum.Center,\n                                class: \"toRemove\"\n                            }, puma(this.element()).find(\".grid_Body\"), ControlPositionEnum.Before);\n                        return;\n                    }\n                    //#endregion\n\n                    if (options!.onRowDataBound != null)\n                    {\n                        let event = new RepeaterOnRowDataBoundEvent();\n                        event.dataItem = e.dataItem;\n                        event.realDataItem = e.realDataItem;\n                        event.empty = e.empty;\n                        event.rowElement = e.rowElement;\n                        event.sender = e.sender;\n                        event.cell = puma(e.rowElement).find(\"td[field='custom\" + this.element().id + \"']\")[0];\n                        event.index = Number(e.rowElement.getAttribute(\"row\"));\n                        options!.onRowDataBound(event);\n                    }\n                },\n                onSelectRow: (e) =>\n                {\n                    if (options!.onSelectRow != null && !e.empty)\n                        options!.onSelectRow(e);\n                },\n                onSelectAllRows: options.onSelectAllRows,\n                onPageSelected: options.onPageSelected,\n                onScroll: options.onScroll,\n                onBeforeExcelExport: options.onBeforeExcelExport,\n                onAfterExcelExport: options.onAfterExcelExport\n            }, this.element());\n        //#endregion\n\n        if (datasource != null)\n            this._grid.dataSource(datasource);\n    }\n\n    //#region Methods\n    rebind(parameters?: any | null, keepInfo = true): any\n    {\n        let promise = new Promise<void>((callback: Function) =>\n        {\n            this._grid.rebind(parameters, false, keepInfo).then(() =>\n            {\n                if (callback != null)\n                    callback();\n            });\n        });\n        return promise;\n    }\n\n    rebindSpecificRows(itemIdList: number[], update = true)\n    {\n        this._grid.rebindSpecificRows(itemIdList, update);\n    }\n\n    clear()\n    {\n        this._grid.clear();\n    }\n\n    //#region Items\n    originalDataSource()\n    {\n        return this._grid.originalDataSource();\n    }\n\n    dataSource(dataItems?: any[], clearFilters = false)\n    {\n        return this._grid.dataSource(dataItems, clearFilters);\n    }\n\n    update(triggerDataBound = true, keepInfo = true)\n    {\n        this._grid.update(triggerDataBound, keepInfo);\n    }\n\n    updateRow(dataItem: any, rebind = true)\n    {\n        this._grid.updateRow(dataItem, rebind);\n    }\n\n    updateRows(dataItems: any[], rebind = true)\n    {\n        this._grid.updateRows(dataItems, rebind);\n    }\n\n    addRow(dataItem: any, rebind = true)\n    {\n        this._grid.addRow(dataItem, rebind);\n    }\n\n    addRows(dataItems: any[], rebind = true)\n    {\n        this._grid.addRows(dataItems, rebind);\n    }\n\n    deleteRow(dataItemId: any, rebind = false)\n    {\n        this._grid.deleteRow(dataItemId, rebind);\n    }\n\n    deleteRows(dataItemIdList: any[], rebind = false)\n    {\n        this._grid.deleteRows(dataItemIdList, rebind);\n    }\n\n    rows(): GridRow[]\n    {\n        return this._grid.rows();\n    }\n\n    getAllItems()\n    {\n        return this._grid.getAllItems();\n    }\n\n    getCheckedItems()\n    {\n        return this._grid.getCheckedItems();\n    }\n\n    getCheckedValues(): string[]\n    {\n        return this._grid.getCheckedValues();\n    }\n\n    getCheckedNumberValues(): number[]\n    {\n        return this._grid.getCheckedNumberValues();\n    }\n\n    getDeletedItems()\n    {\n        return this._grid.getDeletedItems();\n    }\n\n    getDeletedItemValues(key?: string)\n    {\n        return this._grid.getDeletedItemValues(key);\n    }\n    //#endregion\n\n    //#region Selection\n    clearSelection(triggerChange = true)\n    {\n        this._grid.clearSelection(triggerChange);\n    }\n\n    checkAllRows(triggerChange = true)\n    {\n        this._grid.checkAllRows(triggerChange);\n    }\n\n    unCheckAllRows(triggerChange = true)\n    {\n        this._grid.unCheckAllRows(triggerChange);\n    }\n\n    selectRowsByIndexes(indexes: number[], triggerChange = true)\n    {\n        this._grid.selectRowsByIndexes(indexes, triggerChange);\n    }\n\n    selectRowByIndex(index: number, triggerChange = true)\n    {\n        this._grid.selectRowByIndex(index, triggerChange);\n    }\n\n    selectRows(itemIdList: string[], property?: string, triggerChange = true)\n    {\n        this._grid.selectRows(itemIdList, property, triggerChange);\n    }\n\n    selectRow(itemId: string, triggerChange = true)\n    {\n        this._grid.selectRow(itemId, triggerChange);\n    }\n\n    unselectRows(itemIdList: string[], property?: string, triggerChange = true)\n    {\n        this._grid.unselectRows(itemIdList, property, triggerChange);\n    }\n\n    unselectRow(itemId: string)\n    {\n        this._grid.unselectRow(itemId);\n    }\n    //#endregion\n\n    //#region GroupBy\n    hasGroup()\n    {\n        return this._grid.hasGroup();\n    }\n\n    removeGroup(field: string, updateDataSource = true)\n    {\n        this.removeGroups([field], updateDataSource);\n    }\n\n    removeGroups(fields: string[], updateDataSource = true)\n    {\n        this._grid.removeGroups(fields, updateDataSource);\n    }\n\n    removeAllGroups(updateDataSource = true)\n    {\n        this._grid.removeAllGroups(updateDataSource);\n    }\n\n    addGroup(field: string | GridGroupByItem, updateDataSource = true, sortBy?: GridSortSettings, internalSortBy?: GridSortSettings)\n    {\n        this.addGroups([field], updateDataSource, sortBy, internalSortBy);\n    }\n\n    addGroups(fields: (string | GridGroupByItem)[], updateDataSource = true, sortBy?: GridSortSettings, internalSortBy?: GridSortSettings)\n    {\n        this._grid.addGroups(fields, updateDataSource, sortBy, internalSortBy);\n    }\n    //#endregion\n\n    //#region Sort\n    removeSort(updateDataSource = true)\n    {\n        this._grid.removeSort(updateDataSource);\n    }\n\n    sort(field: string, tableSortModeEnum?: GridSortDirectionEnum)\n    {\n        this._grid.sort(field, tableSortModeEnum);\n    }\n    //#endregion\n\n    //#region Filter\n    clearFilters(updateDataSource = true)\n    {\n        this._grid.clearFilters(updateDataSource);\n    }\n\n    addFilter(field: string, filterCondition: GridFilterSettings, applyFilters = true)\n    {\n        this._grid.addFilter(field, filterCondition, applyFilters);\n    }\n\n    removeFilter(field: string, applyFilters = true)\n    {\n        this._grid.removeFilter(field, applyFilters);\n    }\n\n    updateFilter(field: string, filterCondition: GridFilterSettings, applyFilters = true)\n    {\n        this._grid.updateFilter(field, filterCondition, applyFilters);\n    }\n    //#endregion\n\n    pageSelected(page?: number, update = true)\n    {\n        return this._grid.pageSelected(page, update);\n    }\n\n    //#region Height\n    height(height?: number | string)\n    {\n        return this._grid.height(height);\n    }\n\n    recalculateHeight(afterFilter = false)\n    {\n        this._grid.recalculateHeight(afterFilter);\n    }\n\n    recalculateWidth()\n    {\n        this._grid.recalculateWidth();\n    }\n    //#endregion\n\n    //#region Footer\n    visibleFooter(state?: boolean)\n    {\n        return this._grid.visibleFooter(state);\n    }\n\n    showFooter()\n    {\n        this._grid.showFooter();\n    }\n\n    hideFooter()\n    {\n        this._grid.hideFooter();\n    }\n\n    footer()\n    {\n        return this._grid.footer();\n    }\n    //#endregion\n\n    //#region Toolbar\n    visibleToolbar(state?: boolean)\n    {\n        return this._grid.visibleToolbar(state);\n    }\n\n    showToolbar()\n    {\n        this._grid.showToolbar();\n    }\n\n    hideToolbar()\n    {\n        this._grid.hideToolbar();\n    }\n\n    toolbar()\n    {\n        return this._grid.toolbar();\n    }\n\n    toolbarItem<T extends VrControl>(value: string)\n    {\n        return this._grid.toolbarItem<T>(value);\n    }\n\n    showToolbarItem(value: string)\n    {\n        this._grid.showToolbarItem(value);\n    }\n\n    hideToolbarItem(value: string)\n    {\n        this._grid.hideToolbarItem(value);\n    }\n\n    enableToolbarItem<T extends VrControl>(value: string)\n    {\n        this._grid.enableToolbarItem<T>(value);\n    }\n\n    disableToolbarItem<T extends VrControl>(value: string)\n    {\n        this._grid.disableToolbarItem<T>(value);\n    }\n\n    removeToolbarItem(value: string)\n    {\n        this._grid.removeToolbarItem(value);\n    }\n\n    addToolbarItem(toolbarItem: GridToolbarItem)\n    {\n        this._grid.addToolbarItem(toolbarItem);\n    }\n    //#endregion\n\n    //#region Column\n    hideCheckboxColumn(updateDataSource = false)\n    {\n        this._grid.hideColumn(\"vrGridCheckboxColumn\", updateDataSource);\n    }\n\n    showCheckboxColumn(updateDataSource = false)\n    {\n        this._grid.showColumn(\"vrGridCheckboxColumn\", updateDataSource);\n    }\n    //#endregion\n\n    //#region Utility\n    pageSize(pageSize?: number | boolean, update = false, triggerDataBound = false)\n    {\n        return this._grid.pageSize(pageSize, update, triggerDataBound);\n    }\n    //#endregion\n\n    //#endregion\n}\n//#endregion\n\n//#region Classes\nclass PaddingSettings\n{\n    left?: number;\n    top?: number;\n    right?: number;\n    bottom?: number;\n}\n\nclass RepeaterOnRowDataBoundEvent extends GridOnRowDataBoundEvent\n{\n    cell: HTMLElement;\n    index: number;\n}\n//#endregion"],"names":[],"mappings":"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"}