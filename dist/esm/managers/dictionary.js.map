{"version":3,"file":"dictionary.js","sources":["../../../src/managers/dictionary.ts"],"sourcesContent":["import { UtilityManager } from \"./utilityManager\";\n\nexport class KeyValuePair<K, V>\n{\n    key: K;\n    value: V;\n}\n\nexport class Dictionary<K, V>\n{\n    items: KeyValuePair<K, V>[];\n\n    private _map: Map<K, V> | null;\n    private get map(): Map<K, V>\n    {\n        if (this._map == null)\n            this._map = this.asMap();\n        return this._map;\n    }\n\n    constructor()\n    {\n        this.items = [];\n    }\n\n    public asMap(): Map<K, V>\n    {\n        return new Map<K, V>(this.items.map(k => [k.key, k.value]));\n    }\n\n    public static fromMap<K, V>(map: Map<K, V>): Dictionary<K, V>\n    {\n        let dict = new Dictionary<K, V>();\n\n        for (let item of map)\n        {\n            let pair = new KeyValuePair<K, V>();\n            pair.key = item[0];\n            pair.value = item[1];\n            dict.items.push(pair);\n        }\n\n        dict._map = map;\n\n        return dict;\n    }\n\n    public static parse<K, V>(dict: Dictionary<K, V>): Dictionary<K, V>\n    {\n        let ret = new Dictionary<K, V>();\n        ret.items = dict.items;\n        return ret;\n    }\n\n    public get(key: K): V | undefined\n    {\n        return this.map.get(key);\n    }\n\n    public set(key: K, value: V)\n    {\n        let item = this.items.find(k => k.key == key);\n        if (item == null)\n        {\n            item = new KeyValuePair<K, V>();\n            item.key = key;\n        }\n        item.value = value;\n\n        this.map.set(key, value);\n        this.items.push(item);\n    }\n\n    //#region Utility\n    public has(key: K)\n    {\n        return this.map.has(key);\n    }\n\n    public delete(key: K)\n    {\n        let itemToDelete = this.items.find(k => k.key == key);\n        if (itemToDelete != null)\n            this.items.vrDeleteItem(itemToDelete, \"key\");\n        this.map.delete(key);\n    }\n\n    public changeKey(oldKey: K, newKey: K)\n    {\n        let oldItems = UtilityManager.duplicate(this.get(oldKey));\n        this.delete(oldKey);\n        this.set(newKey, oldItems);\n    }\n\n    public keys()\n    {\n        return this.items.map(k => k.key);\n    }\n    //#endregion\n}"],"names":[],"mappings":";AAEO,MAAM,aACb;AAAA,EACI;AAAA,EACA;AACJ;AAEO,MAAM,WACb;AAAA,EACI;AAAA,EAEQ;AAAA,EACR,IAAY,MACZ;AACI,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO,KAAK,MAAA;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,cACA;AACI,SAAK,QAAQ,CAAA;AAAA,EACjB;AAAA,EAEO,QACP;AACI,WAAO,IAAI,IAAU,KAAK,MAAM,IAAI,CAAA,MAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAAA,EAC9D;AAAA,EAEA,OAAc,QAAc,KAC5B;AACI,QAAI,OAAO,IAAI,WAAA;AAEf,aAAS,QAAQ,KACjB;AACI,UAAI,OAAO,IAAI,aAAA;AACf,WAAK,MAAM,KAAK,CAAC;AACjB,WAAK,QAAQ,KAAK,CAAC;AACnB,WAAK,MAAM,KAAK,IAAI;AAAA,IACxB;AAEA,SAAK,OAAO;AAEZ,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,MAAY,MAC1B;AACI,QAAI,MAAM,IAAI,WAAA;AACd,QAAI,QAAQ,KAAK;AACjB,WAAO;AAAA,EACX;AAAA,EAEO,IAAI,KACX;AACI,WAAO,KAAK,IAAI,IAAI,GAAG;AAAA,EAC3B;AAAA,EAEO,IAAI,KAAQ,OACnB;AACI,QAAI,OAAO,KAAK,MAAM,KAAK,CAAA,MAAK,EAAE,OAAO,GAAG;AAC5C,QAAI,QAAQ,MACZ;AACI,aAAO,IAAI,aAAA;AACX,WAAK,MAAM;AAAA,IACf;AACA,SAAK,QAAQ;AAEb,SAAK,IAAI,IAAI,KAAK,KAAK;AACvB,SAAK,MAAM,KAAK,IAAI;AAAA,EACxB;AAAA;AAAA,EAGO,IAAI,KACX;AACI,WAAO,KAAK,IAAI,IAAI,GAAG;AAAA,EAC3B;AAAA,EAEO,OAAO,KACd;AACI,QAAI,eAAe,KAAK,MAAM,KAAK,CAAA,MAAK,EAAE,OAAO,GAAG;AACpD,QAAI,gBAAgB;AAChB,WAAK,MAAM,aAAa,cAAc,KAAK;AAC/C,SAAK,IAAI,OAAO,GAAG;AAAA,EACvB;AAAA,EAEO,UAAU,QAAW,QAC5B;AACI,QAAI,WAAW,eAAe,UAAU,KAAK,IAAI,MAAM,CAAC;AACxD,SAAK,OAAO,MAAM;AAClB,SAAK,IAAI,QAAQ,QAAQ;AAAA,EAC7B;AAAA,EAEO,OACP;AACI,WAAO,KAAK,MAAM,IAAI,CAAA,MAAK,EAAE,GAAG;AAAA,EACpC;AAAA;AAEJ;"}