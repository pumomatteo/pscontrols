{"version":3,"file":"pscontrols-react.min.js","sources":["../../node_modules/react/jsx-runtime.js","../../node_modules/react/cjs/react-jsx-runtime.production.js","../../src/react/types/index.ts","../../src/react/components/Button-simple.tsx","../../src/react/index-simple.tsx"],"sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","// PSControls types defined directly to avoid importing legacy system\nexport type IconClass = string;\n\nexport enum ButtonModeEnum {\n  Default = \"vrButtonDefaultMode\",\n  Primary = \"vrButtonPrimaryMode\",\n  Delete = \"vrButtonDeleteMode\",\n  Excel = \"vrButtonExcelMode\",\n  Print = \"vrButtonPrintMode\",\n  Warning = \"vrButtonWarningMode\",\n  Danger = \"vrButtonDangerMode\",\n  Success = \"vrButtonSuccessMode\"\n}\n\nexport interface ColorSettings {\n  textColor?: string;\n  background?: string;\n  border?: string;\n}\n\nexport enum PositionEnum {\n  Left = \"left\",\n  Right = \"right\",\n  Top = \"top\",\n  Bottom = \"bottom\"\n}\n\nexport enum TextAlignEnum {\n  Left = \"left\",\n  Center = \"center\",\n  Right = \"right\"\n}\n\nexport interface BadgeSettings {\n  text?: string;\n  visible?: boolean;\n  color?: string;\n  backgroundColor?: string;\n  css?: string;\n}\n\n// Base props that all React components will inherit\nexport interface PSBaseProps {\n  id?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  width?: string | number;\n  height?: string | number;\n  visible?: boolean;\n  enabled?: boolean;\n  testId?: string; // For testing\n}\n\n// Enhanced props with i18n and a11y\nexport interface PSAccessibleProps extends PSBaseProps {\n  'aria-label'?: string;\n  'aria-describedby'?: string;\n  'aria-expanded'?: boolean;\n  'aria-pressed'?: boolean;\n  role?: string;\n  tabIndex?: number;\n}\n\n// i18n-enabled text props\nexport interface PSTextProps {\n  text?: string;\n  textKey?: string; // i18n key\n  textParams?: Record<string, any>; // i18n parameters\n}","import React, { useCallback } from 'react';\nimport { ButtonModeEnum, IconClass, ColorSettings, BadgeSettings } from '../types';\nimport { PSAccessibleProps, PSTextProps } from '../types';\n\n// Simplified Button props without i18n for testing\nexport interface PSButtonProps extends PSAccessibleProps, PSTextProps {\n  mode?: ButtonModeEnum;\n  value?: string;\n  tooltip?: string;\n  colorSettings?: ColorSettings;\n  icon?: IconClass;\n  onlyIcon?: boolean;\n  imageUrl?: string;\n  confirmationMessage?: string;\n  badgeSettings?: BadgeSettings;\n  loading?: boolean;\n\n  // React-style events\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onRightClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMiddleClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onHover?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n  onMouseDown?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseUp?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\n// Simplified Button component for testing (removed forwardRef temporarily for debugging)\nexport const PSButton: React.FC<PSButtonProps> = ({\n  // Text & props\n  text,\n  textKey,\n  \n  // PSControls original props\n  mode = ButtonModeEnum.Default,\n  value,\n  tooltip,\n  colorSettings,\n  icon,\n  onlyIcon = false,\n  imageUrl,\n  confirmationMessage,\n  badgeSettings,\n  loading = false,\n  \n  // Base props\n  enabled = true,\n  visible = true,\n  className,\n  style,\n  width,\n  height,\n  testId,\n  \n  // Accessibility\n  'aria-label': ariaLabel,\n  'aria-describedby': ariaDescribedby,\n  'aria-expanded': ariaExpanded,\n  'aria-pressed': ariaPressed,\n  role = 'button',\n  tabIndex = 0,\n  \n  // Events\n  onClick,\n  onRightClick,\n  onMiddleClick,\n  onHover,\n  onBlur,\n  onMouseDown,\n  onMouseUp,\n  \n  ...htmlProps\n}) => {\n  // Simple text resolution (no i18n for testing)\n  const resolvedText = text || textKey || 'Button';\n  \n  // Get button class based on mode\n  const getButtonClass = (mode: ButtonModeEnum): string => {\n    const baseClass = 'ps-button';\n    switch (mode) {\n      case ButtonModeEnum.Primary:\n        return `${baseClass} ps-button-primary`;\n      case ButtonModeEnum.Danger:\n        return `${baseClass} ps-button-danger`;\n      case ButtonModeEnum.Success:\n        return `${baseClass} ps-button-success`;\n      case ButtonModeEnum.Warning:\n        return `${baseClass} ps-button-warning`;\n      case ButtonModeEnum.Delete:\n        return `${baseClass} ps-button-delete`;\n      default:\n        return `${baseClass} ps-button-default`;\n    }\n  };\n  \n  // Enhanced click handler with confirmation\n  const handleClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    \n    if (!enabled || loading) {\n      return;\n    }\n\n    if (confirmationMessage) {\n      if (window.confirm(confirmationMessage)) {\n        onClick?.(event);\n      }\n    } else {\n      onClick?.(event);\n    }\n  }, [enabled, loading, confirmationMessage, onClick]);\n\n  // Keyboard accessibility (Enter and Space)\n  const handleKeyDown = useCallback((event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if ((event.key === 'Enter' || event.key === ' ') && enabled && !loading) {\n      event.preventDefault();\n      handleClick(event as any);\n    }\n  }, [enabled, loading, handleClick]);\n\n  // Right/Middle click handling\n  const handleMouseDownCapture = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n    switch (event.button) {\n      case 1: // Middle click\n        event.preventDefault();\n        onMiddleClick?.(event);\n        break;\n      case 2: // Right click\n        event.preventDefault();\n        onRightClick?.(event);\n        break;\n    }\n  }, [onMiddleClick, onRightClick]);\n\n  // Combined styling\n  const combinedStyle: React.CSSProperties = {\n    ...style,\n    width: width ? (typeof width === 'number' ? `${width}px` : width) : undefined,\n    height: height ? (typeof height === 'number' ? `${height}px` : height) : undefined,\n    display: visible ? undefined : 'none'\n  };\n\n  const combinedClassName = [getButtonClass(mode), className].filter(Boolean).join(' ');\n\n  // Accessibility props\n  const ariaProps = {\n    'aria-label': ariaLabel || (onlyIcon ? resolvedText : undefined),\n    'aria-describedby': ariaDescribedby,\n    'aria-expanded': ariaExpanded,\n    'aria-pressed': ariaPressed,\n    'aria-disabled': !enabled,\n    'aria-busy': loading,\n    role,\n    tabIndex: enabled ? tabIndex : -1\n  };\n\n  // Render icon\n  const renderIcon = () => {\n    if (icon) {\n      return <i className={`${icon} ps-button-icon`} aria-hidden=\"true\" />;\n    }\n    if (imageUrl) {\n      return <img src={imageUrl} className=\"ps-button-image\" alt=\"\" aria-hidden=\"true\" />;\n    }\n    return null;\n  };\n\n  // Render badge\n  const renderBadge = () => {\n    if (!badgeSettings || (!badgeSettings.text && !badgeSettings.visible)) {\n      return null;\n    }\n\n    const badgeStyle: React.CSSProperties = {\n      color: badgeSettings.color || '#FFF',\n      backgroundColor: badgeSettings.backgroundColor || 'red',\n    };\n\n    return (\n      <span \n        className=\"ps-badge ps-button-badge\"\n        style={badgeStyle}\n        aria-label={`Badge: ${badgeSettings.text}`}\n      >\n        {badgeSettings.text}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"ps-button-container\">\n      <button\n        type=\"button\"\n        className={combinedClassName}\n        style={combinedStyle}\n        title={tooltip}\n        value={value}\n        disabled={!enabled || loading}\n        data-testid={testId}\n        onClick={handleClick}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onMouseEnter={onHover}\n        onBlur={onBlur}\n        onKeyDown={handleKeyDown}\n        onMouseDownCapture={handleMouseDownCapture}\n        onContextMenu={(e) => e.preventDefault()}\n        {...ariaProps}\n        {...htmlProps}\n      >\n        {/* Icon/Image before text */}\n        {(icon || imageUrl) && renderIcon()}\n        \n        {/* Button text (with loading indicator) */}\n        {loading ? (\n          <span className=\"ps-button-loading\">\n            <i className=\"ps-icon-loading\" aria-hidden=\"true\" />\n            Loading...\n          </span>\n        ) : (\n          !onlyIcon && <span className=\"ps-button-text\">{resolvedText}</span>\n        )}\n      </button>\n      \n      {/* Badge outside button */}\n      {renderBadge()}\n    </div>\n  );\n};\n\nPSButton.displayName = 'PSButton';","import React from 'react';\n\n// Export all React components\nexport { PSButton } from './components/Button-simple';\nexport type { PSButtonProps } from './components/Button-simple';\n\n\n// Export types only for testing\nexport * from './types';\n\n// Simplified Provider component without i18n for testing\nexport interface PSControlsProviderProps {\n  children: React.ReactNode;\n  language?: string;\n  theme?: 'light' | 'dark';\n}\n\nexport const PSControlsProvider: React.FC<PSControlsProviderProps> = ({\n  children,\n  language = 'it',\n  theme = 'light'\n}) => {\n  React.useEffect(() => {\n    document.documentElement.setAttribute('data-ps-theme', theme);\n    document.documentElement.setAttribute('data-ps-language', language);\n  }, [theme, language]);\n\n  return (\n    <div className={`ps-controls-root ps-theme-${theme}`}>\n      {children}\n    </div>\n  );\n};"],"names":["jsxRuntimeModule","exports","REACT_ELEMENT_TYPE","Symbol","for","REACT_FRAGMENT_TYPE","jsxProd","type","config","maybeKey","key","propName","ref","$$typeof","props","reactJsxRuntime_production","Fragment","jsx","jsxs","require$$0","ButtonModeEnum","PositionEnum","TextAlignEnum","PSButton","text","textKey","mode","Default","value","tooltip","colorSettings","icon","onlyIcon","imageUrl","confirmationMessage","badgeSettings","loading","enabled","visible","className","style","width","height","testId","ariaLabel","ariaDescribedby","ariaExpanded","ariaPressed","role","tabIndex","onClick","onRightClick","onMiddleClick","onHover","onBlur","onMouseDown","onMouseUp","htmlProps","resolvedText","handleClick","useCallback","event","preventDefault","window","confirm","handleKeyDown","handleMouseDownCapture","button","combinedStyle","display","combinedClassName","baseClass","Primary","Danger","Success","Warning","Delete","getButtonClass","filter","Boolean","join","ariaProps","children","title","disabled","onMouseEnter","onKeyDown","onMouseDownCapture","onContextMenu","e","src","alt","badgeStyle","color","backgroundColor","renderBadge","displayName","language","theme","React","useEffect","document","documentElement","setAttribute"],"mappings":"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","x_google_ignoreList":[0,1]}